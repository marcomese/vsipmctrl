
vispmControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08008030  08008030  00018030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800857c  0800857c  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800857c  0800857c  0001857c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008584  08008584  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800858c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ace4  20000228  080087b4  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000af0c  080087b4  0002af0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c76c  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020fa  00000000  00000000  0002c9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002eac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002f360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ac  00000000  00000000  0002fb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd1f  00000000  00000000  00046bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000869cb  00000000  00000000  000528f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d92be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003690  00000000  00000000  000d9314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000228 	.word	0x20000228
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008018 	.word	0x08008018

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000022c 	.word	0x2000022c
 80001dc:	08008018 	.word	0x08008018

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <execute>:
extern float katodeVoltage;
extern float katodeMaxVoltage;

extern float* outVoltagePointer;

void execute(void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    if(command){
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <execute+0x28>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00b      	beq.n	8001020 <execute+0x24>
        *(endPacketPointer-1) = 0; // Azzero il carattere terminatore perchè altrimenti si ripete la lettura del pacchetto
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <execute+0x2c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
        (*(commandExecute[command]))();
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <execute+0x28>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <execute+0x30>)
 800101a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101e:	4798      	blx	r3
    }
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000255 	.word	0x20000255
 8001028:	20000004 	.word	0x20000004
 800102c:	080080a8 	.word	0x080080a8

08001030 <noop>:

void noop(void){}
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <idnCMD>:

void idnCMD(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
    snprintf((char*)uartResp,UARTRESSIZE,"%s\r\n",ADDR);
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <idnCMD+0x20>)
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <idnCMD+0x24>)
 8001048:	210f      	movs	r1, #15
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <idnCMD+0x28>)
 800104c:	f003 fa1e 	bl	800448c <sniprintf>
    HAL_UART_Transmit_IT(&huart2,uartResp,UARTRESSIZE);
 8001050:	220f      	movs	r2, #15
 8001052:	4905      	ldr	r1, [pc, #20]	; (8001068 <idnCMD+0x28>)
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <idnCMD+0x2c>)
 8001056:	f001 fff0 	bl	800303a <HAL_UART_Transmit_IT>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	08008030 	.word	0x08008030
 8001064:	0800803c 	.word	0x0800803c
 8001068:	2000121c 	.word	0x2000121c
 800106c:	2000aeb0 	.word	0x2000aeb0

08001070 <voltageCMD>:

/*
 * REALIZZARE UN BUFFER PER IL TX!!!!
 */

void voltageCMD(void){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af02      	add	r7, sp, #8
    char* err;
    float outVal = strtof(argument,&err);
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4816      	ldr	r0, [pc, #88]	; (80010d4 <voltageCMD+0x64>)
 800107c:	f004 f8ae 	bl	80051dc <strtof>
 8001080:	ed87 0a01 	vstr	s0, [r7, #4]

    if(err != argument){
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <voltageCMD+0x64>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d01a      	beq.n	80010c2 <voltageCMD+0x52>
        *outVoltagePointer = outVal;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <voltageCMD+0x68>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	601a      	str	r2, [r3, #0]

        memset(uartResp,0,UARTRESSIZE);
 8001094:	220f      	movs	r2, #15
 8001096:	2100      	movs	r1, #0
 8001098:	4810      	ldr	r0, [pc, #64]	; (80010dc <voltageCMD+0x6c>)
 800109a:	f002 fd85 	bl	8003ba8 <memset>

        snprintf((char*)uartResp,UARTRESSIZE,"%.2f\r\n",outVal);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fa5a 	bl	8000558 <__aeabi_f2d>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	e9cd 2300 	strd	r2, r3, [sp]
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <voltageCMD+0x70>)
 80010ae:	210f      	movs	r1, #15
 80010b0:	480a      	ldr	r0, [pc, #40]	; (80010dc <voltageCMD+0x6c>)
 80010b2:	f003 f9eb 	bl	800448c <sniprintf>

        HAL_UART_Transmit_IT(&huart2,uartResp,UARTRESSIZE);
 80010b6:	220f      	movs	r2, #15
 80010b8:	4908      	ldr	r1, [pc, #32]	; (80010dc <voltageCMD+0x6c>)
 80010ba:	480a      	ldr	r0, [pc, #40]	; (80010e4 <voltageCMD+0x74>)
 80010bc:	f001 ffbd 	bl	800303a <HAL_UART_Transmit_IT>
    }else{
        HAL_UART_Transmit_IT(&huart2, (uint8_t*)"ERR: NaN\r\n", UARTRESSIZE);
    }
}
 80010c0:	e004      	b.n	80010cc <voltageCMD+0x5c>
        HAL_UART_Transmit_IT(&huart2, (uint8_t*)"ERR: NaN\r\n", UARTRESSIZE);
 80010c2:	220f      	movs	r2, #15
 80010c4:	4908      	ldr	r1, [pc, #32]	; (80010e8 <voltageCMD+0x78>)
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <voltageCMD+0x74>)
 80010c8:	f001 ffb7 	bl	800303a <HAL_UART_Transmit_IT>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000120c 	.word	0x2000120c
 80010d8:	20000258 	.word	0x20000258
 80010dc:	2000121c 	.word	0x2000121c
 80010e0:	08008044 	.word	0x08008044
 80010e4:	2000aeb0 	.word	0x2000aeb0
 80010e8:	0800804c 	.word	0x0800804c

080010ec <initFSM>:
 *                ...
 *        }
 *
 */

fsm_t initFSM(state_function_t initialState, void** inputs, void** outputs){
 80010ec:	b490      	push	{r4, r7}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]

    fsm_t retFSM;

    retFSM.state = initialState;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	617b      	str	r3, [r7, #20]
    retFSM.input_var = inputs;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	61bb      	str	r3, [r7, #24]
    retFSM.output_var = outputs;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	61fb      	str	r3, [r7, #28]

    return retFSM;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	461c      	mov	r4, r3
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001112:	e884 0007 	stmia.w	r4, {r0, r1, r2}

}
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bc90      	pop	{r4, r7}
 800111e:	4770      	bx	lr

08001120 <packetCtrlIDLE>:
/*
 * AGGIUNGERE UNO STATO DI WAIT CHE ASPETTI CHE LA parseFSM SI LIBERI!!! ALTRIMENTI SE NELLA SERIALE CI SONO
 * DATI NUOVI CHE SUBITO ARRIVANO AL TERMINATORE (*IDN?\N AD ESEMPIO) MI VA A CAMBIARE IL PACCHETTO DURANTE L'ESECUZIONE
 * (TRA L'ALTRO DEVI AGGIUNGERE FRA GLI INGRESSI IL SEGNALE DI BUSY DELLA parseFSM)
 */
void packetCtrlIDLE(fsm_t* s){
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,process,uint8_t) = 0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
//    FSM_OUT(s,packetIndex,uint8_t) = 0;

    uint8_t* lastCh = FSM_IN(s,endPacketPointer,uint8_t*)-1;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3b01      	subs	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]

    if(*lastCh == '\r' || *lastCh == '\n'){
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b0d      	cmp	r3, #13
 8001144:	d003      	beq.n	800114e <packetCtrlIDLE+0x2e>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d103      	bne.n	8001156 <packetCtrlIDLE+0x36>
        FSM_STATE(s) = packetCtrlSelect;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <packetCtrlIDLE+0x4c>)
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e003      	b.n	800115e <packetCtrlIDLE+0x3e>
    }else{
        FSM_STATE(s) = packetCtrlIDLE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a05      	ldr	r2, [pc, #20]	; (8001170 <packetCtrlIDLE+0x50>)
 800115a:	601a      	str	r2, [r3, #0]
    }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	08001175 	.word	0x08001175
 8001170:	08001121 	.word	0x08001121

08001174 <packetCtrlSelect>:

void packetCtrlSelect(fsm_t* s){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,process,uint8_t) = 1;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]

    FSM_STATE(s) = packetCtrlWaitProcessed;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <packetCtrlSelect+0x24>)
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	0800119d 	.word	0x0800119d

0800119c <packetCtrlWaitProcessed>:

void packetCtrlWaitProcessed(fsm_t* s){
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,process,uint8_t) = 0;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]

    if(FSM_IN(s,packetProcessed,uint8_t) == 1){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	3308      	adds	r3, #8
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d103      	bne.n	80011c4 <packetCtrlWaitProcessed+0x28>
        FSM_STATE(s) = packetCtrlNext;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <packetCtrlWaitProcessed+0x3c>)
 80011c0:	601a      	str	r2, [r3, #0]
    }else{
        FSM_STATE(s) = packetCtrlWaitProcessed;
    }
}
 80011c2:	e002      	b.n	80011ca <packetCtrlWaitProcessed+0x2e>
        FSM_STATE(s) = packetCtrlWaitProcessed;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <packetCtrlWaitProcessed+0x40>)
 80011c8:	601a      	str	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	080011e1 	.word	0x080011e1
 80011dc:	0800119d 	.word	0x0800119d

080011e0 <packetCtrlNext>:

void packetCtrlNext(fsm_t* s){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,process,uint8_t) = 0;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetIndex,uint8_t) = FSM_OUT(s,packetIndex,uint8_t)+1;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	3304      	adds	r3, #4
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	3304      	adds	r3, #4
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3201      	adds	r2, #1
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]

    if(FSM_OUT(s,packetIndex,uint8_t) == FSM_IN(s,packetsNum,uint8_t)){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	3304      	adds	r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	781a      	ldrb	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	3304      	adds	r3, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d103      	bne.n	800122a <packetCtrlNext+0x4a>
        FSM_STATE(s) = packetCtrlIDLE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a05      	ldr	r2, [pc, #20]	; (800123c <packetCtrlNext+0x5c>)
 8001226:	601a      	str	r2, [r3, #0]
    }else{
        FSM_STATE(s) = packetCtrlSelect;
    }
}
 8001228:	e002      	b.n	8001230 <packetCtrlNext+0x50>
        FSM_STATE(s) = packetCtrlSelect;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <packetCtrlNext+0x60>)
 800122e:	601a      	str	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	08001121 	.word	0x08001121
 8001240:	08001175 	.word	0x08001175

08001244 <parseIDLE>:

#define VOLTLEN sizeof(VOLTCMD)
#define MAXLEN sizeof(MAXCMD)
#define STATELEN sizeof(STATECMD)

void parseIDLE(fsm_t* s){
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 0;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	3304      	adds	r3, #4
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 0;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	330c      	adds	r3, #12
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]

    if(FSM_IN(s,process,uint8_t))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	3304      	adds	r3, #4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <parseIDLE+0x40>
        FSM_STATE(s) = parseNode;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a06      	ldr	r2, [pc, #24]	; (8001298 <parseIDLE+0x54>)
 8001280:	601a      	str	r2, [r3, #0]
    else
        FSM_STATE(s) = parseIDLE;
}
 8001282:	e002      	b.n	800128a <parseIDLE+0x46>
        FSM_STATE(s) = parseIDLE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <parseIDLE+0x58>)
 8001288:	601a      	str	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	080012a1 	.word	0x080012a1
 800129c:	08001245 	.word	0x08001245

080012a0 <parseNode>:

void parseNode(fsm_t* s){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	3304      	adds	r3, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	330c      	adds	r3, #12
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]

    uint8_t* pack = FSM_IN(s,currPacket,uint8_t*);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]

    if(strncmp((const char*)pack,NODESECT,NODELEN) == 0){
 80012d4:	2205      	movs	r2, #5
 80012d6:	490f      	ldr	r1, [pc, #60]	; (8001314 <parseNode+0x74>)
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f003 f918 	bl	800450e <strncmp>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d103      	bne.n	80012ec <parseNode+0x4c>
        FSM_STATE(s) = parseAddr;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <parseNode+0x78>)
 80012e8:	601a      	str	r2, [r3, #0]
    }else if(strncmp((const char*)pack,IDNSECT,IDNLEN) == 0){
        FSM_STATE(s) = parseCmdIDN;
    }else{
        FSM_STATE(s) = parseErrNode;
    }
}
 80012ea:	e00e      	b.n	800130a <parseNode+0x6a>
    }else if(strncmp((const char*)pack,IDNSECT,IDNLEN) == 0){
 80012ec:	2205      	movs	r2, #5
 80012ee:	490b      	ldr	r1, [pc, #44]	; (800131c <parseNode+0x7c>)
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f003 f90c 	bl	800450e <strncmp>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <parseNode+0x64>
        FSM_STATE(s) = parseCmdIDN;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a08      	ldr	r2, [pc, #32]	; (8001320 <parseNode+0x80>)
 8001300:	601a      	str	r2, [r3, #0]
}
 8001302:	e002      	b.n	800130a <parseNode+0x6a>
        FSM_STATE(s) = parseErrNode;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <parseNode+0x84>)
 8001308:	601a      	str	r2, [r3, #0]
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	08008058 	.word	0x08008058
 8001318:	08001329 	.word	0x08001329
 800131c:	08008060 	.word	0x08008060
 8001320:	0800146d 	.word	0x0800146d
 8001324:	080016a1 	.word	0x080016a1

08001328 <parseAddr>:

void parseAddr(fsm_t* s){
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	3304      	adds	r3, #4
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 0;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	330c      	adds	r3, #12
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]

    uint8_t* pack = FSM_IN(s,currPacket,uint8_t*);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	60fb      	str	r3, [r7, #12]

    const char* addrStr = (const char*)pack+NODELEN;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3305      	adds	r3, #5
 8001360:	60bb      	str	r3, [r7, #8]

    if(strncmp(addrStr,ADDR,ADDRLEN) == 0){
 8001362:	2208      	movs	r2, #8
 8001364:	4908      	ldr	r1, [pc, #32]	; (8001388 <parseAddr+0x60>)
 8001366:	68b8      	ldr	r0, [r7, #8]
 8001368:	f003 f8d1 	bl	800450e <strncmp>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d103      	bne.n	800137a <parseAddr+0x52>
        FSM_STATE(s) = parseSection;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a05      	ldr	r2, [pc, #20]	; (800138c <parseAddr+0x64>)
 8001376:	601a      	str	r2, [r3, #0]
    }else{
        FSM_STATE(s) = parseSendToAddr;
    }
}
 8001378:	e002      	b.n	8001380 <parseAddr+0x58>
        FSM_STATE(s) = parseSendToAddr;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <parseAddr+0x68>)
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	08008068 	.word	0x08008068
 800138c:	08001395 	.word	0x08001395
 8001390:	080015a1 	.word	0x080015a1

08001394 <parseSection>:

void parseSection(fsm_t* s){
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	3304      	adds	r3, #4
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 0;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	330c      	adds	r3, #12
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]

    uint8_t* pack = FSM_IN(s,currPacket,uint8_t*);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	617b      	str	r3, [r7, #20]

    const char* sectStr = (const char*)pack+NODELEN+ADDRLEN+1;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	330e      	adds	r3, #14
 80013cc:	613b      	str	r3, [r7, #16]

    char* endSect = strpbrk(sectStr,":");
 80013ce:	213a      	movs	r1, #58	; 0x3a
 80013d0:	6938      	ldr	r0, [r7, #16]
 80013d2:	f003 f88f 	bl	80044f4 <strchr>
 80013d6:	60f8      	str	r0, [r7, #12]

    uint8_t secL = endSect-sectStr;
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	72fb      	strb	r3, [r7, #11]

    if(secL > 0 && strncmp(sectStr,BIASSECT,secL) == 0){
 80013e0:	7afb      	ldrb	r3, [r7, #11]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00c      	beq.n	8001400 <parseSection+0x6c>
 80013e6:	7afb      	ldrb	r3, [r7, #11]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4919      	ldr	r1, [pc, #100]	; (8001450 <parseSection+0xbc>)
 80013ec:	6938      	ldr	r0, [r7, #16]
 80013ee:	f003 f88e 	bl	800450e <strncmp>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d103      	bne.n	8001400 <parseSection+0x6c>
        FSM_STATE(s) = parseCmdBIAS;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a16      	ldr	r2, [pc, #88]	; (8001454 <parseSection+0xc0>)
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	e023      	b.n	8001448 <parseSection+0xb4>
    }else if(secL > 0 && strncmp(sectStr,KATODESECT,secL) == 0){
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00c      	beq.n	8001420 <parseSection+0x8c>
 8001406:	7afb      	ldrb	r3, [r7, #11]
 8001408:	461a      	mov	r2, r3
 800140a:	4913      	ldr	r1, [pc, #76]	; (8001458 <parseSection+0xc4>)
 800140c:	6938      	ldr	r0, [r7, #16]
 800140e:	f003 f87e 	bl	800450e <strncmp>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d103      	bne.n	8001420 <parseSection+0x8c>
        FSM_STATE(s) = parseCmdKAT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <parseSection+0xc8>)
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e013      	b.n	8001448 <parseSection+0xb4>
    }else if(secL > 0 && strncmp(sectStr,MONITORSECT,secL) == 0){
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00c      	beq.n	8001440 <parseSection+0xac>
 8001426:	7afb      	ldrb	r3, [r7, #11]
 8001428:	461a      	mov	r2, r3
 800142a:	490d      	ldr	r1, [pc, #52]	; (8001460 <parseSection+0xcc>)
 800142c:	6938      	ldr	r0, [r7, #16]
 800142e:	f003 f86e 	bl	800450e <strncmp>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d103      	bne.n	8001440 <parseSection+0xac>
        FSM_STATE(s) = parseCmdMON;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <parseSection+0xd0>)
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e003      	b.n	8001448 <parseSection+0xb4>
    }else{
        FSM_STATE(s) = parseErrSection;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a09      	ldr	r2, [pc, #36]	; (8001468 <parseSection+0xd4>)
 8001444:	601a      	str	r2, [r3, #0]
    }
}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	08008074 	.word	0x08008074
 8001454:	080014ad 	.word	0x080014ad
 8001458:	0800807c 	.word	0x0800807c
 800145c:	08001579 	.word	0x08001579
 8001460:	08008084 	.word	0x08008084
 8001464:	0800158d 	.word	0x0800158d
 8001468:	080016e1 	.word	0x080016e1

0800146c <parseCmdIDN>:

void parseCmdIDN(fsm_t* s){
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = IDNCMD;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	3304      	adds	r3, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 1;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	330c      	adds	r3, #12
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]

    FSM_STATE(s) = parseIDLE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <parseCmdIDN+0x3c>)
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	08001245 	.word	0x08001245

080014ac <parseCmdBIAS>:

void parseCmdBIAS(fsm_t* s){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	3304      	adds	r3, #4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 0;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	330c      	adds	r3, #12
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]

    uint8_t* pack = FSM_IN(s,currPacket,uint8_t*);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	617b      	str	r3, [r7, #20]

    const char* biasArg = (const char*)pack+NODELEN+ADDRLEN+BIASLEN+2;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3313      	adds	r3, #19
 80014e4:	613b      	str	r3, [r7, #16]

    char* argEnd = strpbrk(biasArg," ?");
 80014e6:	491c      	ldr	r1, [pc, #112]	; (8001558 <parseCmdBIAS+0xac>)
 80014e8:	6938      	ldr	r0, [r7, #16]
 80014ea:	f003 f835 	bl	8004558 <strpbrk>
 80014ee:	60f8      	str	r0, [r7, #12]

    size_t argL = (argEnd > 0) ? argEnd-biasArg : sizeof(argEnd)-1;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <parseCmdBIAS+0x52>
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	e000      	b.n	8001500 <parseCmdBIAS+0x54>
 80014fe:	2303      	movs	r3, #3
 8001500:	60bb      	str	r3, [r7, #8]

    if(strncmp(biasArg,VOLTCMDSTR,argL) == 0){
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	4915      	ldr	r1, [pc, #84]	; (800155c <parseCmdBIAS+0xb0>)
 8001506:	6938      	ldr	r0, [r7, #16]
 8001508:	f003 f801 	bl	800450e <strncmp>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d103      	bne.n	800151a <parseCmdBIAS+0x6e>
        FSM_STATE(s) = parseVoltageCmd;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <parseCmdBIAS+0xb4>)
 8001516:	601a      	str	r2, [r3, #0]
        FSM_STATE(s) = parseStateCmd;
    }else{
        FSM_STATE(s) = parseErrCmd;
    }

}
 8001518:	e01a      	b.n	8001550 <parseCmdBIAS+0xa4>
    }else if(strncmp(biasArg,MAXCMDSTR,argL) == 0){
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	4911      	ldr	r1, [pc, #68]	; (8001564 <parseCmdBIAS+0xb8>)
 800151e:	6938      	ldr	r0, [r7, #16]
 8001520:	f002 fff5 	bl	800450e <strncmp>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <parseCmdBIAS+0x86>
        FSM_STATE(s) = parseMaxCmd;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <parseCmdBIAS+0xbc>)
 800152e:	601a      	str	r2, [r3, #0]
}
 8001530:	e00e      	b.n	8001550 <parseCmdBIAS+0xa4>
    }else if(strncmp(biasArg,STATECMDSTR,argL) == 0){
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	490d      	ldr	r1, [pc, #52]	; (800156c <parseCmdBIAS+0xc0>)
 8001536:	6938      	ldr	r0, [r7, #16]
 8001538:	f002 ffe9 	bl	800450e <strncmp>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d103      	bne.n	800154a <parseCmdBIAS+0x9e>
        FSM_STATE(s) = parseStateCmd;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <parseCmdBIAS+0xc4>)
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	e002      	b.n	8001550 <parseCmdBIAS+0xa4>
        FSM_STATE(s) = parseErrCmd;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a09      	ldr	r2, [pc, #36]	; (8001574 <parseCmdBIAS+0xc8>)
 800154e:	601a      	str	r2, [r3, #0]
}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	0800808c 	.word	0x0800808c
 800155c:	08008090 	.word	0x08008090
 8001560:	080015e1 	.word	0x080015e1
 8001564:	08008098 	.word	0x08008098
 8001568:	08001679 	.word	0x08001679
 800156c:	0800809c 	.word	0x0800809c
 8001570:	0800168d 	.word	0x0800168d
 8001574:	08001721 	.word	0x08001721

08001578 <parseCmdKAT>:

void parseCmdKAT(fsm_t* s){
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    return;
 8001580:	bf00      	nop
}
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <parseCmdMON>:

void parseCmdMON(fsm_t* s){
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    return;
 8001594:	bf00      	nop
}
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <parseSendToAddr>:

void parseSendToAddr(fsm_t* s){
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;//SENDTOADDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	3304      	adds	r3, #4
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 1;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	330c      	adds	r3, #12
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]

    FSM_STATE(s) = parseIDLE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a03      	ldr	r2, [pc, #12]	; (80015dc <parseSendToAddr+0x3c>)
 80015ce:	601a      	str	r2, [r3, #0]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	08001245 	.word	0x08001245

080015e0 <parseVoltageCmd>:

void parseVoltageCmd(fsm_t* s){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = VOLTCMD;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2202      	movs	r2, #2
 80015f0:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	3304      	adds	r3, #4
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	330c      	adds	r3, #12
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]

    FSM_OUT(s,outVoltagePointer,float*) = FSM_INP(s,biasVoltage);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	3310      	adds	r3, #16
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6892      	ldr	r2, [r2, #8]
 8001618:	601a      	str	r2, [r3, #0]

    char* argOut = FSM_OUTP(s,argument);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	61fb      	str	r3, [r7, #28]
    memset(argOut,0,CMDARGSIZE);
 8001622:	220f      	movs	r2, #15
 8001624:	2100      	movs	r1, #0
 8001626:	69f8      	ldr	r0, [r7, #28]
 8001628:	f002 fabe 	bl	8003ba8 <memset>

    uint8_t* pack = FSM_IN(s,currPacket,uint8_t*);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]

    const char* biasArg = (const char*)pack+NODELEN+ADDRLEN+BIASLEN+2;
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	3313      	adds	r3, #19
 800163a:	617b      	str	r3, [r7, #20]

    char* argEnd = strpbrk(biasArg,":;");
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <parseVoltageCmd+0x90>)
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f002 ff8a 	bl	8004558 <strpbrk>
 8001644:	6138      	str	r0, [r7, #16]

    size_t argL = (argEnd > 0) ? argEnd-biasArg : sizeof(argEnd)-1;
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <parseVoltageCmd+0x74>
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	e000      	b.n	8001656 <parseVoltageCmd+0x76>
 8001654:	2303      	movs	r3, #3
 8001656:	60fb      	str	r3, [r7, #12]

    strncpy(argOut,biasArg,argL);
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	6979      	ldr	r1, [r7, #20]
 800165c:	69f8      	ldr	r0, [r7, #28]
 800165e:	f002 ff68 	bl	8004532 <strncpy>

    FSM_STATE(s) = parseIDLE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a03      	ldr	r2, [pc, #12]	; (8001674 <parseVoltageCmd+0x94>)
 8001666:	601a      	str	r2, [r3, #0]

}
 8001668:	bf00      	nop
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	080080a4 	.word	0x080080a4
 8001674:	08001245 	.word	0x08001245

08001678 <parseMaxCmd>:

void parseMaxCmd(fsm_t* s){
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    return;
 8001680:	bf00      	nop
}
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <parseStateCmd>:

void parseStateCmd(fsm_t* s){
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    return;
 8001694:	bf00      	nop
}
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <parseErrNode>:

void parseExecute(fsm_t* s){
    return;
}

void parseErrNode(fsm_t* s){
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	3304      	adds	r3, #4
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 1;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	330c      	adds	r3, #12
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]

    FSM_STATE(s) = parseIDLE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <parseErrNode+0x3c>)
 80016ce:	601a      	str	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	08001245 	.word	0x08001245

080016e0 <parseErrSection>:

void parseErrSection(fsm_t* s){
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	3304      	adds	r3, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	330c      	adds	r3, #12
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]

    FSM_STATE(s) = parseIDLE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a03      	ldr	r2, [pc, #12]	; (800171c <parseErrSection+0x3c>)
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	08001245 	.word	0x08001245

08001720 <parseErrCmd>:

void parseErrCmd(fsm_t* s){
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	3304      	adds	r3, #4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	330c      	adds	r3, #12
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]

    FSM_STATE(s) = parseIDLE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a03      	ldr	r2, [pc, #12]	; (800175c <parseErrCmd+0x3c>)
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	08001245 	.word	0x08001245

08001760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001766:	f000 fbf3 	bl	8001f50 <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(dataBuffer,0,BUFSIZE);
 800176a:	f649 4240 	movw	r2, #40000	; 0x9c40
 800176e:	2100      	movs	r1, #0
 8001770:	4822      	ldr	r0, [pc, #136]	; (80017fc <main+0x9c>)
 8001772:	f002 fa19 	bl	8003ba8 <memset>
  memset(uartResp,0,UARTRESSIZE);
 8001776:	220f      	movs	r2, #15
 8001778:	2100      	movs	r1, #0
 800177a:	4821      	ldr	r0, [pc, #132]	; (8001800 <main+0xa0>)
 800177c:	f002 fa14 	bl	8003ba8 <memset>
  currPacket = packetToProcess[0];
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <main+0xa4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a20      	ldr	r2, [pc, #128]	; (8001808 <main+0xa8>)
 8001786:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001788:	f000 f850 	bl	800182c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178c:	f000 f90e 	bl	80019ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001790:	f000 f8e2 	bl	8001958 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001794:	f000 f8b6 	bl	8001904 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, dataBuffer, 1);
 8001798:	2201      	movs	r2, #1
 800179a:	4918      	ldr	r1, [pc, #96]	; (80017fc <main+0x9c>)
 800179c:	481b      	ldr	r0, [pc, #108]	; (800180c <main+0xac>)
 800179e:	f001 fc91 	bl	80030c4 <HAL_UART_Receive_IT>

  packetCtrlFSM = initFSM(packetCtrlIDLE,
 80017a2:	4638      	mov	r0, r7
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <main+0xb0>)
 80017a6:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <main+0xb4>)
 80017a8:	491b      	ldr	r1, [pc, #108]	; (8001818 <main+0xb8>)
 80017aa:	f7ff fc9f 	bl	80010ec <initFSM>
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	463a      	mov	r2, r7
 80017b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80017b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                          packetCtrlInputs,
                          packetCtrlOutputs);

  parseFSM = initFSM(parseIDLE,
 80017ba:	4638      	mov	r0, r7
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <main+0xbc>)
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <main+0xc0>)
 80017c0:	4918      	ldr	r1, [pc, #96]	; (8001824 <main+0xc4>)
 80017c2:	f7ff fc93 	bl	80010ec <initFSM>
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	463a      	mov	r2, r7
 80017cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      runFSM(&packetCtrlFSM);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f107 0210 	add.w	r2, r7, #16
 80017d8:	4610      	mov	r0, r2
 80017da:	4798      	blx	r3

      currPacket = packetToProcess[packetIndex];
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <main+0xc8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <main+0xa4>)
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <main+0xa8>)
 80017ea:	6013      	str	r3, [r2, #0]

      runFSM(&parseFSM);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f107 021c 	add.w	r2, r7, #28
 80017f2:	4610      	mov	r0, r2
 80017f4:	4798      	blx	r3

      execute();
 80017f6:	f7ff fc01 	bl	8000ffc <execute>
      runFSM(&packetCtrlFSM);
 80017fa:	e7ea      	b.n	80017d2 <main+0x72>
 80017fc:	20001270 	.word	0x20001270
 8001800:	2000121c 	.word	0x2000121c
 8001804:	2000026c 	.word	0x2000026c
 8001808:	2000aef4 	.word	0x2000aef4
 800180c:	2000aeb0 	.word	0x2000aeb0
 8001810:	20000040 	.word	0x20000040
 8001814:	20000034 	.word	0x20000034
 8001818:	08001121 	.word	0x08001121
 800181c:	20000020 	.word	0x20000020
 8001820:	20000008 	.word	0x20000008
 8001824:	08001245 	.word	0x08001245
 8001828:	2000025d 	.word	0x2000025d

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b094      	sub	sp, #80	; 0x50
 8001830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 0320 	add.w	r3, r7, #32
 8001836:	2230      	movs	r2, #48	; 0x30
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f002 f9b4 	bl	8003ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <SystemClock_Config+0xd0>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a28      	ldr	r2, [pc, #160]	; (80018fc <SystemClock_Config+0xd0>)
 800185a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
 8001860:	4b26      	ldr	r3, [pc, #152]	; (80018fc <SystemClock_Config+0xd0>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <SystemClock_Config+0xd4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001878:	4a21      	ldr	r2, [pc, #132]	; (8001900 <SystemClock_Config+0xd4>)
 800187a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <SystemClock_Config+0xd4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800188c:	2302      	movs	r3, #2
 800188e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001890:	2301      	movs	r3, #1
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001894:	2310      	movs	r3, #16
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001898:	2302      	movs	r3, #2
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800189c:	2300      	movs	r3, #0
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018a0:	2310      	movs	r3, #16
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018aa:	2304      	movs	r3, #4
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018ae:	2307      	movs	r3, #7
 80018b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fefe 	bl	80026b8 <HAL_RCC_OscConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018c2:	f000 f8e3 	bl	8001a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c6:	230f      	movs	r3, #15
 80018c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ca:	2302      	movs	r3, #2
 80018cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2102      	movs	r1, #2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 f960 	bl	8002ba8 <HAL_RCC_ClockConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018ee:	f000 f8cd 	bl	8001a8c <Error_Handler>
  }
}
 80018f2:	bf00      	nop
 80018f4:	3750      	adds	r7, #80	; 0x50
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000

08001904 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <MX_USART1_UART_Init+0x50>)
 800190c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001910:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 800192a:	220c      	movs	r2, #12
 800192c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 800193c:	f001 fb30 	bl	8002fa0 <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001946:	f000 f8a1 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000122c 	.word	0x2000122c
 8001954:	40011000 	.word	0x40011000

08001958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_USART2_UART_Init+0x50>)
 8001960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001964:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001990:	f001 fb06 	bl	8002fa0 <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800199a:	f000 f877 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000aeb0 	.word	0x2000aeb0
 80019a8:	40004400 	.word	0x40004400

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <MX_GPIO_Init+0xd0>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a2c      	ldr	r2, [pc, #176]	; (8001a7c <MX_GPIO_Init+0xd0>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <MX_GPIO_Init+0xd0>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <MX_GPIO_Init+0xd0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a25      	ldr	r2, [pc, #148]	; (8001a7c <MX_GPIO_Init+0xd0>)
 80019e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <MX_GPIO_Init+0xd0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_GPIO_Init+0xd0>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a1e      	ldr	r2, [pc, #120]	; (8001a7c <MX_GPIO_Init+0xd0>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_GPIO_Init+0xd0>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_GPIO_Init+0xd0>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <MX_GPIO_Init+0xd0>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MX_GPIO_Init+0xd0>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2120      	movs	r1, #32
 8001a36:	4812      	ldr	r0, [pc, #72]	; (8001a80 <MX_GPIO_Init+0xd4>)
 8001a38:	f000 fe24 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_GPIO_Init+0xd8>)
 8001a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480d      	ldr	r0, [pc, #52]	; (8001a88 <MX_GPIO_Init+0xdc>)
 8001a52:	f000 fc93 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a56:	2320      	movs	r3, #32
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_GPIO_Init+0xd4>)
 8001a6e:	f000 fc85 	bl	800237c <HAL_GPIO_Init>

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000
 8001a84:	10210000 	.word	0x10210000
 8001a88:	40020800 	.word	0x40020800

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <Error_Handler+0x8>
	...

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ad6:	2007      	movs	r0, #7
 8001ad8:	f000 fb7c 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	; 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a3a      	ldr	r2, [pc, #232]	; (8001bf0 <HAL_UART_MspInit+0x108>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d135      	bne.n	8001b76 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a38      	ldr	r2, [pc, #224]	; (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b14:	f043 0310 	orr.w	r3, r3, #16
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a31      	ldr	r2, [pc, #196]	; (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = usartOutTx_Pin|usartOutRx_Pin;
 8001b42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b54:	2307      	movs	r3, #7
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4826      	ldr	r0, [pc, #152]	; (8001bf8 <HAL_UART_MspInit+0x110>)
 8001b60:	f000 fc0c 	bl	800237c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	2025      	movs	r0, #37	; 0x25
 8001b6a:	f000 fb3e 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b6e:	2025      	movs	r0, #37	; 0x25
 8001b70:	f000 fb57 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b74:	e038      	b.n	8001be8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <HAL_UART_MspInit+0x114>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d133      	bne.n	8001be8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_UART_MspInit+0x10c>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = usartInTx_Pin|usartInRx_Pin;
 8001bb8:	230c      	movs	r3, #12
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc8:	2307      	movs	r3, #7
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <HAL_UART_MspInit+0x110>)
 8001bd4:	f000 fbd2 	bl	800237c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2026      	movs	r0, #38	; 0x26
 8001bde:	f000 fb04 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001be2:	2026      	movs	r0, #38	; 0x26
 8001be4:	f000 fb1d 	bl	8002222 <HAL_NVIC_EnableIRQ>
}
 8001be8:	bf00      	nop
 8001bea:	3730      	adds	r7, #48	; 0x30
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40004400 	.word	0x40004400

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <NMI_Handler+0x4>

08001c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <HardFault_Handler+0x4>

08001c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <MemManage_Handler+0x4>

08001c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <BusFault_Handler+0x4>

08001c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <UsageFault_Handler+0x4>

08001c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4c:	f000 f9d2 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <USART1_IRQHandler+0x10>)
 8001c5a:	f001 fa63 	bl	8003124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000122c 	.word	0x2000122c

08001c68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  uint8_t isRx = huart2.Instance->SR & USART_SR_RXNE;
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <USART2_IRQHandler+0xc4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c7c:	482b      	ldr	r0, [pc, #172]	; (8001d2c <USART2_IRQHandler+0xc4>)
 8001c7e:	f001 fa51 	bl	8003124 <HAL_UART_IRQHandler>
   * nel caso in cui l'indirizzo successivo sia tale che aggiungendo un pacchetto della MASSIMA
   * larghezza si arriva alla fine del buffer, allora punto all'inizio del buffer.
   * Altrimenti continuo a riempire il buffer normalmente, tanto i pacchetti saranno di dimensioni
   * inferiori a MAXPACKETSIZE e quindi non arriverò alla fine!
   */
  if(isRx){
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d04c      	beq.n	8001d22 <USART2_IRQHandler+0xba>
        if(*endPacketPointer == ';' || *endPacketPointer == '\r' || *endPacketPointer == '\n'){
 8001c88:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b3b      	cmp	r3, #59	; 0x3b
 8001c90:	d009      	beq.n	8001ca6 <USART2_IRQHandler+0x3e>
 8001c92:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b0d      	cmp	r3, #13
 8001c9a:	d004      	beq.n	8001ca6 <USART2_IRQHandler+0x3e>
 8001c9c:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b0a      	cmp	r3, #10
 8001ca4:	d126      	bne.n	8001cf4 <USART2_IRQHandler+0x8c>

          packetToProcess[packetsNum] = dataPointer;
 8001ca6:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <USART2_IRQHandler+0xcc>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <USART2_IRQHandler+0xd0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <USART2_IRQHandler+0xd4>)
 8001cb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

          packetsNum = (++packetsNum < PACKETSINBUF) ?
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <USART2_IRQHandler+0xcc>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <USART2_IRQHandler+0xcc>)
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <USART2_IRQHandler+0xcc>)
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <USART2_IRQHandler+0xcc>)
 8001cc8:	701a      	strb	r2, [r3, #0]
                        packetsNum : 0;

          dataPointer = (++endPacketPointer < &dataBuffer[BUFSIZE-MAXPACKETSIZE]) ?
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
                         endPacketPointer : dataBuffer;
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001cd2:	6013      	str	r3, [r2, #0]
          dataPointer = (++endPacketPointer < &dataBuffer[BUFSIZE-MAXPACKETSIZE]) ?
 8001cd4:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
                         endPacketPointer : dataBuffer;
 8001cd8:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <USART2_IRQHandler+0xd8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d202      	bcs.n	8001ce4 <USART2_IRQHandler+0x7c>
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	e000      	b.n	8001ce6 <USART2_IRQHandler+0x7e>
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <USART2_IRQHandler+0xdc>)
          dataPointer = (++endPacketPointer < &dataBuffer[BUFSIZE-MAXPACKETSIZE]) ?
 8001ce6:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <USART2_IRQHandler+0xd0>)
 8001ce8:	6013      	str	r3, [r2, #0]

          endPacketPointer = dataPointer;
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <USART2_IRQHandler+0xd0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e00f      	b.n	8001d14 <USART2_IRQHandler+0xac>
        }else{
          endPacketPointer = (++endPacketPointer < &dataBuffer[BUFSIZE]) ?
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
                              endPacketPointer : dataBuffer;
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001cfc:	6013      	str	r3, [r2, #0]
          endPacketPointer = (++endPacketPointer < &dataBuffer[BUFSIZE]) ?
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
                              endPacketPointer : dataBuffer;
 8001d02:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <USART2_IRQHandler+0xe0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d202      	bcs.n	8001d0e <USART2_IRQHandler+0xa6>
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	e000      	b.n	8001d10 <USART2_IRQHandler+0xa8>
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <USART2_IRQHandler+0xdc>)
          endPacketPointer = (++endPacketPointer < &dataBuffer[BUFSIZE]) ?
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001d12:	6013      	str	r3, [r2, #0]
        }

        HAL_UART_Receive_IT(&huart2, endPacketPointer, 1);
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <USART2_IRQHandler+0xc8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4803      	ldr	r0, [pc, #12]	; (8001d2c <USART2_IRQHandler+0xc4>)
 8001d1e:	f001 f9d1 	bl	80030c4 <HAL_UART_Receive_IT>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000aeb0 	.word	0x2000aeb0
 8001d30:	20000004 	.word	0x20000004
 8001d34:	20000254 	.word	0x20000254
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	2000026c 	.word	0x2000026c
 8001d40:	2000ae88 	.word	0x2000ae88
 8001d44:	20001270 	.word	0x20001270
 8001d48:	2000aeb0 	.word	0x2000aeb0

08001d4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
	return 1;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_kill>:

int _kill(int pid, int sig)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d66:	f001 fef5 	bl	8003b54 <__errno>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2216      	movs	r2, #22
 8001d6e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_exit>:

void _exit (int status)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ffe7 	bl	8001d5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d8e:	e7fe      	b.n	8001d8e <_exit+0x12>

08001d90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e00a      	b.n	8001db8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001da2:	f3af 8000 	nop.w
 8001da6:	4601      	mov	r1, r0
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	60ba      	str	r2, [r7, #8]
 8001dae:	b2ca      	uxtb	r2, r1
 8001db0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dbf0      	blt.n	8001da2 <_read+0x12>
	}

return len;
 8001dc0:	687b      	ldr	r3, [r7, #4]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	e009      	b.n	8001df0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	60ba      	str	r2, [r7, #8]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	3301      	adds	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dbf1      	blt.n	8001ddc <_write+0x12>
	}
	return len;
 8001df8:	687b      	ldr	r3, [r7, #4]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_close>:

int _close(int file)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
	return -1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e2a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_isatty>:

int _isatty(int file)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
	return 1;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f001 fe5a 	bl	8003b54 <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20018000 	.word	0x20018000
 8001ecc:	00000400 	.word	0x00000400
 8001ed0:	20000260 	.word	0x20000260
 8001ed4:	2000af10 	.word	0x2000af10

08001ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <SystemInit+0x20>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <SystemInit+0x20>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f00:	480d      	ldr	r0, [pc, #52]	; (8001f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f02:	490e      	ldr	r1, [pc, #56]	; (8001f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f04:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f18:	4c0b      	ldr	r4, [pc, #44]	; (8001f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f26:	f7ff ffd7 	bl	8001ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f001 fe19 	bl	8003b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2e:	f7ff fc17 	bl	8001760 <main>
  bx  lr    
 8001f32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8001f40:	0800858c 	.word	0x0800858c
  ldr r2, =_sbss
 8001f44:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001f48:	2000af0c 	.word	0x2000af0c

08001f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC_IRQHandler>
	...

08001f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <HAL_Init+0x40>)
 8001f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_Init+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <HAL_Init+0x40>)
 8001f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <HAL_Init+0x40>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 f92b 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f000 f808 	bl	8001f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f7ff fd88 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023c00 	.word	0x40023c00

08001f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x54>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_InitTick+0x58>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f943 	bl	800223e <HAL_SYSTICK_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d80a      	bhi.n	8001fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f000 f90b 	bl	80021ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <HAL_InitTick+0x5c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000048 	.word	0x20000048
 8001fec:	20000050 	.word	0x20000050
 8001ff0:	2000004c 	.word	0x2000004c

08001ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x20>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_IncTick+0x24>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000050 	.word	0x20000050
 8002018:	2000aef8 	.word	0x2000aef8

0800201c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	2000aef8 	.word	0x2000aef8

08002034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800205c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002066:	4a04      	ldr	r2, [pc, #16]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	60d3      	str	r3, [r2, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <__NVIC_GetPriorityGrouping+0x18>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0307 	and.w	r3, r3, #7
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db0b      	blt.n	80020c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	4907      	ldr	r1, [pc, #28]	; (80020d0 <__NVIC_EnableIRQ+0x38>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2001      	movs	r0, #1
 80020ba:	fa00 f202 	lsl.w	r2, r0, r2
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	; (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	; (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
         );
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a0:	d301      	bcc.n	80021a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00f      	b.n	80021c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <SysTick_Config+0x40>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ae:	210f      	movs	r1, #15
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f7ff ff8e 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <SysTick_Config+0x40>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <SysTick_Config+0x40>)
 80021c0:	2207      	movs	r2, #7
 80021c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff29 	bl	8002034 <__NVIC_SetPriorityGrouping>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021fc:	f7ff ff3e 	bl	800207c <__NVIC_GetPriorityGrouping>
 8002200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff ff8e 	bl	8002128 <NVIC_EncodePriority>
 800220c:	4602      	mov	r2, r0
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff5d 	bl	80020d4 <__NVIC_SetPriority>
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff31 	bl	8002098 <__NVIC_EnableIRQ>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffa2 	bl	8002190 <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff feda 	bl	800201c <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d008      	beq.n	8002288 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2280      	movs	r2, #128	; 0x80
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e052      	b.n	800232e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0216 	bic.w	r2, r2, #22
 8002296:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <HAL_DMA_Abort+0x62>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0208 	bic.w	r2, r2, #8
 80022c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d8:	e013      	b.n	8002302 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022da:	f7ff fe9f 	bl	800201c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d90c      	bls.n	8002302 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2203      	movs	r2, #3
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e015      	b.n	800232e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e4      	bne.n	80022da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	223f      	movs	r2, #63	; 0x3f
 8002316:	409a      	lsls	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d004      	beq.n	8002354 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e00c      	b.n	800236e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2205      	movs	r2, #5
 8002358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e159      	b.n	800264c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 8148 	bne.w	8002646 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d005      	beq.n	80023ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d130      	bne.n	8002430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 0201 	and.w	r2, r3, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b03      	cmp	r3, #3
 800243a:	d017      	beq.n	800246c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d123      	bne.n	80024c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	08da      	lsrs	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3208      	adds	r2, #8
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80a2 	beq.w	8002646 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b57      	ldr	r3, [pc, #348]	; (8002664 <HAL_GPIO_Init+0x2e8>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a56      	ldr	r2, [pc, #344]	; (8002664 <HAL_GPIO_Init+0x2e8>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b54      	ldr	r3, [pc, #336]	; (8002664 <HAL_GPIO_Init+0x2e8>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251e:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_GPIO_Init+0x2ec>)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a49      	ldr	r2, [pc, #292]	; (800266c <HAL_GPIO_Init+0x2f0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d019      	beq.n	800257e <HAL_GPIO_Init+0x202>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a48      	ldr	r2, [pc, #288]	; (8002670 <HAL_GPIO_Init+0x2f4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_Init+0x1fe>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a47      	ldr	r2, [pc, #284]	; (8002674 <HAL_GPIO_Init+0x2f8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00d      	beq.n	8002576 <HAL_GPIO_Init+0x1fa>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a46      	ldr	r2, [pc, #280]	; (8002678 <HAL_GPIO_Init+0x2fc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x1f6>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a45      	ldr	r2, [pc, #276]	; (800267c <HAL_GPIO_Init+0x300>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_GPIO_Init+0x1f2>
 800256a:	2304      	movs	r3, #4
 800256c:	e008      	b.n	8002580 <HAL_GPIO_Init+0x204>
 800256e:	2307      	movs	r3, #7
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x204>
 8002572:	2303      	movs	r3, #3
 8002574:	e004      	b.n	8002580 <HAL_GPIO_Init+0x204>
 8002576:	2302      	movs	r3, #2
 8002578:	e002      	b.n	8002580 <HAL_GPIO_Init+0x204>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_GPIO_Init+0x204>
 800257e:	2300      	movs	r3, #0
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	f002 0203 	and.w	r2, r2, #3
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	4093      	lsls	r3, r2
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002590:	4935      	ldr	r1, [pc, #212]	; (8002668 <HAL_GPIO_Init+0x2ec>)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	3302      	adds	r3, #2
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800259e:	4b38      	ldr	r3, [pc, #224]	; (8002680 <HAL_GPIO_Init+0x304>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c2:	4a2f      	ldr	r2, [pc, #188]	; (8002680 <HAL_GPIO_Init+0x304>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025c8:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_GPIO_Init+0x304>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ec:	4a24      	ldr	r2, [pc, #144]	; (8002680 <HAL_GPIO_Init+0x304>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f2:	4b23      	ldr	r3, [pc, #140]	; (8002680 <HAL_GPIO_Init+0x304>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002616:	4a1a      	ldr	r2, [pc, #104]	; (8002680 <HAL_GPIO_Init+0x304>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_GPIO_Init+0x304>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <HAL_GPIO_Init+0x304>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3301      	adds	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b0f      	cmp	r3, #15
 8002650:	f67f aea2 	bls.w	8002398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800
 8002668:	40013800 	.word	0x40013800
 800266c:	40020000 	.word	0x40020000
 8002670:	40020400 	.word	0x40020400
 8002674:	40020800 	.word	0x40020800
 8002678:	40020c00 	.word	0x40020c00
 800267c:	40021000 	.word	0x40021000
 8002680:	40013c00 	.word	0x40013c00

08002684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
 8002690:	4613      	mov	r3, r2
 8002692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002694:	787b      	ldrb	r3, [r7, #1]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026a0:	e003      	b.n	80026aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	041a      	lsls	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	619a      	str	r2, [r3, #24]
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e264      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d075      	beq.n	80027c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d6:	4ba3      	ldr	r3, [pc, #652]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d00c      	beq.n	80026fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e2:	4ba0      	ldr	r3, [pc, #640]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d112      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ee:	4b9d      	ldr	r3, [pc, #628]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026fa:	d10b      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	4b99      	ldr	r3, [pc, #612]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d05b      	beq.n	80027c0 <HAL_RCC_OscConfig+0x108>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d157      	bne.n	80027c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e23f      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271c:	d106      	bne.n	800272c <HAL_RCC_OscConfig+0x74>
 800271e:	4b91      	ldr	r3, [pc, #580]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a90      	ldr	r2, [pc, #576]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e01d      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x98>
 8002736:	4b8b      	ldr	r3, [pc, #556]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a8a      	ldr	r2, [pc, #552]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b88      	ldr	r3, [pc, #544]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a87      	ldr	r2, [pc, #540]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 8002750:	4b84      	ldr	r3, [pc, #528]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a83      	ldr	r2, [pc, #524]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b81      	ldr	r3, [pc, #516]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a80      	ldr	r2, [pc, #512]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7ff fc54 	bl	800201c <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002778:	f7ff fc50 	bl	800201c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e204      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b76      	ldr	r3, [pc, #472]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0xc0>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff fc40 	bl	800201c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a0:	f7ff fc3c 	bl	800201c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e1f0      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	4b6c      	ldr	r3, [pc, #432]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0xe8>
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d063      	beq.n	8002896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ce:	4b65      	ldr	r3, [pc, #404]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027da:	4b62      	ldr	r3, [pc, #392]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d11c      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e6:	4b5f      	ldr	r3, [pc, #380]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d116      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	4b5c      	ldr	r3, [pc, #368]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e1c4      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280a:	4b56      	ldr	r3, [pc, #344]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4952      	ldr	r1, [pc, #328]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	e03a      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002828:	4b4f      	ldr	r3, [pc, #316]	; (8002968 <HAL_RCC_OscConfig+0x2b0>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7ff fbf5 	bl	800201c <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002836:	f7ff fbf1 	bl	800201c <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1a5      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b43      	ldr	r3, [pc, #268]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4940      	ldr	r1, [pc, #256]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]
 8002868:	e015      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <HAL_RCC_OscConfig+0x2b0>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7ff fbd4 	bl	800201c <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002878:	f7ff fbd0 	bl	800201c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e184      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	4b36      	ldr	r3, [pc, #216]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d030      	beq.n	8002904 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d016      	beq.n	80028d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028aa:	4b30      	ldr	r3, [pc, #192]	; (800296c <HAL_RCC_OscConfig+0x2b4>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7ff fbb4 	bl	800201c <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b8:	f7ff fbb0 	bl	800201c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e164      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x200>
 80028d6:	e015      	b.n	8002904 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCC_OscConfig+0x2b4>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028de:	f7ff fb9d 	bl	800201c <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e6:	f7ff fb99 	bl	800201c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e14d      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 80028fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80a0 	beq.w	8002a52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10f      	bne.n	8002942 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_OscConfig+0x2b8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d121      	bne.n	8002992 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_RCC_OscConfig+0x2b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a07      	ldr	r2, [pc, #28]	; (8002970 <HAL_RCC_OscConfig+0x2b8>)
 8002954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295a:	f7ff fb5f 	bl	800201c <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	e011      	b.n	8002986 <HAL_RCC_OscConfig+0x2ce>
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	42470000 	.word	0x42470000
 800296c:	42470e80 	.word	0x42470e80
 8002970:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7ff fb52 	bl	800201c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e106      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002986:	4b85      	ldr	r3, [pc, #532]	; (8002b9c <HAL_RCC_OscConfig+0x4e4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d106      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2f0>
 800299a:	4b81      	ldr	r3, [pc, #516]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a80      	ldr	r2, [pc, #512]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70
 80029a6:	e01c      	b.n	80029e2 <HAL_RCC_OscConfig+0x32a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d10c      	bne.n	80029ca <HAL_RCC_OscConfig+0x312>
 80029b0:	4b7b      	ldr	r3, [pc, #492]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	4a7a      	ldr	r2, [pc, #488]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	6713      	str	r3, [r2, #112]	; 0x70
 80029bc:	4b78      	ldr	r3, [pc, #480]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a77      	ldr	r2, [pc, #476]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
 80029c8:	e00b      	b.n	80029e2 <HAL_RCC_OscConfig+0x32a>
 80029ca:	4b75      	ldr	r3, [pc, #468]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a74      	ldr	r2, [pc, #464]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
 80029d6:	4b72      	ldr	r3, [pc, #456]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	4a71      	ldr	r2, [pc, #452]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 80029dc:	f023 0304 	bic.w	r3, r3, #4
 80029e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d015      	beq.n	8002a16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7ff fb17 	bl	800201c <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7ff fb13 	bl	800201c <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e0c5      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ee      	beq.n	80029f2 <HAL_RCC_OscConfig+0x33a>
 8002a14:	e014      	b.n	8002a40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7ff fb01 	bl	800201c <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7ff fafd 	bl	800201c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e0af      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a34:	4b5a      	ldr	r3, [pc, #360]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ee      	bne.n	8002a1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d105      	bne.n	8002a52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a46:	4b56      	ldr	r3, [pc, #344]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a55      	ldr	r2, [pc, #340]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 809b 	beq.w	8002b92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a5c:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d05c      	beq.n	8002b22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d141      	bne.n	8002af4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a70:	4b4c      	ldr	r3, [pc, #304]	; (8002ba4 <HAL_RCC_OscConfig+0x4ec>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7ff fad1 	bl	800201c <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7ff facd 	bl	800201c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e081      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a90:	4b43      	ldr	r3, [pc, #268]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	019b      	lsls	r3, r3, #6
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	041b      	lsls	r3, r3, #16
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	061b      	lsls	r3, r3, #24
 8002ac0:	4937      	ldr	r1, [pc, #220]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac6:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <HAL_RCC_OscConfig+0x4ec>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7ff faa6 	bl	800201c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7ff faa2 	bl	800201c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e056      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	4b2e      	ldr	r3, [pc, #184]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x41c>
 8002af2:	e04e      	b.n	8002b92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_RCC_OscConfig+0x4ec>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afa:	f7ff fa8f 	bl	800201c <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b02:	f7ff fa8b 	bl	800201c <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e03f      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b14:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f0      	bne.n	8002b02 <HAL_RCC_OscConfig+0x44a>
 8002b20:	e037      	b.n	8002b92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e032      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <HAL_RCC_OscConfig+0x4e8>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d028      	beq.n	8002b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d121      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d11a      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b5e:	4013      	ands	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d111      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	3b01      	subs	r3, #1
 8002b78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	42470060 	.word	0x42470060

08002ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0cc      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d90c      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b65      	ldr	r3, [pc, #404]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b8      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bfc:	4b59      	ldr	r3, [pc, #356]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a58      	ldr	r2, [pc, #352]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c14:	4b53      	ldr	r3, [pc, #332]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a52      	ldr	r2, [pc, #328]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	494d      	ldr	r1, [pc, #308]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d044      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d119      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e07f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c66:	4b3f      	ldr	r3, [pc, #252]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e06f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c76:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e067      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c86:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f023 0203 	bic.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4934      	ldr	r1, [pc, #208]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c98:	f7ff f9c0 	bl	800201c <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7ff f9bc 	bl	800201c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e04f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 020c 	and.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d1eb      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d20c      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e032      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4916      	ldr	r1, [pc, #88]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	490e      	ldr	r1, [pc, #56]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d2e:	f000 f821 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	490a      	ldr	r1, [pc, #40]	; (8002d68 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	5ccb      	ldrb	r3, [r1, r3]
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff f920 	bl	8001f94 <HAL_InitTick>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023c00 	.word	0x40023c00
 8002d64:	40023800 	.word	0x40023800
 8002d68:	080080b4 	.word	0x080080b4
 8002d6c:	20000048 	.word	0x20000048
 8002d70:	2000004c 	.word	0x2000004c

08002d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	2300      	movs	r3, #0
 8002d86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8c:	4b67      	ldr	r3, [pc, #412]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d00d      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	f200 80bd 	bhi.w	8002f18 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x34>
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x3a>
 8002da6:	e0b7      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002daa:	60bb      	str	r3, [r7, #8]
       break;
 8002dac:	e0b7      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dae:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002db0:	60bb      	str	r3, [r7, #8]
      break;
 8002db2:	e0b4      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db4:	4b5d      	ldr	r3, [pc, #372]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dbe:	4b5b      	ldr	r3, [pc, #364]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d04d      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b58      	ldr	r3, [pc, #352]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dda:	f04f 0100 	mov.w	r1, #0
 8002dde:	ea02 0800 	and.w	r8, r2, r0
 8002de2:	ea03 0901 	and.w	r9, r3, r1
 8002de6:	4640      	mov	r0, r8
 8002de8:	4649      	mov	r1, r9
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	014b      	lsls	r3, r1, #5
 8002df4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002df8:	0142      	lsls	r2, r0, #5
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	ebb0 0008 	subs.w	r0, r0, r8
 8002e02:	eb61 0109 	sbc.w	r1, r1, r9
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	018b      	lsls	r3, r1, #6
 8002e10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e14:	0182      	lsls	r2, r0, #6
 8002e16:	1a12      	subs	r2, r2, r0
 8002e18:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1c:	f04f 0000 	mov.w	r0, #0
 8002e20:	f04f 0100 	mov.w	r1, #0
 8002e24:	00d9      	lsls	r1, r3, #3
 8002e26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e2a:	00d0      	lsls	r0, r2, #3
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	eb12 0208 	adds.w	r2, r2, r8
 8002e34:	eb43 0309 	adc.w	r3, r3, r9
 8002e38:	f04f 0000 	mov.w	r0, #0
 8002e3c:	f04f 0100 	mov.w	r1, #0
 8002e40:	0259      	lsls	r1, r3, #9
 8002e42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e46:	0250      	lsls	r0, r2, #9
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	461a      	mov	r2, r3
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	f7fd ff1e 	bl	8000c98 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4613      	mov	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	e04a      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e66:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e76:	f04f 0100 	mov.w	r1, #0
 8002e7a:	ea02 0400 	and.w	r4, r2, r0
 8002e7e:	ea03 0501 	and.w	r5, r3, r1
 8002e82:	4620      	mov	r0, r4
 8002e84:	4629      	mov	r1, r5
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	014b      	lsls	r3, r1, #5
 8002e90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e94:	0142      	lsls	r2, r0, #5
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	1b00      	subs	r0, r0, r4
 8002e9c:	eb61 0105 	sbc.w	r1, r1, r5
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	018b      	lsls	r3, r1, #6
 8002eaa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002eae:	0182      	lsls	r2, r0, #6
 8002eb0:	1a12      	subs	r2, r2, r0
 8002eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb6:	f04f 0000 	mov.w	r0, #0
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	00d9      	lsls	r1, r3, #3
 8002ec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ec4:	00d0      	lsls	r0, r2, #3
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	1912      	adds	r2, r2, r4
 8002ecc:	eb45 0303 	adc.w	r3, r5, r3
 8002ed0:	f04f 0000 	mov.w	r0, #0
 8002ed4:	f04f 0100 	mov.w	r1, #0
 8002ed8:	0299      	lsls	r1, r3, #10
 8002eda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ede:	0290      	lsls	r0, r2, #10
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	f7fd fed2 	bl	8000c98 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4613      	mov	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	3301      	adds	r3, #1
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f14:	60bb      	str	r3, [r7, #8]
      break;
 8002f16:	e002      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f1a:	60bb      	str	r3, [r7, #8]
      break;
 8002f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	00f42400 	.word	0x00f42400
 8002f34:	007a1200 	.word	0x007a1200

08002f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000048 	.word	0x20000048

08002f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f54:	f7ff fff0 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	0a9b      	lsrs	r3, r3, #10
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4903      	ldr	r1, [pc, #12]	; (8002f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40023800 	.word	0x40023800
 8002f74:	080080c4 	.word	0x080080c4

08002f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f7c:	f7ff ffdc 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	0b5b      	lsrs	r3, r3, #13
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4903      	ldr	r1, [pc, #12]	; (8002f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	080080c4 	.word	0x080080c4

08002fa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e03f      	b.n	8003032 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fe fd8e 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2224      	movs	r2, #36	; 0x24
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fbed 	bl	80037c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ff8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003008:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003018:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	4613      	mov	r3, r2
 8003046:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b20      	cmp	r3, #32
 8003052:	d130      	bne.n	80030b6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_UART_Transmit_IT+0x26>
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e029      	b.n	80030b8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_UART_Transmit_IT+0x38>
 800306e:	2302      	movs	r3, #2
 8003070:	e022      	b.n	80030b8 <HAL_UART_Transmit_IT+0x7e>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	88fa      	ldrh	r2, [r7, #6]
 8003084:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	88fa      	ldrh	r2, [r7, #6]
 800308a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2221      	movs	r2, #33	; 0x21
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d11d      	bne.n	800311a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_UART_Receive_IT+0x26>
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e016      	b.n	800311c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_UART_Receive_IT+0x38>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e00f      	b.n	800311c <HAL_UART_Receive_IT+0x58>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	461a      	mov	r2, r3
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f9dd 	bl	80034d0 <UART_Start_Receive_IT>
 8003116:	4603      	mov	r3, r0
 8003118:	e000      	b.n	800311c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800311a:	2302      	movs	r3, #2
  }
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_UART_IRQHandler+0x52>
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa91 	bl	8003696 <UART_Receive_IT>
      return;
 8003174:	e17c      	b.n	8003470 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80b1 	beq.w	80032e0 <HAL_UART_IRQHandler+0x1bc>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <HAL_UART_IRQHandler+0x70>
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80a6 	beq.w	80032e0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_UART_IRQHandler+0x90>
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f043 0201 	orr.w	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_UART_IRQHandler+0xb0>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f043 0202 	orr.w	r2, r3, #2
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_UART_IRQHandler+0xd0>
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	f043 0204 	orr.w	r2, r3, #4
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00f      	beq.n	800321e <HAL_UART_IRQHandler+0xfa>
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d104      	bne.n	8003212 <HAL_UART_IRQHandler+0xee>
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f043 0208 	orr.w	r2, r3, #8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 811f 	beq.w	8003466 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_UART_IRQHandler+0x11e>
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fa2a 	bl	8003696 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	bf0c      	ite	eq
 8003250:	2301      	moveq	r3, #1
 8003252:	2300      	movne	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <HAL_UART_IRQHandler+0x146>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d031      	beq.n	80032ce <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f96a 	bl	8003544 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b40      	cmp	r3, #64	; 0x40
 800327c:	d123      	bne.n	80032c6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	2b00      	cmp	r3, #0
 8003294:	d013      	beq.n	80032be <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	4a77      	ldr	r2, [pc, #476]	; (8003478 <HAL_UART_IRQHandler+0x354>)
 800329c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff f847 	bl	8002336 <HAL_DMA_Abort_IT>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d016      	beq.n	80032dc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032b8:	4610      	mov	r0, r2
 80032ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032bc:	e00e      	b.n	80032dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8f0 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c4:	e00a      	b.n	80032dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f8ec 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	e006      	b.n	80032dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f8e8 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032da:	e0c4      	b.n	8003466 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	bf00      	nop
    return;
 80032de:	e0c2      	b.n	8003466 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	f040 80a2 	bne.w	800342e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 809c 	beq.w	800342e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8096 	beq.w	800342e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	d14f      	bne.n	80033c6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003330:	8a3b      	ldrh	r3, [r7, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8099 	beq.w	800346a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800333c:	8a3a      	ldrh	r2, [r7, #16]
 800333e:	429a      	cmp	r2, r3
 8003340:	f080 8093 	bcs.w	800346a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8a3a      	ldrh	r2, [r7, #16]
 8003348:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003354:	d02b      	beq.n	80033ae <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003364:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003384:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0210 	bic.w	r2, r2, #16
 80033a2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe ff54 	bl	8002256 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f87a 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033c4:	e051      	b.n	800346a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d047      	beq.n	800346e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80033de:	8a7b      	ldrh	r3, [r7, #18]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d044      	beq.n	800346e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033f2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0210 	bic.w	r2, r2, #16
 8003420:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003422:	8a7b      	ldrh	r3, [r7, #18]
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f846 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800342c:	e01f      	b.n	800346e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_UART_IRQHandler+0x326>
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f8bf 	bl	80035c6 <UART_Transmit_IT>
    return;
 8003448:	e012      	b.n	8003470 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00d      	beq.n	8003470 <HAL_UART_IRQHandler+0x34c>
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f901 	bl	8003666 <UART_EndTransmit_IT>
    return;
 8003464:	e004      	b.n	8003470 <HAL_UART_IRQHandler+0x34c>
    return;
 8003466:	bf00      	nop
 8003468:	e002      	b.n	8003470 <HAL_UART_IRQHandler+0x34c>
      return;
 800346a:	bf00      	nop
 800346c:	e000      	b.n	8003470 <HAL_UART_IRQHandler+0x34c>
      return;
 800346e:	bf00      	nop
  }
}
 8003470:	3728      	adds	r7, #40	; 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	0800359f 	.word	0x0800359f

0800347c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	4613      	mov	r3, r2
 80034dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2222      	movs	r2, #34	; 0x22
 80034fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003514:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0201 	orr.w	r2, r2, #1
 8003524:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0220 	orr.w	r2, r2, #32
 8003534:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800355a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	2b01      	cmp	r3, #1
 8003572:	d107      	bne.n	8003584 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0210 	bic.w	r2, r2, #16
 8003582:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7ff ff73 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b21      	cmp	r3, #33	; 0x21
 80035d8:	d13e      	bne.n	8003658 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e2:	d114      	bne.n	800360e <UART_Transmit_IT+0x48>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d110      	bne.n	800360e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003600:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	1c9a      	adds	r2, r3, #2
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	621a      	str	r2, [r3, #32]
 800360c:	e008      	b.n	8003620 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	1c59      	adds	r1, r3, #1
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6211      	str	r1, [r2, #32]
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29b      	uxth	r3, r3
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4619      	mov	r1, r3
 800362e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10f      	bne.n	8003654 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003642:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003652:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003658:	2302      	movs	r3, #2
  }
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800367c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fef8 	bl	800347c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b22      	cmp	r3, #34	; 0x22
 80036a8:	f040 8087 	bne.w	80037ba <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b4:	d117      	bne.n	80036e6 <UART_Receive_IT+0x50>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d113      	bne.n	80036e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	1c9a      	adds	r2, r3, #2
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
 80036e4:	e026      	b.n	8003734 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f8:	d007      	beq.n	800370a <UART_Receive_IT+0x74>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <UART_Receive_IT+0x82>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e008      	b.n	800372a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003724:	b2da      	uxtb	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29b      	uxth	r3, r3
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4619      	mov	r1, r3
 8003742:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003744:	2b00      	cmp	r3, #0
 8003746:	d136      	bne.n	80037b6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0220 	bic.w	r2, r2, #32
 8003756:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003766:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	2b01      	cmp	r3, #1
 8003786:	d10e      	bne.n	80037a6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0210 	bic.w	r2, r2, #16
 8003796:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff fe8a 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
 80037a4:	e002      	b.n	80037ac <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff fe72 	bl	8003490 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e002      	b.n	80037bc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
  }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	b09f      	sub	sp, #124	; 0x7c
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037da:	68d9      	ldr	r1, [r3, #12]
 80037dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	ea40 0301 	orr.w	r3, r0, r1
 80037e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80037fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003808:	f021 010c 	bic.w	r1, r1, #12
 800380c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003812:	430b      	orrs	r3, r1
 8003814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003822:	6999      	ldr	r1, [r3, #24]
 8003824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	ea40 0301 	orr.w	r3, r0, r1
 800382c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800382e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4bc5      	ldr	r3, [pc, #788]	; (8003b48 <UART_SetConfig+0x384>)
 8003834:	429a      	cmp	r2, r3
 8003836:	d004      	beq.n	8003842 <UART_SetConfig+0x7e>
 8003838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4bc3      	ldr	r3, [pc, #780]	; (8003b4c <UART_SetConfig+0x388>)
 800383e:	429a      	cmp	r2, r3
 8003840:	d103      	bne.n	800384a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003842:	f7ff fb99 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 8003846:	6778      	str	r0, [r7, #116]	; 0x74
 8003848:	e002      	b.n	8003850 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800384a:	f7ff fb81 	bl	8002f50 <HAL_RCC_GetPCLK1Freq>
 800384e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003858:	f040 80b6 	bne.w	80039c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800385c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800385e:	461c      	mov	r4, r3
 8003860:	f04f 0500 	mov.w	r5, #0
 8003864:	4622      	mov	r2, r4
 8003866:	462b      	mov	r3, r5
 8003868:	1891      	adds	r1, r2, r2
 800386a:	6439      	str	r1, [r7, #64]	; 0x40
 800386c:	415b      	adcs	r3, r3
 800386e:	647b      	str	r3, [r7, #68]	; 0x44
 8003870:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003874:	1912      	adds	r2, r2, r4
 8003876:	eb45 0303 	adc.w	r3, r5, r3
 800387a:	f04f 0000 	mov.w	r0, #0
 800387e:	f04f 0100 	mov.w	r1, #0
 8003882:	00d9      	lsls	r1, r3, #3
 8003884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003888:	00d0      	lsls	r0, r2, #3
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	1911      	adds	r1, r2, r4
 8003890:	6639      	str	r1, [r7, #96]	; 0x60
 8003892:	416b      	adcs	r3, r5
 8003894:	667b      	str	r3, [r7, #100]	; 0x64
 8003896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	461a      	mov	r2, r3
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	1891      	adds	r1, r2, r2
 80038a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80038a4:	415b      	adcs	r3, r3
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80038b0:	f7fd f9f2 	bl	8000c98 <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4ba5      	ldr	r3, [pc, #660]	; (8003b50 <UART_SetConfig+0x38c>)
 80038ba:	fba3 2302 	umull	r2, r3, r3, r2
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	011e      	lsls	r6, r3, #4
 80038c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038c4:	461c      	mov	r4, r3
 80038c6:	f04f 0500 	mov.w	r5, #0
 80038ca:	4622      	mov	r2, r4
 80038cc:	462b      	mov	r3, r5
 80038ce:	1891      	adds	r1, r2, r2
 80038d0:	6339      	str	r1, [r7, #48]	; 0x30
 80038d2:	415b      	adcs	r3, r3
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
 80038d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038da:	1912      	adds	r2, r2, r4
 80038dc:	eb45 0303 	adc.w	r3, r5, r3
 80038e0:	f04f 0000 	mov.w	r0, #0
 80038e4:	f04f 0100 	mov.w	r1, #0
 80038e8:	00d9      	lsls	r1, r3, #3
 80038ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038ee:	00d0      	lsls	r0, r2, #3
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	1911      	adds	r1, r2, r4
 80038f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80038f8:	416b      	adcs	r3, r5
 80038fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	461a      	mov	r2, r3
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	1891      	adds	r1, r2, r2
 8003908:	62b9      	str	r1, [r7, #40]	; 0x28
 800390a:	415b      	adcs	r3, r3
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800390e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003912:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003916:	f7fd f9bf 	bl	8000c98 <__aeabi_uldivmod>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4b8c      	ldr	r3, [pc, #560]	; (8003b50 <UART_SetConfig+0x38c>)
 8003920:	fba3 1302 	umull	r1, r3, r3, r2
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	2164      	movs	r1, #100	; 0x64
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	3332      	adds	r3, #50	; 0x32
 8003932:	4a87      	ldr	r2, [pc, #540]	; (8003b50 <UART_SetConfig+0x38c>)
 8003934:	fba2 2303 	umull	r2, r3, r2, r3
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003940:	441e      	add	r6, r3
 8003942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003944:	4618      	mov	r0, r3
 8003946:	f04f 0100 	mov.w	r1, #0
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	1894      	adds	r4, r2, r2
 8003950:	623c      	str	r4, [r7, #32]
 8003952:	415b      	adcs	r3, r3
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800395a:	1812      	adds	r2, r2, r0
 800395c:	eb41 0303 	adc.w	r3, r1, r3
 8003960:	f04f 0400 	mov.w	r4, #0
 8003964:	f04f 0500 	mov.w	r5, #0
 8003968:	00dd      	lsls	r5, r3, #3
 800396a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800396e:	00d4      	lsls	r4, r2, #3
 8003970:	4622      	mov	r2, r4
 8003972:	462b      	mov	r3, r5
 8003974:	1814      	adds	r4, r2, r0
 8003976:	653c      	str	r4, [r7, #80]	; 0x50
 8003978:	414b      	adcs	r3, r1
 800397a:	657b      	str	r3, [r7, #84]	; 0x54
 800397c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	461a      	mov	r2, r3
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	1891      	adds	r1, r2, r2
 8003988:	61b9      	str	r1, [r7, #24]
 800398a:	415b      	adcs	r3, r3
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003992:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003996:	f7fd f97f 	bl	8000c98 <__aeabi_uldivmod>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4b6c      	ldr	r3, [pc, #432]	; (8003b50 <UART_SetConfig+0x38c>)
 80039a0:	fba3 1302 	umull	r1, r3, r3, r2
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	2164      	movs	r1, #100	; 0x64
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	3332      	adds	r3, #50	; 0x32
 80039b2:	4a67      	ldr	r2, [pc, #412]	; (8003b50 <UART_SetConfig+0x38c>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	f003 0207 	and.w	r2, r3, #7
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4432      	add	r2, r6
 80039c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039c6:	e0b9      	b.n	8003b3c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ca:	461c      	mov	r4, r3
 80039cc:	f04f 0500 	mov.w	r5, #0
 80039d0:	4622      	mov	r2, r4
 80039d2:	462b      	mov	r3, r5
 80039d4:	1891      	adds	r1, r2, r2
 80039d6:	6139      	str	r1, [r7, #16]
 80039d8:	415b      	adcs	r3, r3
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039e0:	1912      	adds	r2, r2, r4
 80039e2:	eb45 0303 	adc.w	r3, r5, r3
 80039e6:	f04f 0000 	mov.w	r0, #0
 80039ea:	f04f 0100 	mov.w	r1, #0
 80039ee:	00d9      	lsls	r1, r3, #3
 80039f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039f4:	00d0      	lsls	r0, r2, #3
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	eb12 0804 	adds.w	r8, r2, r4
 80039fe:	eb43 0905 	adc.w	r9, r3, r5
 8003a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	008b      	lsls	r3, r1, #2
 8003a16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a1a:	0082      	lsls	r2, r0, #2
 8003a1c:	4640      	mov	r0, r8
 8003a1e:	4649      	mov	r1, r9
 8003a20:	f7fd f93a 	bl	8000c98 <__aeabi_uldivmod>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4b49      	ldr	r3, [pc, #292]	; (8003b50 <UART_SetConfig+0x38c>)
 8003a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	011e      	lsls	r6, r3, #4
 8003a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a34:	4618      	mov	r0, r3
 8003a36:	f04f 0100 	mov.w	r1, #0
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	1894      	adds	r4, r2, r2
 8003a40:	60bc      	str	r4, [r7, #8]
 8003a42:	415b      	adcs	r3, r3
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a4a:	1812      	adds	r2, r2, r0
 8003a4c:	eb41 0303 	adc.w	r3, r1, r3
 8003a50:	f04f 0400 	mov.w	r4, #0
 8003a54:	f04f 0500 	mov.w	r5, #0
 8003a58:	00dd      	lsls	r5, r3, #3
 8003a5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a5e:	00d4      	lsls	r4, r2, #3
 8003a60:	4622      	mov	r2, r4
 8003a62:	462b      	mov	r3, r5
 8003a64:	1814      	adds	r4, r2, r0
 8003a66:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a68:	414b      	adcs	r3, r1
 8003a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f04f 0100 	mov.w	r1, #0
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	008b      	lsls	r3, r1, #2
 8003a80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a84:	0082      	lsls	r2, r0, #2
 8003a86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a8a:	f7fd f905 	bl	8000c98 <__aeabi_uldivmod>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4b2f      	ldr	r3, [pc, #188]	; (8003b50 <UART_SetConfig+0x38c>)
 8003a94:	fba3 1302 	umull	r1, r3, r3, r2
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	2164      	movs	r1, #100	; 0x64
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	3332      	adds	r3, #50	; 0x32
 8003aa6:	4a2a      	ldr	r2, [pc, #168]	; (8003b50 <UART_SetConfig+0x38c>)
 8003aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab2:	441e      	add	r6, r3
 8003ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f04f 0100 	mov.w	r1, #0
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	1894      	adds	r4, r2, r2
 8003ac2:	603c      	str	r4, [r7, #0]
 8003ac4:	415b      	adcs	r3, r3
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003acc:	1812      	adds	r2, r2, r0
 8003ace:	eb41 0303 	adc.w	r3, r1, r3
 8003ad2:	f04f 0400 	mov.w	r4, #0
 8003ad6:	f04f 0500 	mov.w	r5, #0
 8003ada:	00dd      	lsls	r5, r3, #3
 8003adc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ae0:	00d4      	lsls	r4, r2, #3
 8003ae2:	4622      	mov	r2, r4
 8003ae4:	462b      	mov	r3, r5
 8003ae6:	eb12 0a00 	adds.w	sl, r2, r0
 8003aea:	eb43 0b01 	adc.w	fp, r3, r1
 8003aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f04f 0100 	mov.w	r1, #0
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	008b      	lsls	r3, r1, #2
 8003b02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b06:	0082      	lsls	r2, r0, #2
 8003b08:	4650      	mov	r0, sl
 8003b0a:	4659      	mov	r1, fp
 8003b0c:	f7fd f8c4 	bl	8000c98 <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <UART_SetConfig+0x38c>)
 8003b16:	fba3 1302 	umull	r1, r3, r3, r2
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2164      	movs	r1, #100	; 0x64
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	3332      	adds	r3, #50	; 0x32
 8003b28:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <UART_SetConfig+0x38c>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	f003 020f 	and.w	r2, r3, #15
 8003b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4432      	add	r2, r6
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	377c      	adds	r7, #124	; 0x7c
 8003b40:	46bd      	mov	sp, r7
 8003b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b46:	bf00      	nop
 8003b48:	40011000 	.word	0x40011000
 8003b4c:	40011400 	.word	0x40011400
 8003b50:	51eb851f 	.word	0x51eb851f

08003b54 <__errno>:
 8003b54:	4b01      	ldr	r3, [pc, #4]	; (8003b5c <__errno+0x8>)
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000054 	.word	0x20000054

08003b60 <__libc_init_array>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4d0d      	ldr	r5, [pc, #52]	; (8003b98 <__libc_init_array+0x38>)
 8003b64:	4c0d      	ldr	r4, [pc, #52]	; (8003b9c <__libc_init_array+0x3c>)
 8003b66:	1b64      	subs	r4, r4, r5
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	42a6      	cmp	r6, r4
 8003b6e:	d109      	bne.n	8003b84 <__libc_init_array+0x24>
 8003b70:	4d0b      	ldr	r5, [pc, #44]	; (8003ba0 <__libc_init_array+0x40>)
 8003b72:	4c0c      	ldr	r4, [pc, #48]	; (8003ba4 <__libc_init_array+0x44>)
 8003b74:	f004 fa50 	bl	8008018 <_init>
 8003b78:	1b64      	subs	r4, r4, r5
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	2600      	movs	r6, #0
 8003b7e:	42a6      	cmp	r6, r4
 8003b80:	d105      	bne.n	8003b8e <__libc_init_array+0x2e>
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b88:	4798      	blx	r3
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7ee      	b.n	8003b6c <__libc_init_array+0xc>
 8003b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b92:	4798      	blx	r3
 8003b94:	3601      	adds	r6, #1
 8003b96:	e7f2      	b.n	8003b7e <__libc_init_array+0x1e>
 8003b98:	08008584 	.word	0x08008584
 8003b9c:	08008584 	.word	0x08008584
 8003ba0:	08008584 	.word	0x08008584
 8003ba4:	08008588 	.word	0x08008588

08003ba8 <memset>:
 8003ba8:	4402      	add	r2, r0
 8003baa:	4603      	mov	r3, r0
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d100      	bne.n	8003bb2 <memset+0xa>
 8003bb0:	4770      	bx	lr
 8003bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb6:	e7f9      	b.n	8003bac <memset+0x4>

08003bb8 <__cvt>:
 8003bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbc:	ec55 4b10 	vmov	r4, r5, d0
 8003bc0:	2d00      	cmp	r5, #0
 8003bc2:	460e      	mov	r6, r1
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	462b      	mov	r3, r5
 8003bc8:	bfbb      	ittet	lt
 8003bca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003bce:	461d      	movlt	r5, r3
 8003bd0:	2300      	movge	r3, #0
 8003bd2:	232d      	movlt	r3, #45	; 0x2d
 8003bd4:	700b      	strb	r3, [r1, #0]
 8003bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003bdc:	4691      	mov	r9, r2
 8003bde:	f023 0820 	bic.w	r8, r3, #32
 8003be2:	bfbc      	itt	lt
 8003be4:	4622      	movlt	r2, r4
 8003be6:	4614      	movlt	r4, r2
 8003be8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003bec:	d005      	beq.n	8003bfa <__cvt+0x42>
 8003bee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003bf2:	d100      	bne.n	8003bf6 <__cvt+0x3e>
 8003bf4:	3601      	adds	r6, #1
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	e000      	b.n	8003bfc <__cvt+0x44>
 8003bfa:	2103      	movs	r1, #3
 8003bfc:	ab03      	add	r3, sp, #12
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	ab02      	add	r3, sp, #8
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	ec45 4b10 	vmov	d0, r4, r5
 8003c08:	4653      	mov	r3, sl
 8003c0a:	4632      	mov	r2, r6
 8003c0c:	f001 fbcc 	bl	80053a8 <_dtoa_r>
 8003c10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003c14:	4607      	mov	r7, r0
 8003c16:	d102      	bne.n	8003c1e <__cvt+0x66>
 8003c18:	f019 0f01 	tst.w	r9, #1
 8003c1c:	d022      	beq.n	8003c64 <__cvt+0xac>
 8003c1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003c22:	eb07 0906 	add.w	r9, r7, r6
 8003c26:	d110      	bne.n	8003c4a <__cvt+0x92>
 8003c28:	783b      	ldrb	r3, [r7, #0]
 8003c2a:	2b30      	cmp	r3, #48	; 0x30
 8003c2c:	d10a      	bne.n	8003c44 <__cvt+0x8c>
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2300      	movs	r3, #0
 8003c32:	4620      	mov	r0, r4
 8003c34:	4629      	mov	r1, r5
 8003c36:	f7fc ff4f 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c3a:	b918      	cbnz	r0, 8003c44 <__cvt+0x8c>
 8003c3c:	f1c6 0601 	rsb	r6, r6, #1
 8003c40:	f8ca 6000 	str.w	r6, [sl]
 8003c44:	f8da 3000 	ldr.w	r3, [sl]
 8003c48:	4499      	add	r9, r3
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	4620      	mov	r0, r4
 8003c50:	4629      	mov	r1, r5
 8003c52:	f7fc ff41 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c56:	b108      	cbz	r0, 8003c5c <__cvt+0xa4>
 8003c58:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c5c:	2230      	movs	r2, #48	; 0x30
 8003c5e:	9b03      	ldr	r3, [sp, #12]
 8003c60:	454b      	cmp	r3, r9
 8003c62:	d307      	bcc.n	8003c74 <__cvt+0xbc>
 8003c64:	9b03      	ldr	r3, [sp, #12]
 8003c66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c68:	1bdb      	subs	r3, r3, r7
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	b004      	add	sp, #16
 8003c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c74:	1c59      	adds	r1, r3, #1
 8003c76:	9103      	str	r1, [sp, #12]
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	e7f0      	b.n	8003c5e <__cvt+0xa6>

08003c7c <__exponent>:
 8003c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2900      	cmp	r1, #0
 8003c82:	bfb8      	it	lt
 8003c84:	4249      	neglt	r1, r1
 8003c86:	f803 2b02 	strb.w	r2, [r3], #2
 8003c8a:	bfb4      	ite	lt
 8003c8c:	222d      	movlt	r2, #45	; 0x2d
 8003c8e:	222b      	movge	r2, #43	; 0x2b
 8003c90:	2909      	cmp	r1, #9
 8003c92:	7042      	strb	r2, [r0, #1]
 8003c94:	dd2a      	ble.n	8003cec <__exponent+0x70>
 8003c96:	f10d 0407 	add.w	r4, sp, #7
 8003c9a:	46a4      	mov	ip, r4
 8003c9c:	270a      	movs	r7, #10
 8003c9e:	46a6      	mov	lr, r4
 8003ca0:	460a      	mov	r2, r1
 8003ca2:	fb91 f6f7 	sdiv	r6, r1, r7
 8003ca6:	fb07 1516 	mls	r5, r7, r6, r1
 8003caa:	3530      	adds	r5, #48	; 0x30
 8003cac:	2a63      	cmp	r2, #99	; 0x63
 8003cae:	f104 34ff 	add.w	r4, r4, #4294967295
 8003cb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	dcf1      	bgt.n	8003c9e <__exponent+0x22>
 8003cba:	3130      	adds	r1, #48	; 0x30
 8003cbc:	f1ae 0502 	sub.w	r5, lr, #2
 8003cc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003cc4:	1c44      	adds	r4, r0, #1
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	4561      	cmp	r1, ip
 8003cca:	d30a      	bcc.n	8003ce2 <__exponent+0x66>
 8003ccc:	f10d 0209 	add.w	r2, sp, #9
 8003cd0:	eba2 020e 	sub.w	r2, r2, lr
 8003cd4:	4565      	cmp	r5, ip
 8003cd6:	bf88      	it	hi
 8003cd8:	2200      	movhi	r2, #0
 8003cda:	4413      	add	r3, r2
 8003cdc:	1a18      	subs	r0, r3, r0
 8003cde:	b003      	add	sp, #12
 8003ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ce6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003cea:	e7ed      	b.n	8003cc8 <__exponent+0x4c>
 8003cec:	2330      	movs	r3, #48	; 0x30
 8003cee:	3130      	adds	r1, #48	; 0x30
 8003cf0:	7083      	strb	r3, [r0, #2]
 8003cf2:	70c1      	strb	r1, [r0, #3]
 8003cf4:	1d03      	adds	r3, r0, #4
 8003cf6:	e7f1      	b.n	8003cdc <__exponent+0x60>

08003cf8 <_printf_float>:
 8003cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfc:	ed2d 8b02 	vpush	{d8}
 8003d00:	b08d      	sub	sp, #52	; 0x34
 8003d02:	460c      	mov	r4, r1
 8003d04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003d08:	4616      	mov	r6, r2
 8003d0a:	461f      	mov	r7, r3
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	f002 fca7 	bl	8006660 <_localeconv_r>
 8003d12:	f8d0 a000 	ldr.w	sl, [r0]
 8003d16:	4650      	mov	r0, sl
 8003d18:	f7fc fa62 	bl	80001e0 <strlen>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	9305      	str	r3, [sp, #20]
 8003d24:	f8d8 3000 	ldr.w	r3, [r8]
 8003d28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003d2c:	3307      	adds	r3, #7
 8003d2e:	f023 0307 	bic.w	r3, r3, #7
 8003d32:	f103 0208 	add.w	r2, r3, #8
 8003d36:	f8c8 2000 	str.w	r2, [r8]
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003d42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003d46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003d4a:	9307      	str	r3, [sp, #28]
 8003d4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003d50:	ee08 0a10 	vmov	s16, r0
 8003d54:	4b9f      	ldr	r3, [pc, #636]	; (8003fd4 <_printf_float+0x2dc>)
 8003d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5e:	f7fc feed 	bl	8000b3c <__aeabi_dcmpun>
 8003d62:	bb88      	cbnz	r0, 8003dc8 <_printf_float+0xd0>
 8003d64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d68:	4b9a      	ldr	r3, [pc, #616]	; (8003fd4 <_printf_float+0x2dc>)
 8003d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6e:	f7fc fec7 	bl	8000b00 <__aeabi_dcmple>
 8003d72:	bb48      	cbnz	r0, 8003dc8 <_printf_float+0xd0>
 8003d74:	2200      	movs	r2, #0
 8003d76:	2300      	movs	r3, #0
 8003d78:	4640      	mov	r0, r8
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	f7fc feb6 	bl	8000aec <__aeabi_dcmplt>
 8003d80:	b110      	cbz	r0, 8003d88 <_printf_float+0x90>
 8003d82:	232d      	movs	r3, #45	; 0x2d
 8003d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d88:	4b93      	ldr	r3, [pc, #588]	; (8003fd8 <_printf_float+0x2e0>)
 8003d8a:	4894      	ldr	r0, [pc, #592]	; (8003fdc <_printf_float+0x2e4>)
 8003d8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003d90:	bf94      	ite	ls
 8003d92:	4698      	movls	r8, r3
 8003d94:	4680      	movhi	r8, r0
 8003d96:	2303      	movs	r3, #3
 8003d98:	6123      	str	r3, [r4, #16]
 8003d9a:	9b05      	ldr	r3, [sp, #20]
 8003d9c:	f023 0204 	bic.w	r2, r3, #4
 8003da0:	6022      	str	r2, [r4, #0]
 8003da2:	f04f 0900 	mov.w	r9, #0
 8003da6:	9700      	str	r7, [sp, #0]
 8003da8:	4633      	mov	r3, r6
 8003daa:	aa0b      	add	r2, sp, #44	; 0x2c
 8003dac:	4621      	mov	r1, r4
 8003dae:	4628      	mov	r0, r5
 8003db0:	f000 f9d8 	bl	8004164 <_printf_common>
 8003db4:	3001      	adds	r0, #1
 8003db6:	f040 8090 	bne.w	8003eda <_printf_float+0x1e2>
 8003dba:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbe:	b00d      	add	sp, #52	; 0x34
 8003dc0:	ecbd 8b02 	vpop	{d8}
 8003dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc8:	4642      	mov	r2, r8
 8003dca:	464b      	mov	r3, r9
 8003dcc:	4640      	mov	r0, r8
 8003dce:	4649      	mov	r1, r9
 8003dd0:	f7fc feb4 	bl	8000b3c <__aeabi_dcmpun>
 8003dd4:	b140      	cbz	r0, 8003de8 <_printf_float+0xf0>
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bfbc      	itt	lt
 8003ddc:	232d      	movlt	r3, #45	; 0x2d
 8003dde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003de2:	487f      	ldr	r0, [pc, #508]	; (8003fe0 <_printf_float+0x2e8>)
 8003de4:	4b7f      	ldr	r3, [pc, #508]	; (8003fe4 <_printf_float+0x2ec>)
 8003de6:	e7d1      	b.n	8003d8c <_printf_float+0x94>
 8003de8:	6863      	ldr	r3, [r4, #4]
 8003dea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003dee:	9206      	str	r2, [sp, #24]
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	d13f      	bne.n	8003e74 <_printf_float+0x17c>
 8003df4:	2306      	movs	r3, #6
 8003df6:	6063      	str	r3, [r4, #4]
 8003df8:	9b05      	ldr	r3, [sp, #20]
 8003dfa:	6861      	ldr	r1, [r4, #4]
 8003dfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003e00:	2300      	movs	r3, #0
 8003e02:	9303      	str	r3, [sp, #12]
 8003e04:	ab0a      	add	r3, sp, #40	; 0x28
 8003e06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003e0a:	ab09      	add	r3, sp, #36	; 0x24
 8003e0c:	ec49 8b10 	vmov	d0, r8, r9
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	6022      	str	r2, [r4, #0]
 8003e14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f7ff fecd 	bl	8003bb8 <__cvt>
 8003e1e:	9b06      	ldr	r3, [sp, #24]
 8003e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e22:	2b47      	cmp	r3, #71	; 0x47
 8003e24:	4680      	mov	r8, r0
 8003e26:	d108      	bne.n	8003e3a <_printf_float+0x142>
 8003e28:	1cc8      	adds	r0, r1, #3
 8003e2a:	db02      	blt.n	8003e32 <_printf_float+0x13a>
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	4299      	cmp	r1, r3
 8003e30:	dd41      	ble.n	8003eb6 <_printf_float+0x1be>
 8003e32:	f1ab 0b02 	sub.w	fp, fp, #2
 8003e36:	fa5f fb8b 	uxtb.w	fp, fp
 8003e3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e3e:	d820      	bhi.n	8003e82 <_printf_float+0x18a>
 8003e40:	3901      	subs	r1, #1
 8003e42:	465a      	mov	r2, fp
 8003e44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003e48:	9109      	str	r1, [sp, #36]	; 0x24
 8003e4a:	f7ff ff17 	bl	8003c7c <__exponent>
 8003e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e50:	1813      	adds	r3, r2, r0
 8003e52:	2a01      	cmp	r2, #1
 8003e54:	4681      	mov	r9, r0
 8003e56:	6123      	str	r3, [r4, #16]
 8003e58:	dc02      	bgt.n	8003e60 <_printf_float+0x168>
 8003e5a:	6822      	ldr	r2, [r4, #0]
 8003e5c:	07d2      	lsls	r2, r2, #31
 8003e5e:	d501      	bpl.n	8003e64 <_printf_float+0x16c>
 8003e60:	3301      	adds	r3, #1
 8003e62:	6123      	str	r3, [r4, #16]
 8003e64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d09c      	beq.n	8003da6 <_printf_float+0xae>
 8003e6c:	232d      	movs	r3, #45	; 0x2d
 8003e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e72:	e798      	b.n	8003da6 <_printf_float+0xae>
 8003e74:	9a06      	ldr	r2, [sp, #24]
 8003e76:	2a47      	cmp	r2, #71	; 0x47
 8003e78:	d1be      	bne.n	8003df8 <_printf_float+0x100>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1bc      	bne.n	8003df8 <_printf_float+0x100>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e7b9      	b.n	8003df6 <_printf_float+0xfe>
 8003e82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003e86:	d118      	bne.n	8003eba <_printf_float+0x1c2>
 8003e88:	2900      	cmp	r1, #0
 8003e8a:	6863      	ldr	r3, [r4, #4]
 8003e8c:	dd0b      	ble.n	8003ea6 <_printf_float+0x1ae>
 8003e8e:	6121      	str	r1, [r4, #16]
 8003e90:	b913      	cbnz	r3, 8003e98 <_printf_float+0x1a0>
 8003e92:	6822      	ldr	r2, [r4, #0]
 8003e94:	07d0      	lsls	r0, r2, #31
 8003e96:	d502      	bpl.n	8003e9e <_printf_float+0x1a6>
 8003e98:	3301      	adds	r3, #1
 8003e9a:	440b      	add	r3, r1
 8003e9c:	6123      	str	r3, [r4, #16]
 8003e9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ea0:	f04f 0900 	mov.w	r9, #0
 8003ea4:	e7de      	b.n	8003e64 <_printf_float+0x16c>
 8003ea6:	b913      	cbnz	r3, 8003eae <_printf_float+0x1b6>
 8003ea8:	6822      	ldr	r2, [r4, #0]
 8003eaa:	07d2      	lsls	r2, r2, #31
 8003eac:	d501      	bpl.n	8003eb2 <_printf_float+0x1ba>
 8003eae:	3302      	adds	r3, #2
 8003eb0:	e7f4      	b.n	8003e9c <_printf_float+0x1a4>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e7f2      	b.n	8003e9c <_printf_float+0x1a4>
 8003eb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ebc:	4299      	cmp	r1, r3
 8003ebe:	db05      	blt.n	8003ecc <_printf_float+0x1d4>
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	6121      	str	r1, [r4, #16]
 8003ec4:	07d8      	lsls	r0, r3, #31
 8003ec6:	d5ea      	bpl.n	8003e9e <_printf_float+0x1a6>
 8003ec8:	1c4b      	adds	r3, r1, #1
 8003eca:	e7e7      	b.n	8003e9c <_printf_float+0x1a4>
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	bfd4      	ite	le
 8003ed0:	f1c1 0202 	rsble	r2, r1, #2
 8003ed4:	2201      	movgt	r2, #1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	e7e0      	b.n	8003e9c <_printf_float+0x1a4>
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	055a      	lsls	r2, r3, #21
 8003ede:	d407      	bmi.n	8003ef0 <_printf_float+0x1f8>
 8003ee0:	6923      	ldr	r3, [r4, #16]
 8003ee2:	4642      	mov	r2, r8
 8003ee4:	4631      	mov	r1, r6
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	47b8      	blx	r7
 8003eea:	3001      	adds	r0, #1
 8003eec:	d12c      	bne.n	8003f48 <_printf_float+0x250>
 8003eee:	e764      	b.n	8003dba <_printf_float+0xc2>
 8003ef0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003ef4:	f240 80e0 	bls.w	80040b8 <_printf_float+0x3c0>
 8003ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003efc:	2200      	movs	r2, #0
 8003efe:	2300      	movs	r3, #0
 8003f00:	f7fc fdea 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d034      	beq.n	8003f72 <_printf_float+0x27a>
 8003f08:	4a37      	ldr	r2, [pc, #220]	; (8003fe8 <_printf_float+0x2f0>)
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4631      	mov	r1, r6
 8003f0e:	4628      	mov	r0, r5
 8003f10:	47b8      	blx	r7
 8003f12:	3001      	adds	r0, #1
 8003f14:	f43f af51 	beq.w	8003dba <_printf_float+0xc2>
 8003f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	db02      	blt.n	8003f26 <_printf_float+0x22e>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	07d8      	lsls	r0, r3, #31
 8003f24:	d510      	bpl.n	8003f48 <_printf_float+0x250>
 8003f26:	ee18 3a10 	vmov	r3, s16
 8003f2a:	4652      	mov	r2, sl
 8003f2c:	4631      	mov	r1, r6
 8003f2e:	4628      	mov	r0, r5
 8003f30:	47b8      	blx	r7
 8003f32:	3001      	adds	r0, #1
 8003f34:	f43f af41 	beq.w	8003dba <_printf_float+0xc2>
 8003f38:	f04f 0800 	mov.w	r8, #0
 8003f3c:	f104 091a 	add.w	r9, r4, #26
 8003f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f42:	3b01      	subs	r3, #1
 8003f44:	4543      	cmp	r3, r8
 8003f46:	dc09      	bgt.n	8003f5c <_printf_float+0x264>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	079b      	lsls	r3, r3, #30
 8003f4c:	f100 8105 	bmi.w	800415a <_printf_float+0x462>
 8003f50:	68e0      	ldr	r0, [r4, #12]
 8003f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f54:	4298      	cmp	r0, r3
 8003f56:	bfb8      	it	lt
 8003f58:	4618      	movlt	r0, r3
 8003f5a:	e730      	b.n	8003dbe <_printf_float+0xc6>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	464a      	mov	r2, r9
 8003f60:	4631      	mov	r1, r6
 8003f62:	4628      	mov	r0, r5
 8003f64:	47b8      	blx	r7
 8003f66:	3001      	adds	r0, #1
 8003f68:	f43f af27 	beq.w	8003dba <_printf_float+0xc2>
 8003f6c:	f108 0801 	add.w	r8, r8, #1
 8003f70:	e7e6      	b.n	8003f40 <_printf_float+0x248>
 8003f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	dc39      	bgt.n	8003fec <_printf_float+0x2f4>
 8003f78:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <_printf_float+0x2f0>)
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4631      	mov	r1, r6
 8003f7e:	4628      	mov	r0, r5
 8003f80:	47b8      	blx	r7
 8003f82:	3001      	adds	r0, #1
 8003f84:	f43f af19 	beq.w	8003dba <_printf_float+0xc2>
 8003f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	d102      	bne.n	8003f96 <_printf_float+0x29e>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	07d9      	lsls	r1, r3, #31
 8003f94:	d5d8      	bpl.n	8003f48 <_printf_float+0x250>
 8003f96:	ee18 3a10 	vmov	r3, s16
 8003f9a:	4652      	mov	r2, sl
 8003f9c:	4631      	mov	r1, r6
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	47b8      	blx	r7
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	f43f af09 	beq.w	8003dba <_printf_float+0xc2>
 8003fa8:	f04f 0900 	mov.w	r9, #0
 8003fac:	f104 0a1a 	add.w	sl, r4, #26
 8003fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fb2:	425b      	negs	r3, r3
 8003fb4:	454b      	cmp	r3, r9
 8003fb6:	dc01      	bgt.n	8003fbc <_printf_float+0x2c4>
 8003fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fba:	e792      	b.n	8003ee2 <_printf_float+0x1ea>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4652      	mov	r2, sl
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	47b8      	blx	r7
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	f43f aef7 	beq.w	8003dba <_printf_float+0xc2>
 8003fcc:	f109 0901 	add.w	r9, r9, #1
 8003fd0:	e7ee      	b.n	8003fb0 <_printf_float+0x2b8>
 8003fd2:	bf00      	nop
 8003fd4:	7fefffff 	.word	0x7fefffff
 8003fd8:	080080d0 	.word	0x080080d0
 8003fdc:	080080d4 	.word	0x080080d4
 8003fe0:	080080dc 	.word	0x080080dc
 8003fe4:	080080d8 	.word	0x080080d8
 8003fe8:	080080e0 	.word	0x080080e0
 8003fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	bfa8      	it	ge
 8003ff4:	461a      	movge	r2, r3
 8003ff6:	2a00      	cmp	r2, #0
 8003ff8:	4691      	mov	r9, r2
 8003ffa:	dc37      	bgt.n	800406c <_printf_float+0x374>
 8003ffc:	f04f 0b00 	mov.w	fp, #0
 8004000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004004:	f104 021a 	add.w	r2, r4, #26
 8004008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800400a:	9305      	str	r3, [sp, #20]
 800400c:	eba3 0309 	sub.w	r3, r3, r9
 8004010:	455b      	cmp	r3, fp
 8004012:	dc33      	bgt.n	800407c <_printf_float+0x384>
 8004014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004018:	429a      	cmp	r2, r3
 800401a:	db3b      	blt.n	8004094 <_printf_float+0x39c>
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	07da      	lsls	r2, r3, #31
 8004020:	d438      	bmi.n	8004094 <_printf_float+0x39c>
 8004022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004024:	9b05      	ldr	r3, [sp, #20]
 8004026:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	eba2 0901 	sub.w	r9, r2, r1
 800402e:	4599      	cmp	r9, r3
 8004030:	bfa8      	it	ge
 8004032:	4699      	movge	r9, r3
 8004034:	f1b9 0f00 	cmp.w	r9, #0
 8004038:	dc35      	bgt.n	80040a6 <_printf_float+0x3ae>
 800403a:	f04f 0800 	mov.w	r8, #0
 800403e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004042:	f104 0a1a 	add.w	sl, r4, #26
 8004046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	eba3 0309 	sub.w	r3, r3, r9
 8004050:	4543      	cmp	r3, r8
 8004052:	f77f af79 	ble.w	8003f48 <_printf_float+0x250>
 8004056:	2301      	movs	r3, #1
 8004058:	4652      	mov	r2, sl
 800405a:	4631      	mov	r1, r6
 800405c:	4628      	mov	r0, r5
 800405e:	47b8      	blx	r7
 8004060:	3001      	adds	r0, #1
 8004062:	f43f aeaa 	beq.w	8003dba <_printf_float+0xc2>
 8004066:	f108 0801 	add.w	r8, r8, #1
 800406a:	e7ec      	b.n	8004046 <_printf_float+0x34e>
 800406c:	4613      	mov	r3, r2
 800406e:	4631      	mov	r1, r6
 8004070:	4642      	mov	r2, r8
 8004072:	4628      	mov	r0, r5
 8004074:	47b8      	blx	r7
 8004076:	3001      	adds	r0, #1
 8004078:	d1c0      	bne.n	8003ffc <_printf_float+0x304>
 800407a:	e69e      	b.n	8003dba <_printf_float+0xc2>
 800407c:	2301      	movs	r3, #1
 800407e:	4631      	mov	r1, r6
 8004080:	4628      	mov	r0, r5
 8004082:	9205      	str	r2, [sp, #20]
 8004084:	47b8      	blx	r7
 8004086:	3001      	adds	r0, #1
 8004088:	f43f ae97 	beq.w	8003dba <_printf_float+0xc2>
 800408c:	9a05      	ldr	r2, [sp, #20]
 800408e:	f10b 0b01 	add.w	fp, fp, #1
 8004092:	e7b9      	b.n	8004008 <_printf_float+0x310>
 8004094:	ee18 3a10 	vmov	r3, s16
 8004098:	4652      	mov	r2, sl
 800409a:	4631      	mov	r1, r6
 800409c:	4628      	mov	r0, r5
 800409e:	47b8      	blx	r7
 80040a0:	3001      	adds	r0, #1
 80040a2:	d1be      	bne.n	8004022 <_printf_float+0x32a>
 80040a4:	e689      	b.n	8003dba <_printf_float+0xc2>
 80040a6:	9a05      	ldr	r2, [sp, #20]
 80040a8:	464b      	mov	r3, r9
 80040aa:	4442      	add	r2, r8
 80040ac:	4631      	mov	r1, r6
 80040ae:	4628      	mov	r0, r5
 80040b0:	47b8      	blx	r7
 80040b2:	3001      	adds	r0, #1
 80040b4:	d1c1      	bne.n	800403a <_printf_float+0x342>
 80040b6:	e680      	b.n	8003dba <_printf_float+0xc2>
 80040b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040ba:	2a01      	cmp	r2, #1
 80040bc:	dc01      	bgt.n	80040c2 <_printf_float+0x3ca>
 80040be:	07db      	lsls	r3, r3, #31
 80040c0:	d538      	bpl.n	8004134 <_printf_float+0x43c>
 80040c2:	2301      	movs	r3, #1
 80040c4:	4642      	mov	r2, r8
 80040c6:	4631      	mov	r1, r6
 80040c8:	4628      	mov	r0, r5
 80040ca:	47b8      	blx	r7
 80040cc:	3001      	adds	r0, #1
 80040ce:	f43f ae74 	beq.w	8003dba <_printf_float+0xc2>
 80040d2:	ee18 3a10 	vmov	r3, s16
 80040d6:	4652      	mov	r2, sl
 80040d8:	4631      	mov	r1, r6
 80040da:	4628      	mov	r0, r5
 80040dc:	47b8      	blx	r7
 80040de:	3001      	adds	r0, #1
 80040e0:	f43f ae6b 	beq.w	8003dba <_printf_float+0xc2>
 80040e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040e8:	2200      	movs	r2, #0
 80040ea:	2300      	movs	r3, #0
 80040ec:	f7fc fcf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80040f0:	b9d8      	cbnz	r0, 800412a <_printf_float+0x432>
 80040f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040f4:	f108 0201 	add.w	r2, r8, #1
 80040f8:	3b01      	subs	r3, #1
 80040fa:	4631      	mov	r1, r6
 80040fc:	4628      	mov	r0, r5
 80040fe:	47b8      	blx	r7
 8004100:	3001      	adds	r0, #1
 8004102:	d10e      	bne.n	8004122 <_printf_float+0x42a>
 8004104:	e659      	b.n	8003dba <_printf_float+0xc2>
 8004106:	2301      	movs	r3, #1
 8004108:	4652      	mov	r2, sl
 800410a:	4631      	mov	r1, r6
 800410c:	4628      	mov	r0, r5
 800410e:	47b8      	blx	r7
 8004110:	3001      	adds	r0, #1
 8004112:	f43f ae52 	beq.w	8003dba <_printf_float+0xc2>
 8004116:	f108 0801 	add.w	r8, r8, #1
 800411a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800411c:	3b01      	subs	r3, #1
 800411e:	4543      	cmp	r3, r8
 8004120:	dcf1      	bgt.n	8004106 <_printf_float+0x40e>
 8004122:	464b      	mov	r3, r9
 8004124:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004128:	e6dc      	b.n	8003ee4 <_printf_float+0x1ec>
 800412a:	f04f 0800 	mov.w	r8, #0
 800412e:	f104 0a1a 	add.w	sl, r4, #26
 8004132:	e7f2      	b.n	800411a <_printf_float+0x422>
 8004134:	2301      	movs	r3, #1
 8004136:	4642      	mov	r2, r8
 8004138:	e7df      	b.n	80040fa <_printf_float+0x402>
 800413a:	2301      	movs	r3, #1
 800413c:	464a      	mov	r2, r9
 800413e:	4631      	mov	r1, r6
 8004140:	4628      	mov	r0, r5
 8004142:	47b8      	blx	r7
 8004144:	3001      	adds	r0, #1
 8004146:	f43f ae38 	beq.w	8003dba <_printf_float+0xc2>
 800414a:	f108 0801 	add.w	r8, r8, #1
 800414e:	68e3      	ldr	r3, [r4, #12]
 8004150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004152:	1a5b      	subs	r3, r3, r1
 8004154:	4543      	cmp	r3, r8
 8004156:	dcf0      	bgt.n	800413a <_printf_float+0x442>
 8004158:	e6fa      	b.n	8003f50 <_printf_float+0x258>
 800415a:	f04f 0800 	mov.w	r8, #0
 800415e:	f104 0919 	add.w	r9, r4, #25
 8004162:	e7f4      	b.n	800414e <_printf_float+0x456>

08004164 <_printf_common>:
 8004164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004168:	4616      	mov	r6, r2
 800416a:	4699      	mov	r9, r3
 800416c:	688a      	ldr	r2, [r1, #8]
 800416e:	690b      	ldr	r3, [r1, #16]
 8004170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004174:	4293      	cmp	r3, r2
 8004176:	bfb8      	it	lt
 8004178:	4613      	movlt	r3, r2
 800417a:	6033      	str	r3, [r6, #0]
 800417c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004180:	4607      	mov	r7, r0
 8004182:	460c      	mov	r4, r1
 8004184:	b10a      	cbz	r2, 800418a <_printf_common+0x26>
 8004186:	3301      	adds	r3, #1
 8004188:	6033      	str	r3, [r6, #0]
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	0699      	lsls	r1, r3, #26
 800418e:	bf42      	ittt	mi
 8004190:	6833      	ldrmi	r3, [r6, #0]
 8004192:	3302      	addmi	r3, #2
 8004194:	6033      	strmi	r3, [r6, #0]
 8004196:	6825      	ldr	r5, [r4, #0]
 8004198:	f015 0506 	ands.w	r5, r5, #6
 800419c:	d106      	bne.n	80041ac <_printf_common+0x48>
 800419e:	f104 0a19 	add.w	sl, r4, #25
 80041a2:	68e3      	ldr	r3, [r4, #12]
 80041a4:	6832      	ldr	r2, [r6, #0]
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	42ab      	cmp	r3, r5
 80041aa:	dc26      	bgt.n	80041fa <_printf_common+0x96>
 80041ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041b0:	1e13      	subs	r3, r2, #0
 80041b2:	6822      	ldr	r2, [r4, #0]
 80041b4:	bf18      	it	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	0692      	lsls	r2, r2, #26
 80041ba:	d42b      	bmi.n	8004214 <_printf_common+0xb0>
 80041bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041c0:	4649      	mov	r1, r9
 80041c2:	4638      	mov	r0, r7
 80041c4:	47c0      	blx	r8
 80041c6:	3001      	adds	r0, #1
 80041c8:	d01e      	beq.n	8004208 <_printf_common+0xa4>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	68e5      	ldr	r5, [r4, #12]
 80041ce:	6832      	ldr	r2, [r6, #0]
 80041d0:	f003 0306 	and.w	r3, r3, #6
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	bf08      	it	eq
 80041d8:	1aad      	subeq	r5, r5, r2
 80041da:	68a3      	ldr	r3, [r4, #8]
 80041dc:	6922      	ldr	r2, [r4, #16]
 80041de:	bf0c      	ite	eq
 80041e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041e4:	2500      	movne	r5, #0
 80041e6:	4293      	cmp	r3, r2
 80041e8:	bfc4      	itt	gt
 80041ea:	1a9b      	subgt	r3, r3, r2
 80041ec:	18ed      	addgt	r5, r5, r3
 80041ee:	2600      	movs	r6, #0
 80041f0:	341a      	adds	r4, #26
 80041f2:	42b5      	cmp	r5, r6
 80041f4:	d11a      	bne.n	800422c <_printf_common+0xc8>
 80041f6:	2000      	movs	r0, #0
 80041f8:	e008      	b.n	800420c <_printf_common+0xa8>
 80041fa:	2301      	movs	r3, #1
 80041fc:	4652      	mov	r2, sl
 80041fe:	4649      	mov	r1, r9
 8004200:	4638      	mov	r0, r7
 8004202:	47c0      	blx	r8
 8004204:	3001      	adds	r0, #1
 8004206:	d103      	bne.n	8004210 <_printf_common+0xac>
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004210:	3501      	adds	r5, #1
 8004212:	e7c6      	b.n	80041a2 <_printf_common+0x3e>
 8004214:	18e1      	adds	r1, r4, r3
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	2030      	movs	r0, #48	; 0x30
 800421a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800421e:	4422      	add	r2, r4
 8004220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004228:	3302      	adds	r3, #2
 800422a:	e7c7      	b.n	80041bc <_printf_common+0x58>
 800422c:	2301      	movs	r3, #1
 800422e:	4622      	mov	r2, r4
 8004230:	4649      	mov	r1, r9
 8004232:	4638      	mov	r0, r7
 8004234:	47c0      	blx	r8
 8004236:	3001      	adds	r0, #1
 8004238:	d0e6      	beq.n	8004208 <_printf_common+0xa4>
 800423a:	3601      	adds	r6, #1
 800423c:	e7d9      	b.n	80041f2 <_printf_common+0x8e>
	...

08004240 <_printf_i>:
 8004240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004244:	460c      	mov	r4, r1
 8004246:	4691      	mov	r9, r2
 8004248:	7e27      	ldrb	r7, [r4, #24]
 800424a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800424c:	2f78      	cmp	r7, #120	; 0x78
 800424e:	4680      	mov	r8, r0
 8004250:	469a      	mov	sl, r3
 8004252:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004256:	d807      	bhi.n	8004268 <_printf_i+0x28>
 8004258:	2f62      	cmp	r7, #98	; 0x62
 800425a:	d80a      	bhi.n	8004272 <_printf_i+0x32>
 800425c:	2f00      	cmp	r7, #0
 800425e:	f000 80d8 	beq.w	8004412 <_printf_i+0x1d2>
 8004262:	2f58      	cmp	r7, #88	; 0x58
 8004264:	f000 80a3 	beq.w	80043ae <_printf_i+0x16e>
 8004268:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800426c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004270:	e03a      	b.n	80042e8 <_printf_i+0xa8>
 8004272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004276:	2b15      	cmp	r3, #21
 8004278:	d8f6      	bhi.n	8004268 <_printf_i+0x28>
 800427a:	a001      	add	r0, pc, #4	; (adr r0, 8004280 <_printf_i+0x40>)
 800427c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004280:	080042d9 	.word	0x080042d9
 8004284:	080042ed 	.word	0x080042ed
 8004288:	08004269 	.word	0x08004269
 800428c:	08004269 	.word	0x08004269
 8004290:	08004269 	.word	0x08004269
 8004294:	08004269 	.word	0x08004269
 8004298:	080042ed 	.word	0x080042ed
 800429c:	08004269 	.word	0x08004269
 80042a0:	08004269 	.word	0x08004269
 80042a4:	08004269 	.word	0x08004269
 80042a8:	08004269 	.word	0x08004269
 80042ac:	080043f9 	.word	0x080043f9
 80042b0:	0800431d 	.word	0x0800431d
 80042b4:	080043db 	.word	0x080043db
 80042b8:	08004269 	.word	0x08004269
 80042bc:	08004269 	.word	0x08004269
 80042c0:	0800441b 	.word	0x0800441b
 80042c4:	08004269 	.word	0x08004269
 80042c8:	0800431d 	.word	0x0800431d
 80042cc:	08004269 	.word	0x08004269
 80042d0:	08004269 	.word	0x08004269
 80042d4:	080043e3 	.word	0x080043e3
 80042d8:	680b      	ldr	r3, [r1, #0]
 80042da:	1d1a      	adds	r2, r3, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	600a      	str	r2, [r1, #0]
 80042e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0a3      	b.n	8004434 <_printf_i+0x1f4>
 80042ec:	6825      	ldr	r5, [r4, #0]
 80042ee:	6808      	ldr	r0, [r1, #0]
 80042f0:	062e      	lsls	r6, r5, #24
 80042f2:	f100 0304 	add.w	r3, r0, #4
 80042f6:	d50a      	bpl.n	800430e <_printf_i+0xce>
 80042f8:	6805      	ldr	r5, [r0, #0]
 80042fa:	600b      	str	r3, [r1, #0]
 80042fc:	2d00      	cmp	r5, #0
 80042fe:	da03      	bge.n	8004308 <_printf_i+0xc8>
 8004300:	232d      	movs	r3, #45	; 0x2d
 8004302:	426d      	negs	r5, r5
 8004304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004308:	485e      	ldr	r0, [pc, #376]	; (8004484 <_printf_i+0x244>)
 800430a:	230a      	movs	r3, #10
 800430c:	e019      	b.n	8004342 <_printf_i+0x102>
 800430e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004312:	6805      	ldr	r5, [r0, #0]
 8004314:	600b      	str	r3, [r1, #0]
 8004316:	bf18      	it	ne
 8004318:	b22d      	sxthne	r5, r5
 800431a:	e7ef      	b.n	80042fc <_printf_i+0xbc>
 800431c:	680b      	ldr	r3, [r1, #0]
 800431e:	6825      	ldr	r5, [r4, #0]
 8004320:	1d18      	adds	r0, r3, #4
 8004322:	6008      	str	r0, [r1, #0]
 8004324:	0628      	lsls	r0, r5, #24
 8004326:	d501      	bpl.n	800432c <_printf_i+0xec>
 8004328:	681d      	ldr	r5, [r3, #0]
 800432a:	e002      	b.n	8004332 <_printf_i+0xf2>
 800432c:	0669      	lsls	r1, r5, #25
 800432e:	d5fb      	bpl.n	8004328 <_printf_i+0xe8>
 8004330:	881d      	ldrh	r5, [r3, #0]
 8004332:	4854      	ldr	r0, [pc, #336]	; (8004484 <_printf_i+0x244>)
 8004334:	2f6f      	cmp	r7, #111	; 0x6f
 8004336:	bf0c      	ite	eq
 8004338:	2308      	moveq	r3, #8
 800433a:	230a      	movne	r3, #10
 800433c:	2100      	movs	r1, #0
 800433e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004342:	6866      	ldr	r6, [r4, #4]
 8004344:	60a6      	str	r6, [r4, #8]
 8004346:	2e00      	cmp	r6, #0
 8004348:	bfa2      	ittt	ge
 800434a:	6821      	ldrge	r1, [r4, #0]
 800434c:	f021 0104 	bicge.w	r1, r1, #4
 8004350:	6021      	strge	r1, [r4, #0]
 8004352:	b90d      	cbnz	r5, 8004358 <_printf_i+0x118>
 8004354:	2e00      	cmp	r6, #0
 8004356:	d04d      	beq.n	80043f4 <_printf_i+0x1b4>
 8004358:	4616      	mov	r6, r2
 800435a:	fbb5 f1f3 	udiv	r1, r5, r3
 800435e:	fb03 5711 	mls	r7, r3, r1, r5
 8004362:	5dc7      	ldrb	r7, [r0, r7]
 8004364:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004368:	462f      	mov	r7, r5
 800436a:	42bb      	cmp	r3, r7
 800436c:	460d      	mov	r5, r1
 800436e:	d9f4      	bls.n	800435a <_printf_i+0x11a>
 8004370:	2b08      	cmp	r3, #8
 8004372:	d10b      	bne.n	800438c <_printf_i+0x14c>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	07df      	lsls	r7, r3, #31
 8004378:	d508      	bpl.n	800438c <_printf_i+0x14c>
 800437a:	6923      	ldr	r3, [r4, #16]
 800437c:	6861      	ldr	r1, [r4, #4]
 800437e:	4299      	cmp	r1, r3
 8004380:	bfde      	ittt	le
 8004382:	2330      	movle	r3, #48	; 0x30
 8004384:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004388:	f106 36ff 	addle.w	r6, r6, #4294967295
 800438c:	1b92      	subs	r2, r2, r6
 800438e:	6122      	str	r2, [r4, #16]
 8004390:	f8cd a000 	str.w	sl, [sp]
 8004394:	464b      	mov	r3, r9
 8004396:	aa03      	add	r2, sp, #12
 8004398:	4621      	mov	r1, r4
 800439a:	4640      	mov	r0, r8
 800439c:	f7ff fee2 	bl	8004164 <_printf_common>
 80043a0:	3001      	adds	r0, #1
 80043a2:	d14c      	bne.n	800443e <_printf_i+0x1fe>
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	b004      	add	sp, #16
 80043aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ae:	4835      	ldr	r0, [pc, #212]	; (8004484 <_printf_i+0x244>)
 80043b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	680e      	ldr	r6, [r1, #0]
 80043b8:	061f      	lsls	r7, r3, #24
 80043ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80043be:	600e      	str	r6, [r1, #0]
 80043c0:	d514      	bpl.n	80043ec <_printf_i+0x1ac>
 80043c2:	07d9      	lsls	r1, r3, #31
 80043c4:	bf44      	itt	mi
 80043c6:	f043 0320 	orrmi.w	r3, r3, #32
 80043ca:	6023      	strmi	r3, [r4, #0]
 80043cc:	b91d      	cbnz	r5, 80043d6 <_printf_i+0x196>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	f023 0320 	bic.w	r3, r3, #32
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	2310      	movs	r3, #16
 80043d8:	e7b0      	b.n	800433c <_printf_i+0xfc>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	f043 0320 	orr.w	r3, r3, #32
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	2378      	movs	r3, #120	; 0x78
 80043e4:	4828      	ldr	r0, [pc, #160]	; (8004488 <_printf_i+0x248>)
 80043e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043ea:	e7e3      	b.n	80043b4 <_printf_i+0x174>
 80043ec:	065e      	lsls	r6, r3, #25
 80043ee:	bf48      	it	mi
 80043f0:	b2ad      	uxthmi	r5, r5
 80043f2:	e7e6      	b.n	80043c2 <_printf_i+0x182>
 80043f4:	4616      	mov	r6, r2
 80043f6:	e7bb      	b.n	8004370 <_printf_i+0x130>
 80043f8:	680b      	ldr	r3, [r1, #0]
 80043fa:	6826      	ldr	r6, [r4, #0]
 80043fc:	6960      	ldr	r0, [r4, #20]
 80043fe:	1d1d      	adds	r5, r3, #4
 8004400:	600d      	str	r5, [r1, #0]
 8004402:	0635      	lsls	r5, r6, #24
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	d501      	bpl.n	800440c <_printf_i+0x1cc>
 8004408:	6018      	str	r0, [r3, #0]
 800440a:	e002      	b.n	8004412 <_printf_i+0x1d2>
 800440c:	0671      	lsls	r1, r6, #25
 800440e:	d5fb      	bpl.n	8004408 <_printf_i+0x1c8>
 8004410:	8018      	strh	r0, [r3, #0]
 8004412:	2300      	movs	r3, #0
 8004414:	6123      	str	r3, [r4, #16]
 8004416:	4616      	mov	r6, r2
 8004418:	e7ba      	b.n	8004390 <_printf_i+0x150>
 800441a:	680b      	ldr	r3, [r1, #0]
 800441c:	1d1a      	adds	r2, r3, #4
 800441e:	600a      	str	r2, [r1, #0]
 8004420:	681e      	ldr	r6, [r3, #0]
 8004422:	6862      	ldr	r2, [r4, #4]
 8004424:	2100      	movs	r1, #0
 8004426:	4630      	mov	r0, r6
 8004428:	f7fb fee2 	bl	80001f0 <memchr>
 800442c:	b108      	cbz	r0, 8004432 <_printf_i+0x1f2>
 800442e:	1b80      	subs	r0, r0, r6
 8004430:	6060      	str	r0, [r4, #4]
 8004432:	6863      	ldr	r3, [r4, #4]
 8004434:	6123      	str	r3, [r4, #16]
 8004436:	2300      	movs	r3, #0
 8004438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800443c:	e7a8      	b.n	8004390 <_printf_i+0x150>
 800443e:	6923      	ldr	r3, [r4, #16]
 8004440:	4632      	mov	r2, r6
 8004442:	4649      	mov	r1, r9
 8004444:	4640      	mov	r0, r8
 8004446:	47d0      	blx	sl
 8004448:	3001      	adds	r0, #1
 800444a:	d0ab      	beq.n	80043a4 <_printf_i+0x164>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	079b      	lsls	r3, r3, #30
 8004450:	d413      	bmi.n	800447a <_printf_i+0x23a>
 8004452:	68e0      	ldr	r0, [r4, #12]
 8004454:	9b03      	ldr	r3, [sp, #12]
 8004456:	4298      	cmp	r0, r3
 8004458:	bfb8      	it	lt
 800445a:	4618      	movlt	r0, r3
 800445c:	e7a4      	b.n	80043a8 <_printf_i+0x168>
 800445e:	2301      	movs	r3, #1
 8004460:	4632      	mov	r2, r6
 8004462:	4649      	mov	r1, r9
 8004464:	4640      	mov	r0, r8
 8004466:	47d0      	blx	sl
 8004468:	3001      	adds	r0, #1
 800446a:	d09b      	beq.n	80043a4 <_printf_i+0x164>
 800446c:	3501      	adds	r5, #1
 800446e:	68e3      	ldr	r3, [r4, #12]
 8004470:	9903      	ldr	r1, [sp, #12]
 8004472:	1a5b      	subs	r3, r3, r1
 8004474:	42ab      	cmp	r3, r5
 8004476:	dcf2      	bgt.n	800445e <_printf_i+0x21e>
 8004478:	e7eb      	b.n	8004452 <_printf_i+0x212>
 800447a:	2500      	movs	r5, #0
 800447c:	f104 0619 	add.w	r6, r4, #25
 8004480:	e7f5      	b.n	800446e <_printf_i+0x22e>
 8004482:	bf00      	nop
 8004484:	080080e2 	.word	0x080080e2
 8004488:	080080f3 	.word	0x080080f3

0800448c <sniprintf>:
 800448c:	b40c      	push	{r2, r3}
 800448e:	b530      	push	{r4, r5, lr}
 8004490:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <sniprintf+0x64>)
 8004492:	1e0c      	subs	r4, r1, #0
 8004494:	681d      	ldr	r5, [r3, #0]
 8004496:	b09d      	sub	sp, #116	; 0x74
 8004498:	da08      	bge.n	80044ac <sniprintf+0x20>
 800449a:	238b      	movs	r3, #139	; 0x8b
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	f04f 30ff 	mov.w	r0, #4294967295
 80044a2:	b01d      	add	sp, #116	; 0x74
 80044a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044a8:	b002      	add	sp, #8
 80044aa:	4770      	bx	lr
 80044ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80044b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80044b4:	bf14      	ite	ne
 80044b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80044ba:	4623      	moveq	r3, r4
 80044bc:	9304      	str	r3, [sp, #16]
 80044be:	9307      	str	r3, [sp, #28]
 80044c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044c4:	9002      	str	r0, [sp, #8]
 80044c6:	9006      	str	r0, [sp, #24]
 80044c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80044cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80044ce:	ab21      	add	r3, sp, #132	; 0x84
 80044d0:	a902      	add	r1, sp, #8
 80044d2:	4628      	mov	r0, r5
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	f002 febf 	bl	8007258 <_svfiprintf_r>
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	bfbc      	itt	lt
 80044de:	238b      	movlt	r3, #139	; 0x8b
 80044e0:	602b      	strlt	r3, [r5, #0]
 80044e2:	2c00      	cmp	r4, #0
 80044e4:	d0dd      	beq.n	80044a2 <sniprintf+0x16>
 80044e6:	9b02      	ldr	r3, [sp, #8]
 80044e8:	2200      	movs	r2, #0
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	e7d9      	b.n	80044a2 <sniprintf+0x16>
 80044ee:	bf00      	nop
 80044f0:	20000054 	.word	0x20000054

080044f4 <strchr>:
 80044f4:	b2c9      	uxtb	r1, r1
 80044f6:	4603      	mov	r3, r0
 80044f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044fc:	b11a      	cbz	r2, 8004506 <strchr+0x12>
 80044fe:	428a      	cmp	r2, r1
 8004500:	d1f9      	bne.n	80044f6 <strchr+0x2>
 8004502:	4618      	mov	r0, r3
 8004504:	4770      	bx	lr
 8004506:	2900      	cmp	r1, #0
 8004508:	bf18      	it	ne
 800450a:	2300      	movne	r3, #0
 800450c:	e7f9      	b.n	8004502 <strchr+0xe>

0800450e <strncmp>:
 800450e:	b510      	push	{r4, lr}
 8004510:	b16a      	cbz	r2, 800452e <strncmp+0x20>
 8004512:	3901      	subs	r1, #1
 8004514:	1884      	adds	r4, r0, r2
 8004516:	f810 3b01 	ldrb.w	r3, [r0], #1
 800451a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800451e:	4293      	cmp	r3, r2
 8004520:	d103      	bne.n	800452a <strncmp+0x1c>
 8004522:	42a0      	cmp	r0, r4
 8004524:	d001      	beq.n	800452a <strncmp+0x1c>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f5      	bne.n	8004516 <strncmp+0x8>
 800452a:	1a98      	subs	r0, r3, r2
 800452c:	bd10      	pop	{r4, pc}
 800452e:	4610      	mov	r0, r2
 8004530:	e7fc      	b.n	800452c <strncmp+0x1e>

08004532 <strncpy>:
 8004532:	b510      	push	{r4, lr}
 8004534:	3901      	subs	r1, #1
 8004536:	4603      	mov	r3, r0
 8004538:	b132      	cbz	r2, 8004548 <strncpy+0x16>
 800453a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800453e:	f803 4b01 	strb.w	r4, [r3], #1
 8004542:	3a01      	subs	r2, #1
 8004544:	2c00      	cmp	r4, #0
 8004546:	d1f7      	bne.n	8004538 <strncpy+0x6>
 8004548:	441a      	add	r2, r3
 800454a:	2100      	movs	r1, #0
 800454c:	4293      	cmp	r3, r2
 800454e:	d100      	bne.n	8004552 <strncpy+0x20>
 8004550:	bd10      	pop	{r4, pc}
 8004552:	f803 1b01 	strb.w	r1, [r3], #1
 8004556:	e7f9      	b.n	800454c <strncpy+0x1a>

08004558 <strpbrk>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	7803      	ldrb	r3, [r0, #0]
 800455c:	b1a3      	cbz	r3, 8004588 <strpbrk+0x30>
 800455e:	4603      	mov	r3, r0
 8004560:	460c      	mov	r4, r1
 8004562:	4618      	mov	r0, r3
 8004564:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004568:	b14d      	cbz	r5, 800457e <strpbrk+0x26>
 800456a:	460a      	mov	r2, r1
 800456c:	e001      	b.n	8004572 <strpbrk+0x1a>
 800456e:	42ae      	cmp	r6, r5
 8004570:	d009      	beq.n	8004586 <strpbrk+0x2e>
 8004572:	4614      	mov	r4, r2
 8004574:	f812 6b01 	ldrb.w	r6, [r2], #1
 8004578:	2e00      	cmp	r6, #0
 800457a:	d1f8      	bne.n	800456e <strpbrk+0x16>
 800457c:	e7f1      	b.n	8004562 <strpbrk+0xa>
 800457e:	7823      	ldrb	r3, [r4, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf08      	it	eq
 8004584:	2000      	moveq	r0, #0
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	4618      	mov	r0, r3
 800458a:	e7fc      	b.n	8004586 <strpbrk+0x2e>

0800458c <sulp>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	4604      	mov	r4, r0
 8004590:	460d      	mov	r5, r1
 8004592:	ec45 4b10 	vmov	d0, r4, r5
 8004596:	4616      	mov	r6, r2
 8004598:	f002 fbfa 	bl	8006d90 <__ulp>
 800459c:	ec51 0b10 	vmov	r0, r1, d0
 80045a0:	b17e      	cbz	r6, 80045c2 <sulp+0x36>
 80045a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80045a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	dd09      	ble.n	80045c2 <sulp+0x36>
 80045ae:	051b      	lsls	r3, r3, #20
 80045b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80045b4:	2400      	movs	r4, #0
 80045b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80045ba:	4622      	mov	r2, r4
 80045bc:	462b      	mov	r3, r5
 80045be:	f7fc f823 	bl	8000608 <__aeabi_dmul>
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	0000      	movs	r0, r0
	...

080045c8 <_strtod_l>:
 80045c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045cc:	b0a3      	sub	sp, #140	; 0x8c
 80045ce:	461f      	mov	r7, r3
 80045d0:	2300      	movs	r3, #0
 80045d2:	931e      	str	r3, [sp, #120]	; 0x78
 80045d4:	4ba4      	ldr	r3, [pc, #656]	; (8004868 <_strtod_l+0x2a0>)
 80045d6:	9219      	str	r2, [sp, #100]	; 0x64
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	9307      	str	r3, [sp, #28]
 80045dc:	4604      	mov	r4, r0
 80045de:	4618      	mov	r0, r3
 80045e0:	4688      	mov	r8, r1
 80045e2:	f7fb fdfd 	bl	80001e0 <strlen>
 80045e6:	f04f 0a00 	mov.w	sl, #0
 80045ea:	4605      	mov	r5, r0
 80045ec:	f04f 0b00 	mov.w	fp, #0
 80045f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80045f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80045f6:	781a      	ldrb	r2, [r3, #0]
 80045f8:	2a2b      	cmp	r2, #43	; 0x2b
 80045fa:	d04c      	beq.n	8004696 <_strtod_l+0xce>
 80045fc:	d839      	bhi.n	8004672 <_strtod_l+0xaa>
 80045fe:	2a0d      	cmp	r2, #13
 8004600:	d832      	bhi.n	8004668 <_strtod_l+0xa0>
 8004602:	2a08      	cmp	r2, #8
 8004604:	d832      	bhi.n	800466c <_strtod_l+0xa4>
 8004606:	2a00      	cmp	r2, #0
 8004608:	d03c      	beq.n	8004684 <_strtod_l+0xbc>
 800460a:	2300      	movs	r3, #0
 800460c:	930e      	str	r3, [sp, #56]	; 0x38
 800460e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004610:	7833      	ldrb	r3, [r6, #0]
 8004612:	2b30      	cmp	r3, #48	; 0x30
 8004614:	f040 80b4 	bne.w	8004780 <_strtod_l+0x1b8>
 8004618:	7873      	ldrb	r3, [r6, #1]
 800461a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800461e:	2b58      	cmp	r3, #88	; 0x58
 8004620:	d16c      	bne.n	80046fc <_strtod_l+0x134>
 8004622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004624:	9301      	str	r3, [sp, #4]
 8004626:	ab1e      	add	r3, sp, #120	; 0x78
 8004628:	9702      	str	r7, [sp, #8]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4a8f      	ldr	r2, [pc, #572]	; (800486c <_strtod_l+0x2a4>)
 800462e:	ab1f      	add	r3, sp, #124	; 0x7c
 8004630:	a91d      	add	r1, sp, #116	; 0x74
 8004632:	4620      	mov	r0, r4
 8004634:	f001 fd0c 	bl	8006050 <__gethex>
 8004638:	f010 0707 	ands.w	r7, r0, #7
 800463c:	4605      	mov	r5, r0
 800463e:	d005      	beq.n	800464c <_strtod_l+0x84>
 8004640:	2f06      	cmp	r7, #6
 8004642:	d12a      	bne.n	800469a <_strtod_l+0xd2>
 8004644:	3601      	adds	r6, #1
 8004646:	2300      	movs	r3, #0
 8004648:	961d      	str	r6, [sp, #116]	; 0x74
 800464a:	930e      	str	r3, [sp, #56]	; 0x38
 800464c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 8596 	bne.w	8005180 <_strtod_l+0xbb8>
 8004654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004656:	b1db      	cbz	r3, 8004690 <_strtod_l+0xc8>
 8004658:	4652      	mov	r2, sl
 800465a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800465e:	ec43 2b10 	vmov	d0, r2, r3
 8004662:	b023      	add	sp, #140	; 0x8c
 8004664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004668:	2a20      	cmp	r2, #32
 800466a:	d1ce      	bne.n	800460a <_strtod_l+0x42>
 800466c:	3301      	adds	r3, #1
 800466e:	931d      	str	r3, [sp, #116]	; 0x74
 8004670:	e7c0      	b.n	80045f4 <_strtod_l+0x2c>
 8004672:	2a2d      	cmp	r2, #45	; 0x2d
 8004674:	d1c9      	bne.n	800460a <_strtod_l+0x42>
 8004676:	2201      	movs	r2, #1
 8004678:	920e      	str	r2, [sp, #56]	; 0x38
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	921d      	str	r2, [sp, #116]	; 0x74
 800467e:	785b      	ldrb	r3, [r3, #1]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1c4      	bne.n	800460e <_strtod_l+0x46>
 8004684:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004686:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800468a:	2b00      	cmp	r3, #0
 800468c:	f040 8576 	bne.w	800517c <_strtod_l+0xbb4>
 8004690:	4652      	mov	r2, sl
 8004692:	465b      	mov	r3, fp
 8004694:	e7e3      	b.n	800465e <_strtod_l+0x96>
 8004696:	2200      	movs	r2, #0
 8004698:	e7ee      	b.n	8004678 <_strtod_l+0xb0>
 800469a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800469c:	b13a      	cbz	r2, 80046ae <_strtod_l+0xe6>
 800469e:	2135      	movs	r1, #53	; 0x35
 80046a0:	a820      	add	r0, sp, #128	; 0x80
 80046a2:	f002 fc80 	bl	8006fa6 <__copybits>
 80046a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80046a8:	4620      	mov	r0, r4
 80046aa:	f002 f845 	bl	8006738 <_Bfree>
 80046ae:	3f01      	subs	r7, #1
 80046b0:	2f05      	cmp	r7, #5
 80046b2:	d807      	bhi.n	80046c4 <_strtod_l+0xfc>
 80046b4:	e8df f007 	tbb	[pc, r7]
 80046b8:	1d180b0e 	.word	0x1d180b0e
 80046bc:	030e      	.short	0x030e
 80046be:	f04f 0b00 	mov.w	fp, #0
 80046c2:	46da      	mov	sl, fp
 80046c4:	0728      	lsls	r0, r5, #28
 80046c6:	d5c1      	bpl.n	800464c <_strtod_l+0x84>
 80046c8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80046cc:	e7be      	b.n	800464c <_strtod_l+0x84>
 80046ce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80046d2:	e7f7      	b.n	80046c4 <_strtod_l+0xfc>
 80046d4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80046d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80046da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80046e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80046e6:	e7ed      	b.n	80046c4 <_strtod_l+0xfc>
 80046e8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004870 <_strtod_l+0x2a8>
 80046ec:	f04f 0a00 	mov.w	sl, #0
 80046f0:	e7e8      	b.n	80046c4 <_strtod_l+0xfc>
 80046f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80046f6:	f04f 3aff 	mov.w	sl, #4294967295
 80046fa:	e7e3      	b.n	80046c4 <_strtod_l+0xfc>
 80046fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	921d      	str	r2, [sp, #116]	; 0x74
 8004702:	785b      	ldrb	r3, [r3, #1]
 8004704:	2b30      	cmp	r3, #48	; 0x30
 8004706:	d0f9      	beq.n	80046fc <_strtod_l+0x134>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d09f      	beq.n	800464c <_strtod_l+0x84>
 800470c:	2301      	movs	r3, #1
 800470e:	f04f 0900 	mov.w	r9, #0
 8004712:	9304      	str	r3, [sp, #16]
 8004714:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004716:	930a      	str	r3, [sp, #40]	; 0x28
 8004718:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800471c:	464f      	mov	r7, r9
 800471e:	220a      	movs	r2, #10
 8004720:	981d      	ldr	r0, [sp, #116]	; 0x74
 8004722:	7806      	ldrb	r6, [r0, #0]
 8004724:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004728:	b2d9      	uxtb	r1, r3
 800472a:	2909      	cmp	r1, #9
 800472c:	d92a      	bls.n	8004784 <_strtod_l+0x1bc>
 800472e:	9907      	ldr	r1, [sp, #28]
 8004730:	462a      	mov	r2, r5
 8004732:	f7ff feec 	bl	800450e <strncmp>
 8004736:	b398      	cbz	r0, 80047a0 <_strtod_l+0x1d8>
 8004738:	2000      	movs	r0, #0
 800473a:	4633      	mov	r3, r6
 800473c:	463d      	mov	r5, r7
 800473e:	9007      	str	r0, [sp, #28]
 8004740:	4602      	mov	r2, r0
 8004742:	2b65      	cmp	r3, #101	; 0x65
 8004744:	d001      	beq.n	800474a <_strtod_l+0x182>
 8004746:	2b45      	cmp	r3, #69	; 0x45
 8004748:	d118      	bne.n	800477c <_strtod_l+0x1b4>
 800474a:	b91d      	cbnz	r5, 8004754 <_strtod_l+0x18c>
 800474c:	9b04      	ldr	r3, [sp, #16]
 800474e:	4303      	orrs	r3, r0
 8004750:	d098      	beq.n	8004684 <_strtod_l+0xbc>
 8004752:	2500      	movs	r5, #0
 8004754:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004758:	f108 0301 	add.w	r3, r8, #1
 800475c:	931d      	str	r3, [sp, #116]	; 0x74
 800475e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004762:	2b2b      	cmp	r3, #43	; 0x2b
 8004764:	d075      	beq.n	8004852 <_strtod_l+0x28a>
 8004766:	2b2d      	cmp	r3, #45	; 0x2d
 8004768:	d07b      	beq.n	8004862 <_strtod_l+0x29a>
 800476a:	f04f 0c00 	mov.w	ip, #0
 800476e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004772:	2909      	cmp	r1, #9
 8004774:	f240 8082 	bls.w	800487c <_strtod_l+0x2b4>
 8004778:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800477c:	2600      	movs	r6, #0
 800477e:	e09d      	b.n	80048bc <_strtod_l+0x2f4>
 8004780:	2300      	movs	r3, #0
 8004782:	e7c4      	b.n	800470e <_strtod_l+0x146>
 8004784:	2f08      	cmp	r7, #8
 8004786:	bfd8      	it	le
 8004788:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800478a:	f100 0001 	add.w	r0, r0, #1
 800478e:	bfda      	itte	le
 8004790:	fb02 3301 	mlale	r3, r2, r1, r3
 8004794:	9309      	strle	r3, [sp, #36]	; 0x24
 8004796:	fb02 3909 	mlagt	r9, r2, r9, r3
 800479a:	3701      	adds	r7, #1
 800479c:	901d      	str	r0, [sp, #116]	; 0x74
 800479e:	e7bf      	b.n	8004720 <_strtod_l+0x158>
 80047a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047a2:	195a      	adds	r2, r3, r5
 80047a4:	921d      	str	r2, [sp, #116]	; 0x74
 80047a6:	5d5b      	ldrb	r3, [r3, r5]
 80047a8:	2f00      	cmp	r7, #0
 80047aa:	d037      	beq.n	800481c <_strtod_l+0x254>
 80047ac:	9007      	str	r0, [sp, #28]
 80047ae:	463d      	mov	r5, r7
 80047b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80047b4:	2a09      	cmp	r2, #9
 80047b6:	d912      	bls.n	80047de <_strtod_l+0x216>
 80047b8:	2201      	movs	r2, #1
 80047ba:	e7c2      	b.n	8004742 <_strtod_l+0x17a>
 80047bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	921d      	str	r2, [sp, #116]	; 0x74
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	3001      	adds	r0, #1
 80047c6:	2b30      	cmp	r3, #48	; 0x30
 80047c8:	d0f8      	beq.n	80047bc <_strtod_l+0x1f4>
 80047ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80047ce:	2a08      	cmp	r2, #8
 80047d0:	f200 84db 	bhi.w	800518a <_strtod_l+0xbc2>
 80047d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80047d6:	9007      	str	r0, [sp, #28]
 80047d8:	2000      	movs	r0, #0
 80047da:	920a      	str	r2, [sp, #40]	; 0x28
 80047dc:	4605      	mov	r5, r0
 80047de:	3b30      	subs	r3, #48	; 0x30
 80047e0:	f100 0201 	add.w	r2, r0, #1
 80047e4:	d014      	beq.n	8004810 <_strtod_l+0x248>
 80047e6:	9907      	ldr	r1, [sp, #28]
 80047e8:	4411      	add	r1, r2
 80047ea:	9107      	str	r1, [sp, #28]
 80047ec:	462a      	mov	r2, r5
 80047ee:	eb00 0e05 	add.w	lr, r0, r5
 80047f2:	210a      	movs	r1, #10
 80047f4:	4572      	cmp	r2, lr
 80047f6:	d113      	bne.n	8004820 <_strtod_l+0x258>
 80047f8:	182a      	adds	r2, r5, r0
 80047fa:	2a08      	cmp	r2, #8
 80047fc:	f105 0501 	add.w	r5, r5, #1
 8004800:	4405      	add	r5, r0
 8004802:	dc1c      	bgt.n	800483e <_strtod_l+0x276>
 8004804:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004806:	220a      	movs	r2, #10
 8004808:	fb02 3301 	mla	r3, r2, r1, r3
 800480c:	9309      	str	r3, [sp, #36]	; 0x24
 800480e:	2200      	movs	r2, #0
 8004810:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004812:	1c59      	adds	r1, r3, #1
 8004814:	911d      	str	r1, [sp, #116]	; 0x74
 8004816:	785b      	ldrb	r3, [r3, #1]
 8004818:	4610      	mov	r0, r2
 800481a:	e7c9      	b.n	80047b0 <_strtod_l+0x1e8>
 800481c:	4638      	mov	r0, r7
 800481e:	e7d2      	b.n	80047c6 <_strtod_l+0x1fe>
 8004820:	2a08      	cmp	r2, #8
 8004822:	dc04      	bgt.n	800482e <_strtod_l+0x266>
 8004824:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004826:	434e      	muls	r6, r1
 8004828:	9609      	str	r6, [sp, #36]	; 0x24
 800482a:	3201      	adds	r2, #1
 800482c:	e7e2      	b.n	80047f4 <_strtod_l+0x22c>
 800482e:	f102 0c01 	add.w	ip, r2, #1
 8004832:	f1bc 0f10 	cmp.w	ip, #16
 8004836:	bfd8      	it	le
 8004838:	fb01 f909 	mulle.w	r9, r1, r9
 800483c:	e7f5      	b.n	800482a <_strtod_l+0x262>
 800483e:	2d10      	cmp	r5, #16
 8004840:	bfdc      	itt	le
 8004842:	220a      	movle	r2, #10
 8004844:	fb02 3909 	mlale	r9, r2, r9, r3
 8004848:	e7e1      	b.n	800480e <_strtod_l+0x246>
 800484a:	2300      	movs	r3, #0
 800484c:	9307      	str	r3, [sp, #28]
 800484e:	2201      	movs	r2, #1
 8004850:	e77c      	b.n	800474c <_strtod_l+0x184>
 8004852:	f04f 0c00 	mov.w	ip, #0
 8004856:	f108 0302 	add.w	r3, r8, #2
 800485a:	931d      	str	r3, [sp, #116]	; 0x74
 800485c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004860:	e785      	b.n	800476e <_strtod_l+0x1a6>
 8004862:	f04f 0c01 	mov.w	ip, #1
 8004866:	e7f6      	b.n	8004856 <_strtod_l+0x28e>
 8004868:	08008258 	.word	0x08008258
 800486c:	08008104 	.word	0x08008104
 8004870:	7ff00000 	.word	0x7ff00000
 8004874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004876:	1c59      	adds	r1, r3, #1
 8004878:	911d      	str	r1, [sp, #116]	; 0x74
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	2b30      	cmp	r3, #48	; 0x30
 800487e:	d0f9      	beq.n	8004874 <_strtod_l+0x2ac>
 8004880:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004884:	2908      	cmp	r1, #8
 8004886:	f63f af79 	bhi.w	800477c <_strtod_l+0x1b4>
 800488a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800488e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004890:	9308      	str	r3, [sp, #32]
 8004892:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004894:	1c59      	adds	r1, r3, #1
 8004896:	911d      	str	r1, [sp, #116]	; 0x74
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800489e:	2e09      	cmp	r6, #9
 80048a0:	d937      	bls.n	8004912 <_strtod_l+0x34a>
 80048a2:	9e08      	ldr	r6, [sp, #32]
 80048a4:	1b89      	subs	r1, r1, r6
 80048a6:	2908      	cmp	r1, #8
 80048a8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80048ac:	dc02      	bgt.n	80048b4 <_strtod_l+0x2ec>
 80048ae:	4576      	cmp	r6, lr
 80048b0:	bfa8      	it	ge
 80048b2:	4676      	movge	r6, lr
 80048b4:	f1bc 0f00 	cmp.w	ip, #0
 80048b8:	d000      	beq.n	80048bc <_strtod_l+0x2f4>
 80048ba:	4276      	negs	r6, r6
 80048bc:	2d00      	cmp	r5, #0
 80048be:	d14f      	bne.n	8004960 <_strtod_l+0x398>
 80048c0:	9904      	ldr	r1, [sp, #16]
 80048c2:	4301      	orrs	r1, r0
 80048c4:	f47f aec2 	bne.w	800464c <_strtod_l+0x84>
 80048c8:	2a00      	cmp	r2, #0
 80048ca:	f47f aedb 	bne.w	8004684 <_strtod_l+0xbc>
 80048ce:	2b69      	cmp	r3, #105	; 0x69
 80048d0:	d027      	beq.n	8004922 <_strtod_l+0x35a>
 80048d2:	dc24      	bgt.n	800491e <_strtod_l+0x356>
 80048d4:	2b49      	cmp	r3, #73	; 0x49
 80048d6:	d024      	beq.n	8004922 <_strtod_l+0x35a>
 80048d8:	2b4e      	cmp	r3, #78	; 0x4e
 80048da:	f47f aed3 	bne.w	8004684 <_strtod_l+0xbc>
 80048de:	499e      	ldr	r1, [pc, #632]	; (8004b58 <_strtod_l+0x590>)
 80048e0:	a81d      	add	r0, sp, #116	; 0x74
 80048e2:	f001 fe0d 	bl	8006500 <__match>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	f43f aecc 	beq.w	8004684 <_strtod_l+0xbc>
 80048ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b28      	cmp	r3, #40	; 0x28
 80048f2:	d12d      	bne.n	8004950 <_strtod_l+0x388>
 80048f4:	4999      	ldr	r1, [pc, #612]	; (8004b5c <_strtod_l+0x594>)
 80048f6:	aa20      	add	r2, sp, #128	; 0x80
 80048f8:	a81d      	add	r0, sp, #116	; 0x74
 80048fa:	f001 fe15 	bl	8006528 <__hexnan>
 80048fe:	2805      	cmp	r0, #5
 8004900:	d126      	bne.n	8004950 <_strtod_l+0x388>
 8004902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004904:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8004908:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800490c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004910:	e69c      	b.n	800464c <_strtod_l+0x84>
 8004912:	210a      	movs	r1, #10
 8004914:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004918:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800491c:	e7b9      	b.n	8004892 <_strtod_l+0x2ca>
 800491e:	2b6e      	cmp	r3, #110	; 0x6e
 8004920:	e7db      	b.n	80048da <_strtod_l+0x312>
 8004922:	498f      	ldr	r1, [pc, #572]	; (8004b60 <_strtod_l+0x598>)
 8004924:	a81d      	add	r0, sp, #116	; 0x74
 8004926:	f001 fdeb 	bl	8006500 <__match>
 800492a:	2800      	cmp	r0, #0
 800492c:	f43f aeaa 	beq.w	8004684 <_strtod_l+0xbc>
 8004930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004932:	498c      	ldr	r1, [pc, #560]	; (8004b64 <_strtod_l+0x59c>)
 8004934:	3b01      	subs	r3, #1
 8004936:	a81d      	add	r0, sp, #116	; 0x74
 8004938:	931d      	str	r3, [sp, #116]	; 0x74
 800493a:	f001 fde1 	bl	8006500 <__match>
 800493e:	b910      	cbnz	r0, 8004946 <_strtod_l+0x37e>
 8004940:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004942:	3301      	adds	r3, #1
 8004944:	931d      	str	r3, [sp, #116]	; 0x74
 8004946:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8004b74 <_strtod_l+0x5ac>
 800494a:	f04f 0a00 	mov.w	sl, #0
 800494e:	e67d      	b.n	800464c <_strtod_l+0x84>
 8004950:	4885      	ldr	r0, [pc, #532]	; (8004b68 <_strtod_l+0x5a0>)
 8004952:	f002 fd81 	bl	8007458 <nan>
 8004956:	ed8d 0b04 	vstr	d0, [sp, #16]
 800495a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800495e:	e675      	b.n	800464c <_strtod_l+0x84>
 8004960:	9b07      	ldr	r3, [sp, #28]
 8004962:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004964:	1af3      	subs	r3, r6, r3
 8004966:	2f00      	cmp	r7, #0
 8004968:	bf08      	it	eq
 800496a:	462f      	moveq	r7, r5
 800496c:	2d10      	cmp	r5, #16
 800496e:	9308      	str	r3, [sp, #32]
 8004970:	46a8      	mov	r8, r5
 8004972:	bfa8      	it	ge
 8004974:	f04f 0810 	movge.w	r8, #16
 8004978:	f7fb fdcc 	bl	8000514 <__aeabi_ui2d>
 800497c:	2d09      	cmp	r5, #9
 800497e:	4682      	mov	sl, r0
 8004980:	468b      	mov	fp, r1
 8004982:	dd13      	ble.n	80049ac <_strtod_l+0x3e4>
 8004984:	4b79      	ldr	r3, [pc, #484]	; (8004b6c <_strtod_l+0x5a4>)
 8004986:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800498a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800498e:	f7fb fe3b 	bl	8000608 <__aeabi_dmul>
 8004992:	4682      	mov	sl, r0
 8004994:	4648      	mov	r0, r9
 8004996:	468b      	mov	fp, r1
 8004998:	f7fb fdbc 	bl	8000514 <__aeabi_ui2d>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4650      	mov	r0, sl
 80049a2:	4659      	mov	r1, fp
 80049a4:	f7fb fc7a 	bl	800029c <__adddf3>
 80049a8:	4682      	mov	sl, r0
 80049aa:	468b      	mov	fp, r1
 80049ac:	2d0f      	cmp	r5, #15
 80049ae:	dc38      	bgt.n	8004a22 <_strtod_l+0x45a>
 80049b0:	9b08      	ldr	r3, [sp, #32]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f43f ae4a 	beq.w	800464c <_strtod_l+0x84>
 80049b8:	dd24      	ble.n	8004a04 <_strtod_l+0x43c>
 80049ba:	2b16      	cmp	r3, #22
 80049bc:	dc0b      	bgt.n	80049d6 <_strtod_l+0x40e>
 80049be:	4d6b      	ldr	r5, [pc, #428]	; (8004b6c <_strtod_l+0x5a4>)
 80049c0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80049c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80049c8:	4652      	mov	r2, sl
 80049ca:	465b      	mov	r3, fp
 80049cc:	f7fb fe1c 	bl	8000608 <__aeabi_dmul>
 80049d0:	4682      	mov	sl, r0
 80049d2:	468b      	mov	fp, r1
 80049d4:	e63a      	b.n	800464c <_strtod_l+0x84>
 80049d6:	9a08      	ldr	r2, [sp, #32]
 80049d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80049dc:	4293      	cmp	r3, r2
 80049de:	db20      	blt.n	8004a22 <_strtod_l+0x45a>
 80049e0:	4c62      	ldr	r4, [pc, #392]	; (8004b6c <_strtod_l+0x5a4>)
 80049e2:	f1c5 050f 	rsb	r5, r5, #15
 80049e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80049ea:	4652      	mov	r2, sl
 80049ec:	465b      	mov	r3, fp
 80049ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049f2:	f7fb fe09 	bl	8000608 <__aeabi_dmul>
 80049f6:	9b08      	ldr	r3, [sp, #32]
 80049f8:	1b5d      	subs	r5, r3, r5
 80049fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80049fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004a02:	e7e3      	b.n	80049cc <_strtod_l+0x404>
 8004a04:	9b08      	ldr	r3, [sp, #32]
 8004a06:	3316      	adds	r3, #22
 8004a08:	db0b      	blt.n	8004a22 <_strtod_l+0x45a>
 8004a0a:	9b07      	ldr	r3, [sp, #28]
 8004a0c:	4a57      	ldr	r2, [pc, #348]	; (8004b6c <_strtod_l+0x5a4>)
 8004a0e:	1b9e      	subs	r6, r3, r6
 8004a10:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004a14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a18:	4650      	mov	r0, sl
 8004a1a:	4659      	mov	r1, fp
 8004a1c:	f7fb ff1e 	bl	800085c <__aeabi_ddiv>
 8004a20:	e7d6      	b.n	80049d0 <_strtod_l+0x408>
 8004a22:	9b08      	ldr	r3, [sp, #32]
 8004a24:	eba5 0808 	sub.w	r8, r5, r8
 8004a28:	4498      	add	r8, r3
 8004a2a:	f1b8 0f00 	cmp.w	r8, #0
 8004a2e:	dd71      	ble.n	8004b14 <_strtod_l+0x54c>
 8004a30:	f018 030f 	ands.w	r3, r8, #15
 8004a34:	d00a      	beq.n	8004a4c <_strtod_l+0x484>
 8004a36:	494d      	ldr	r1, [pc, #308]	; (8004b6c <_strtod_l+0x5a4>)
 8004a38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004a3c:	4652      	mov	r2, sl
 8004a3e:	465b      	mov	r3, fp
 8004a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a44:	f7fb fde0 	bl	8000608 <__aeabi_dmul>
 8004a48:	4682      	mov	sl, r0
 8004a4a:	468b      	mov	fp, r1
 8004a4c:	f038 080f 	bics.w	r8, r8, #15
 8004a50:	d04d      	beq.n	8004aee <_strtod_l+0x526>
 8004a52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004a56:	dd22      	ble.n	8004a9e <_strtod_l+0x4d6>
 8004a58:	2500      	movs	r5, #0
 8004a5a:	462e      	mov	r6, r5
 8004a5c:	9509      	str	r5, [sp, #36]	; 0x24
 8004a5e:	9507      	str	r5, [sp, #28]
 8004a60:	2322      	movs	r3, #34	; 0x22
 8004a62:	f8df b110 	ldr.w	fp, [pc, #272]	; 8004b74 <_strtod_l+0x5ac>
 8004a66:	6023      	str	r3, [r4, #0]
 8004a68:	f04f 0a00 	mov.w	sl, #0
 8004a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f43f adec 	beq.w	800464c <_strtod_l+0x84>
 8004a74:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004a76:	4620      	mov	r0, r4
 8004a78:	f001 fe5e 	bl	8006738 <_Bfree>
 8004a7c:	9907      	ldr	r1, [sp, #28]
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f001 fe5a 	bl	8006738 <_Bfree>
 8004a84:	4631      	mov	r1, r6
 8004a86:	4620      	mov	r0, r4
 8004a88:	f001 fe56 	bl	8006738 <_Bfree>
 8004a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f001 fe52 	bl	8006738 <_Bfree>
 8004a94:	4629      	mov	r1, r5
 8004a96:	4620      	mov	r0, r4
 8004a98:	f001 fe4e 	bl	8006738 <_Bfree>
 8004a9c:	e5d6      	b.n	800464c <_strtod_l+0x84>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004aa4:	4650      	mov	r0, sl
 8004aa6:	4659      	mov	r1, fp
 8004aa8:	4699      	mov	r9, r3
 8004aaa:	f1b8 0f01 	cmp.w	r8, #1
 8004aae:	dc21      	bgt.n	8004af4 <_strtod_l+0x52c>
 8004ab0:	b10b      	cbz	r3, 8004ab6 <_strtod_l+0x4ee>
 8004ab2:	4682      	mov	sl, r0
 8004ab4:	468b      	mov	fp, r1
 8004ab6:	4b2e      	ldr	r3, [pc, #184]	; (8004b70 <_strtod_l+0x5a8>)
 8004ab8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004abc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004ac0:	4652      	mov	r2, sl
 8004ac2:	465b      	mov	r3, fp
 8004ac4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004ac8:	f7fb fd9e 	bl	8000608 <__aeabi_dmul>
 8004acc:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <_strtod_l+0x5ac>)
 8004ace:	460a      	mov	r2, r1
 8004ad0:	400b      	ands	r3, r1
 8004ad2:	4929      	ldr	r1, [pc, #164]	; (8004b78 <_strtod_l+0x5b0>)
 8004ad4:	428b      	cmp	r3, r1
 8004ad6:	4682      	mov	sl, r0
 8004ad8:	d8be      	bhi.n	8004a58 <_strtod_l+0x490>
 8004ada:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004ade:	428b      	cmp	r3, r1
 8004ae0:	bf86      	itte	hi
 8004ae2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004b7c <_strtod_l+0x5b4>
 8004ae6:	f04f 3aff 	movhi.w	sl, #4294967295
 8004aea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004aee:	2300      	movs	r3, #0
 8004af0:	9304      	str	r3, [sp, #16]
 8004af2:	e081      	b.n	8004bf8 <_strtod_l+0x630>
 8004af4:	f018 0f01 	tst.w	r8, #1
 8004af8:	d007      	beq.n	8004b0a <_strtod_l+0x542>
 8004afa:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <_strtod_l+0x5a8>)
 8004afc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	f7fb fd80 	bl	8000608 <__aeabi_dmul>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f109 0901 	add.w	r9, r9, #1
 8004b0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004b12:	e7ca      	b.n	8004aaa <_strtod_l+0x4e2>
 8004b14:	d0eb      	beq.n	8004aee <_strtod_l+0x526>
 8004b16:	f1c8 0800 	rsb	r8, r8, #0
 8004b1a:	f018 020f 	ands.w	r2, r8, #15
 8004b1e:	d00a      	beq.n	8004b36 <_strtod_l+0x56e>
 8004b20:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <_strtod_l+0x5a4>)
 8004b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b26:	4650      	mov	r0, sl
 8004b28:	4659      	mov	r1, fp
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f7fb fe95 	bl	800085c <__aeabi_ddiv>
 8004b32:	4682      	mov	sl, r0
 8004b34:	468b      	mov	fp, r1
 8004b36:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004b3a:	d0d8      	beq.n	8004aee <_strtod_l+0x526>
 8004b3c:	f1b8 0f1f 	cmp.w	r8, #31
 8004b40:	dd1e      	ble.n	8004b80 <_strtod_l+0x5b8>
 8004b42:	2500      	movs	r5, #0
 8004b44:	462e      	mov	r6, r5
 8004b46:	9509      	str	r5, [sp, #36]	; 0x24
 8004b48:	9507      	str	r5, [sp, #28]
 8004b4a:	2322      	movs	r3, #34	; 0x22
 8004b4c:	f04f 0a00 	mov.w	sl, #0
 8004b50:	f04f 0b00 	mov.w	fp, #0
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	e789      	b.n	8004a6c <_strtod_l+0x4a4>
 8004b58:	080080dd 	.word	0x080080dd
 8004b5c:	08008118 	.word	0x08008118
 8004b60:	080080d5 	.word	0x080080d5
 8004b64:	0800815b 	.word	0x0800815b
 8004b68:	08008418 	.word	0x08008418
 8004b6c:	080082f8 	.word	0x080082f8
 8004b70:	080082d0 	.word	0x080082d0
 8004b74:	7ff00000 	.word	0x7ff00000
 8004b78:	7ca00000 	.word	0x7ca00000
 8004b7c:	7fefffff 	.word	0x7fefffff
 8004b80:	f018 0310 	ands.w	r3, r8, #16
 8004b84:	bf18      	it	ne
 8004b86:	236a      	movne	r3, #106	; 0x6a
 8004b88:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8004f40 <_strtod_l+0x978>
 8004b8c:	9304      	str	r3, [sp, #16]
 8004b8e:	4650      	mov	r0, sl
 8004b90:	4659      	mov	r1, fp
 8004b92:	2300      	movs	r3, #0
 8004b94:	f018 0f01 	tst.w	r8, #1
 8004b98:	d004      	beq.n	8004ba4 <_strtod_l+0x5dc>
 8004b9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004b9e:	f7fb fd33 	bl	8000608 <__aeabi_dmul>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004ba8:	f109 0908 	add.w	r9, r9, #8
 8004bac:	d1f2      	bne.n	8004b94 <_strtod_l+0x5cc>
 8004bae:	b10b      	cbz	r3, 8004bb4 <_strtod_l+0x5ec>
 8004bb0:	4682      	mov	sl, r0
 8004bb2:	468b      	mov	fp, r1
 8004bb4:	9b04      	ldr	r3, [sp, #16]
 8004bb6:	b1bb      	cbz	r3, 8004be8 <_strtod_l+0x620>
 8004bb8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004bbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	4659      	mov	r1, fp
 8004bc4:	dd10      	ble.n	8004be8 <_strtod_l+0x620>
 8004bc6:	2b1f      	cmp	r3, #31
 8004bc8:	f340 8128 	ble.w	8004e1c <_strtod_l+0x854>
 8004bcc:	2b34      	cmp	r3, #52	; 0x34
 8004bce:	bfde      	ittt	le
 8004bd0:	3b20      	suble	r3, #32
 8004bd2:	f04f 32ff 	movle.w	r2, #4294967295
 8004bd6:	fa02 f303 	lslle.w	r3, r2, r3
 8004bda:	f04f 0a00 	mov.w	sl, #0
 8004bde:	bfcc      	ite	gt
 8004be0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004be4:	ea03 0b01 	andle.w	fp, r3, r1
 8004be8:	2200      	movs	r2, #0
 8004bea:	2300      	movs	r3, #0
 8004bec:	4650      	mov	r0, sl
 8004bee:	4659      	mov	r1, fp
 8004bf0:	f7fb ff72 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d1a4      	bne.n	8004b42 <_strtod_l+0x57a>
 8004bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004bfe:	462b      	mov	r3, r5
 8004c00:	463a      	mov	r2, r7
 8004c02:	4620      	mov	r0, r4
 8004c04:	f001 fe04 	bl	8006810 <__s2b>
 8004c08:	9009      	str	r0, [sp, #36]	; 0x24
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	f43f af24 	beq.w	8004a58 <_strtod_l+0x490>
 8004c10:	9b07      	ldr	r3, [sp, #28]
 8004c12:	1b9e      	subs	r6, r3, r6
 8004c14:	9b08      	ldr	r3, [sp, #32]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bfb4      	ite	lt
 8004c1a:	4633      	movlt	r3, r6
 8004c1c:	2300      	movge	r3, #0
 8004c1e:	9310      	str	r3, [sp, #64]	; 0x40
 8004c20:	9b08      	ldr	r3, [sp, #32]
 8004c22:	2500      	movs	r5, #0
 8004c24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004c28:	9318      	str	r3, [sp, #96]	; 0x60
 8004c2a:	462e      	mov	r6, r5
 8004c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c2e:	4620      	mov	r0, r4
 8004c30:	6859      	ldr	r1, [r3, #4]
 8004c32:	f001 fd41 	bl	80066b8 <_Balloc>
 8004c36:	9007      	str	r0, [sp, #28]
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f43f af11 	beq.w	8004a60 <_strtod_l+0x498>
 8004c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	3202      	adds	r2, #2
 8004c44:	f103 010c 	add.w	r1, r3, #12
 8004c48:	0092      	lsls	r2, r2, #2
 8004c4a:	300c      	adds	r0, #12
 8004c4c:	f001 fd26 	bl	800669c <memcpy>
 8004c50:	ec4b ab10 	vmov	d0, sl, fp
 8004c54:	aa20      	add	r2, sp, #128	; 0x80
 8004c56:	a91f      	add	r1, sp, #124	; 0x7c
 8004c58:	4620      	mov	r0, r4
 8004c5a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004c5e:	f002 f913 	bl	8006e88 <__d2b>
 8004c62:	901e      	str	r0, [sp, #120]	; 0x78
 8004c64:	2800      	cmp	r0, #0
 8004c66:	f43f aefb 	beq.w	8004a60 <_strtod_l+0x498>
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f001 fe69 	bl	8006944 <__i2b>
 8004c72:	4606      	mov	r6, r0
 8004c74:	2800      	cmp	r0, #0
 8004c76:	f43f aef3 	beq.w	8004a60 <_strtod_l+0x498>
 8004c7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c7c:	9904      	ldr	r1, [sp, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	bfab      	itete	ge
 8004c82:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8004c84:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8004c86:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8004c88:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8004c8c:	bfac      	ite	ge
 8004c8e:	eb03 0902 	addge.w	r9, r3, r2
 8004c92:	1ad7      	sublt	r7, r2, r3
 8004c94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c96:	eba3 0801 	sub.w	r8, r3, r1
 8004c9a:	4490      	add	r8, r2
 8004c9c:	4ba3      	ldr	r3, [pc, #652]	; (8004f2c <_strtod_l+0x964>)
 8004c9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ca2:	4598      	cmp	r8, r3
 8004ca4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004ca8:	f280 80cc 	bge.w	8004e44 <_strtod_l+0x87c>
 8004cac:	eba3 0308 	sub.w	r3, r3, r8
 8004cb0:	2b1f      	cmp	r3, #31
 8004cb2:	eba2 0203 	sub.w	r2, r2, r3
 8004cb6:	f04f 0101 	mov.w	r1, #1
 8004cba:	f300 80b6 	bgt.w	8004e2a <_strtod_l+0x862>
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	9311      	str	r3, [sp, #68]	; 0x44
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	930c      	str	r3, [sp, #48]	; 0x30
 8004cc8:	eb09 0802 	add.w	r8, r9, r2
 8004ccc:	9b04      	ldr	r3, [sp, #16]
 8004cce:	45c1      	cmp	r9, r8
 8004cd0:	4417      	add	r7, r2
 8004cd2:	441f      	add	r7, r3
 8004cd4:	464b      	mov	r3, r9
 8004cd6:	bfa8      	it	ge
 8004cd8:	4643      	movge	r3, r8
 8004cda:	42bb      	cmp	r3, r7
 8004cdc:	bfa8      	it	ge
 8004cde:	463b      	movge	r3, r7
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	bfc2      	ittt	gt
 8004ce4:	eba8 0803 	subgt.w	r8, r8, r3
 8004ce8:	1aff      	subgt	r7, r7, r3
 8004cea:	eba9 0903 	subgt.w	r9, r9, r3
 8004cee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	dd17      	ble.n	8004d24 <_strtod_l+0x75c>
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f001 fedf 	bl	8006abc <__pow5mult>
 8004cfe:	4606      	mov	r6, r0
 8004d00:	2800      	cmp	r0, #0
 8004d02:	f43f aead 	beq.w	8004a60 <_strtod_l+0x498>
 8004d06:	4601      	mov	r1, r0
 8004d08:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	f001 fe30 	bl	8006970 <__multiply>
 8004d10:	900f      	str	r0, [sp, #60]	; 0x3c
 8004d12:	2800      	cmp	r0, #0
 8004d14:	f43f aea4 	beq.w	8004a60 <_strtod_l+0x498>
 8004d18:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f001 fd0c 	bl	8006738 <_Bfree>
 8004d20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d22:	931e      	str	r3, [sp, #120]	; 0x78
 8004d24:	f1b8 0f00 	cmp.w	r8, #0
 8004d28:	f300 8091 	bgt.w	8004e4e <_strtod_l+0x886>
 8004d2c:	9b08      	ldr	r3, [sp, #32]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	dd08      	ble.n	8004d44 <_strtod_l+0x77c>
 8004d32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004d34:	9907      	ldr	r1, [sp, #28]
 8004d36:	4620      	mov	r0, r4
 8004d38:	f001 fec0 	bl	8006abc <__pow5mult>
 8004d3c:	9007      	str	r0, [sp, #28]
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	f43f ae8e 	beq.w	8004a60 <_strtod_l+0x498>
 8004d44:	2f00      	cmp	r7, #0
 8004d46:	dd08      	ble.n	8004d5a <_strtod_l+0x792>
 8004d48:	9907      	ldr	r1, [sp, #28]
 8004d4a:	463a      	mov	r2, r7
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f001 ff0f 	bl	8006b70 <__lshift>
 8004d52:	9007      	str	r0, [sp, #28]
 8004d54:	2800      	cmp	r0, #0
 8004d56:	f43f ae83 	beq.w	8004a60 <_strtod_l+0x498>
 8004d5a:	f1b9 0f00 	cmp.w	r9, #0
 8004d5e:	dd08      	ble.n	8004d72 <_strtod_l+0x7aa>
 8004d60:	4631      	mov	r1, r6
 8004d62:	464a      	mov	r2, r9
 8004d64:	4620      	mov	r0, r4
 8004d66:	f001 ff03 	bl	8006b70 <__lshift>
 8004d6a:	4606      	mov	r6, r0
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	f43f ae77 	beq.w	8004a60 <_strtod_l+0x498>
 8004d72:	9a07      	ldr	r2, [sp, #28]
 8004d74:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004d76:	4620      	mov	r0, r4
 8004d78:	f001 ff82 	bl	8006c80 <__mdiff>
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	f43f ae6e 	beq.w	8004a60 <_strtod_l+0x498>
 8004d84:	68c3      	ldr	r3, [r0, #12]
 8004d86:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60c3      	str	r3, [r0, #12]
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	f001 ff5b 	bl	8006c48 <__mcmp>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	da65      	bge.n	8004e62 <_strtod_l+0x89a>
 8004d96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d98:	ea53 030a 	orrs.w	r3, r3, sl
 8004d9c:	f040 8087 	bne.w	8004eae <_strtod_l+0x8e6>
 8004da0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f040 8082 	bne.w	8004eae <_strtod_l+0x8e6>
 8004daa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004dae:	0d1b      	lsrs	r3, r3, #20
 8004db0:	051b      	lsls	r3, r3, #20
 8004db2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004db6:	d97a      	bls.n	8004eae <_strtod_l+0x8e6>
 8004db8:	696b      	ldr	r3, [r5, #20]
 8004dba:	b913      	cbnz	r3, 8004dc2 <_strtod_l+0x7fa>
 8004dbc:	692b      	ldr	r3, [r5, #16]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	dd75      	ble.n	8004eae <_strtod_l+0x8e6>
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f001 fed2 	bl	8006b70 <__lshift>
 8004dcc:	4631      	mov	r1, r6
 8004dce:	4605      	mov	r5, r0
 8004dd0:	f001 ff3a 	bl	8006c48 <__mcmp>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	dd6a      	ble.n	8004eae <_strtod_l+0x8e6>
 8004dd8:	9904      	ldr	r1, [sp, #16]
 8004dda:	4a55      	ldr	r2, [pc, #340]	; (8004f30 <_strtod_l+0x968>)
 8004ddc:	465b      	mov	r3, fp
 8004dde:	2900      	cmp	r1, #0
 8004de0:	f000 8085 	beq.w	8004eee <_strtod_l+0x926>
 8004de4:	ea02 010b 	and.w	r1, r2, fp
 8004de8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004dec:	dc7f      	bgt.n	8004eee <_strtod_l+0x926>
 8004dee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004df2:	f77f aeaa 	ble.w	8004b4a <_strtod_l+0x582>
 8004df6:	4a4f      	ldr	r2, [pc, #316]	; (8004f34 <_strtod_l+0x96c>)
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8004dfe:	4650      	mov	r0, sl
 8004e00:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8004e04:	4659      	mov	r1, fp
 8004e06:	f7fb fbff 	bl	8000608 <__aeabi_dmul>
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4303      	orrs	r3, r0
 8004e0e:	bf08      	it	eq
 8004e10:	2322      	moveq	r3, #34	; 0x22
 8004e12:	4682      	mov	sl, r0
 8004e14:	468b      	mov	fp, r1
 8004e16:	bf08      	it	eq
 8004e18:	6023      	streq	r3, [r4, #0]
 8004e1a:	e62b      	b.n	8004a74 <_strtod_l+0x4ac>
 8004e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	ea03 0a0a 	and.w	sl, r3, sl
 8004e28:	e6de      	b.n	8004be8 <_strtod_l+0x620>
 8004e2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004e2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004e32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004e36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004e3a:	fa01 f308 	lsl.w	r3, r1, r8
 8004e3e:	930c      	str	r3, [sp, #48]	; 0x30
 8004e40:	9111      	str	r1, [sp, #68]	; 0x44
 8004e42:	e741      	b.n	8004cc8 <_strtod_l+0x700>
 8004e44:	2300      	movs	r3, #0
 8004e46:	930c      	str	r3, [sp, #48]	; 0x30
 8004e48:	2301      	movs	r3, #1
 8004e4a:	9311      	str	r3, [sp, #68]	; 0x44
 8004e4c:	e73c      	b.n	8004cc8 <_strtod_l+0x700>
 8004e4e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004e50:	4642      	mov	r2, r8
 8004e52:	4620      	mov	r0, r4
 8004e54:	f001 fe8c 	bl	8006b70 <__lshift>
 8004e58:	901e      	str	r0, [sp, #120]	; 0x78
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	f47f af66 	bne.w	8004d2c <_strtod_l+0x764>
 8004e60:	e5fe      	b.n	8004a60 <_strtod_l+0x498>
 8004e62:	465f      	mov	r7, fp
 8004e64:	d16e      	bne.n	8004f44 <_strtod_l+0x97c>
 8004e66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e6c:	b342      	cbz	r2, 8004ec0 <_strtod_l+0x8f8>
 8004e6e:	4a32      	ldr	r2, [pc, #200]	; (8004f38 <_strtod_l+0x970>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d128      	bne.n	8004ec6 <_strtod_l+0x8fe>
 8004e74:	9b04      	ldr	r3, [sp, #16]
 8004e76:	4650      	mov	r0, sl
 8004e78:	b1eb      	cbz	r3, 8004eb6 <_strtod_l+0x8ee>
 8004e7a:	4a2d      	ldr	r2, [pc, #180]	; (8004f30 <_strtod_l+0x968>)
 8004e7c:	403a      	ands	r2, r7
 8004e7e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004e82:	f04f 31ff 	mov.w	r1, #4294967295
 8004e86:	d819      	bhi.n	8004ebc <_strtod_l+0x8f4>
 8004e88:	0d12      	lsrs	r2, r2, #20
 8004e8a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	4298      	cmp	r0, r3
 8004e94:	d117      	bne.n	8004ec6 <_strtod_l+0x8fe>
 8004e96:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <_strtod_l+0x974>)
 8004e98:	429f      	cmp	r7, r3
 8004e9a:	d102      	bne.n	8004ea2 <_strtod_l+0x8da>
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	f43f addf 	beq.w	8004a60 <_strtod_l+0x498>
 8004ea2:	4b23      	ldr	r3, [pc, #140]	; (8004f30 <_strtod_l+0x968>)
 8004ea4:	403b      	ands	r3, r7
 8004ea6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004eaa:	f04f 0a00 	mov.w	sl, #0
 8004eae:	9b04      	ldr	r3, [sp, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1a0      	bne.n	8004df6 <_strtod_l+0x82e>
 8004eb4:	e5de      	b.n	8004a74 <_strtod_l+0x4ac>
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eba:	e7ea      	b.n	8004e92 <_strtod_l+0x8ca>
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	e7e8      	b.n	8004e92 <_strtod_l+0x8ca>
 8004ec0:	ea53 030a 	orrs.w	r3, r3, sl
 8004ec4:	d088      	beq.n	8004dd8 <_strtod_l+0x810>
 8004ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ec8:	b1db      	cbz	r3, 8004f02 <_strtod_l+0x93a>
 8004eca:	423b      	tst	r3, r7
 8004ecc:	d0ef      	beq.n	8004eae <_strtod_l+0x8e6>
 8004ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ed0:	9a04      	ldr	r2, [sp, #16]
 8004ed2:	4650      	mov	r0, sl
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	b1c3      	cbz	r3, 8004f0a <_strtod_l+0x942>
 8004ed8:	f7ff fb58 	bl	800458c <sulp>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ee4:	f7fb f9da 	bl	800029c <__adddf3>
 8004ee8:	4682      	mov	sl, r0
 8004eea:	468b      	mov	fp, r1
 8004eec:	e7df      	b.n	8004eae <_strtod_l+0x8e6>
 8004eee:	4013      	ands	r3, r2
 8004ef0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004ef4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004ef8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004efc:	f04f 3aff 	mov.w	sl, #4294967295
 8004f00:	e7d5      	b.n	8004eae <_strtod_l+0x8e6>
 8004f02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f04:	ea13 0f0a 	tst.w	r3, sl
 8004f08:	e7e0      	b.n	8004ecc <_strtod_l+0x904>
 8004f0a:	f7ff fb3f 	bl	800458c <sulp>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f16:	f7fb f9bf 	bl	8000298 <__aeabi_dsub>
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4682      	mov	sl, r0
 8004f20:	468b      	mov	fp, r1
 8004f22:	f7fb fdd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d0c1      	beq.n	8004eae <_strtod_l+0x8e6>
 8004f2a:	e60e      	b.n	8004b4a <_strtod_l+0x582>
 8004f2c:	fffffc02 	.word	0xfffffc02
 8004f30:	7ff00000 	.word	0x7ff00000
 8004f34:	39500000 	.word	0x39500000
 8004f38:	000fffff 	.word	0x000fffff
 8004f3c:	7fefffff 	.word	0x7fefffff
 8004f40:	08008130 	.word	0x08008130
 8004f44:	4631      	mov	r1, r6
 8004f46:	4628      	mov	r0, r5
 8004f48:	f001 fffa 	bl	8006f40 <__ratio>
 8004f4c:	ec59 8b10 	vmov	r8, r9, d0
 8004f50:	ee10 0a10 	vmov	r0, s0
 8004f54:	2200      	movs	r2, #0
 8004f56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	f7fb fdd0 	bl	8000b00 <__aeabi_dcmple>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d07c      	beq.n	800505e <_strtod_l+0xa96>
 8004f64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d04c      	beq.n	8005004 <_strtod_l+0xa3c>
 8004f6a:	4b95      	ldr	r3, [pc, #596]	; (80051c0 <_strtod_l+0xbf8>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004f72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80051c0 <_strtod_l+0xbf8>
 8004f76:	f04f 0800 	mov.w	r8, #0
 8004f7a:	4b92      	ldr	r3, [pc, #584]	; (80051c4 <_strtod_l+0xbfc>)
 8004f7c:	403b      	ands	r3, r7
 8004f7e:	9311      	str	r3, [sp, #68]	; 0x44
 8004f80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004f82:	4b91      	ldr	r3, [pc, #580]	; (80051c8 <_strtod_l+0xc00>)
 8004f84:	429a      	cmp	r2, r3
 8004f86:	f040 80b2 	bne.w	80050ee <_strtod_l+0xb26>
 8004f8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f92:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004f96:	ec4b ab10 	vmov	d0, sl, fp
 8004f9a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8004f9e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004fa2:	f001 fef5 	bl	8006d90 <__ulp>
 8004fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004faa:	ec53 2b10 	vmov	r2, r3, d0
 8004fae:	f7fb fb2b 	bl	8000608 <__aeabi_dmul>
 8004fb2:	4652      	mov	r2, sl
 8004fb4:	465b      	mov	r3, fp
 8004fb6:	f7fb f971 	bl	800029c <__adddf3>
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4981      	ldr	r1, [pc, #516]	; (80051c4 <_strtod_l+0xbfc>)
 8004fbe:	4a83      	ldr	r2, [pc, #524]	; (80051cc <_strtod_l+0xc04>)
 8004fc0:	4019      	ands	r1, r3
 8004fc2:	4291      	cmp	r1, r2
 8004fc4:	4682      	mov	sl, r0
 8004fc6:	d95e      	bls.n	8005086 <_strtod_l+0xabe>
 8004fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d103      	bne.n	8004fda <_strtod_l+0xa12>
 8004fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	f43f ad43 	beq.w	8004a60 <_strtod_l+0x498>
 8004fda:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80051d8 <_strtod_l+0xc10>
 8004fde:	f04f 3aff 	mov.w	sl, #4294967295
 8004fe2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f001 fba7 	bl	8006738 <_Bfree>
 8004fea:	9907      	ldr	r1, [sp, #28]
 8004fec:	4620      	mov	r0, r4
 8004fee:	f001 fba3 	bl	8006738 <_Bfree>
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f001 fb9f 	bl	8006738 <_Bfree>
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f001 fb9b 	bl	8006738 <_Bfree>
 8005002:	e613      	b.n	8004c2c <_strtod_l+0x664>
 8005004:	f1ba 0f00 	cmp.w	sl, #0
 8005008:	d11b      	bne.n	8005042 <_strtod_l+0xa7a>
 800500a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800500e:	b9f3      	cbnz	r3, 800504e <_strtod_l+0xa86>
 8005010:	4b6b      	ldr	r3, [pc, #428]	; (80051c0 <_strtod_l+0xbf8>)
 8005012:	2200      	movs	r2, #0
 8005014:	4640      	mov	r0, r8
 8005016:	4649      	mov	r1, r9
 8005018:	f7fb fd68 	bl	8000aec <__aeabi_dcmplt>
 800501c:	b9d0      	cbnz	r0, 8005054 <_strtod_l+0xa8c>
 800501e:	4640      	mov	r0, r8
 8005020:	4649      	mov	r1, r9
 8005022:	4b6b      	ldr	r3, [pc, #428]	; (80051d0 <_strtod_l+0xc08>)
 8005024:	2200      	movs	r2, #0
 8005026:	f7fb faef 	bl	8000608 <__aeabi_dmul>
 800502a:	4680      	mov	r8, r0
 800502c:	4689      	mov	r9, r1
 800502e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005032:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005036:	931b      	str	r3, [sp, #108]	; 0x6c
 8005038:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800503c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005040:	e79b      	b.n	8004f7a <_strtod_l+0x9b2>
 8005042:	f1ba 0f01 	cmp.w	sl, #1
 8005046:	d102      	bne.n	800504e <_strtod_l+0xa86>
 8005048:	2f00      	cmp	r7, #0
 800504a:	f43f ad7e 	beq.w	8004b4a <_strtod_l+0x582>
 800504e:	4b61      	ldr	r3, [pc, #388]	; (80051d4 <_strtod_l+0xc0c>)
 8005050:	2200      	movs	r2, #0
 8005052:	e78c      	b.n	8004f6e <_strtod_l+0x9a6>
 8005054:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80051d0 <_strtod_l+0xc08>
 8005058:	f04f 0800 	mov.w	r8, #0
 800505c:	e7e7      	b.n	800502e <_strtod_l+0xa66>
 800505e:	4b5c      	ldr	r3, [pc, #368]	; (80051d0 <_strtod_l+0xc08>)
 8005060:	4640      	mov	r0, r8
 8005062:	4649      	mov	r1, r9
 8005064:	2200      	movs	r2, #0
 8005066:	f7fb facf 	bl	8000608 <__aeabi_dmul>
 800506a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800506c:	4680      	mov	r8, r0
 800506e:	4689      	mov	r9, r1
 8005070:	b933      	cbnz	r3, 8005080 <_strtod_l+0xab8>
 8005072:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005076:	9012      	str	r0, [sp, #72]	; 0x48
 8005078:	9313      	str	r3, [sp, #76]	; 0x4c
 800507a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800507e:	e7dd      	b.n	800503c <_strtod_l+0xa74>
 8005080:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8005084:	e7f9      	b.n	800507a <_strtod_l+0xab2>
 8005086:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800508a:	9b04      	ldr	r3, [sp, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1a8      	bne.n	8004fe2 <_strtod_l+0xa1a>
 8005090:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005094:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005096:	0d1b      	lsrs	r3, r3, #20
 8005098:	051b      	lsls	r3, r3, #20
 800509a:	429a      	cmp	r2, r3
 800509c:	d1a1      	bne.n	8004fe2 <_strtod_l+0xa1a>
 800509e:	4640      	mov	r0, r8
 80050a0:	4649      	mov	r1, r9
 80050a2:	f7fb fe11 	bl	8000cc8 <__aeabi_d2lz>
 80050a6:	f7fb fa81 	bl	80005ac <__aeabi_l2d>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4640      	mov	r0, r8
 80050b0:	4649      	mov	r1, r9
 80050b2:	f7fb f8f1 	bl	8000298 <__aeabi_dsub>
 80050b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050bc:	ea43 030a 	orr.w	r3, r3, sl
 80050c0:	4313      	orrs	r3, r2
 80050c2:	4680      	mov	r8, r0
 80050c4:	4689      	mov	r9, r1
 80050c6:	d053      	beq.n	8005170 <_strtod_l+0xba8>
 80050c8:	a335      	add	r3, pc, #212	; (adr r3, 80051a0 <_strtod_l+0xbd8>)
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	f7fb fd0d 	bl	8000aec <__aeabi_dcmplt>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	f47f acce 	bne.w	8004a74 <_strtod_l+0x4ac>
 80050d8:	a333      	add	r3, pc, #204	; (adr r3, 80051a8 <_strtod_l+0xbe0>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	4640      	mov	r0, r8
 80050e0:	4649      	mov	r1, r9
 80050e2:	f7fb fd21 	bl	8000b28 <__aeabi_dcmpgt>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f43f af7b 	beq.w	8004fe2 <_strtod_l+0xa1a>
 80050ec:	e4c2      	b.n	8004a74 <_strtod_l+0x4ac>
 80050ee:	9b04      	ldr	r3, [sp, #16]
 80050f0:	b333      	cbz	r3, 8005140 <_strtod_l+0xb78>
 80050f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80050f8:	d822      	bhi.n	8005140 <_strtod_l+0xb78>
 80050fa:	a32d      	add	r3, pc, #180	; (adr r3, 80051b0 <_strtod_l+0xbe8>)
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	4640      	mov	r0, r8
 8005102:	4649      	mov	r1, r9
 8005104:	f7fb fcfc 	bl	8000b00 <__aeabi_dcmple>
 8005108:	b1a0      	cbz	r0, 8005134 <_strtod_l+0xb6c>
 800510a:	4649      	mov	r1, r9
 800510c:	4640      	mov	r0, r8
 800510e:	f7fb fd53 	bl	8000bb8 <__aeabi_d2uiz>
 8005112:	2801      	cmp	r0, #1
 8005114:	bf38      	it	cc
 8005116:	2001      	movcc	r0, #1
 8005118:	f7fb f9fc 	bl	8000514 <__aeabi_ui2d>
 800511c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800511e:	4680      	mov	r8, r0
 8005120:	4689      	mov	r9, r1
 8005122:	bb13      	cbnz	r3, 800516a <_strtod_l+0xba2>
 8005124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005128:	9014      	str	r0, [sp, #80]	; 0x50
 800512a:	9315      	str	r3, [sp, #84]	; 0x54
 800512c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005130:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005136:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005138:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	930d      	str	r3, [sp, #52]	; 0x34
 8005140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005144:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005148:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800514c:	f001 fe20 	bl	8006d90 <__ulp>
 8005150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005154:	ec53 2b10 	vmov	r2, r3, d0
 8005158:	f7fb fa56 	bl	8000608 <__aeabi_dmul>
 800515c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005160:	f7fb f89c 	bl	800029c <__adddf3>
 8005164:	4682      	mov	sl, r0
 8005166:	468b      	mov	fp, r1
 8005168:	e78f      	b.n	800508a <_strtod_l+0xac2>
 800516a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800516e:	e7dd      	b.n	800512c <_strtod_l+0xb64>
 8005170:	a311      	add	r3, pc, #68	; (adr r3, 80051b8 <_strtod_l+0xbf0>)
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f7fb fcb9 	bl	8000aec <__aeabi_dcmplt>
 800517a:	e7b4      	b.n	80050e6 <_strtod_l+0xb1e>
 800517c:	2300      	movs	r3, #0
 800517e:	930e      	str	r3, [sp, #56]	; 0x38
 8005180:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005182:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	f7ff ba65 	b.w	8004654 <_strtod_l+0x8c>
 800518a:	2b65      	cmp	r3, #101	; 0x65
 800518c:	f43f ab5d 	beq.w	800484a <_strtod_l+0x282>
 8005190:	2b45      	cmp	r3, #69	; 0x45
 8005192:	f43f ab5a 	beq.w	800484a <_strtod_l+0x282>
 8005196:	2201      	movs	r2, #1
 8005198:	f7ff bb92 	b.w	80048c0 <_strtod_l+0x2f8>
 800519c:	f3af 8000 	nop.w
 80051a0:	94a03595 	.word	0x94a03595
 80051a4:	3fdfffff 	.word	0x3fdfffff
 80051a8:	35afe535 	.word	0x35afe535
 80051ac:	3fe00000 	.word	0x3fe00000
 80051b0:	ffc00000 	.word	0xffc00000
 80051b4:	41dfffff 	.word	0x41dfffff
 80051b8:	94a03595 	.word	0x94a03595
 80051bc:	3fcfffff 	.word	0x3fcfffff
 80051c0:	3ff00000 	.word	0x3ff00000
 80051c4:	7ff00000 	.word	0x7ff00000
 80051c8:	7fe00000 	.word	0x7fe00000
 80051cc:	7c9fffff 	.word	0x7c9fffff
 80051d0:	3fe00000 	.word	0x3fe00000
 80051d4:	bff00000 	.word	0xbff00000
 80051d8:	7fefffff 	.word	0x7fefffff

080051dc <strtof>:
 80051dc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80051e0:	4e26      	ldr	r6, [pc, #152]	; (800527c <strtof+0xa0>)
 80051e2:	4b27      	ldr	r3, [pc, #156]	; (8005280 <strtof+0xa4>)
 80051e4:	460a      	mov	r2, r1
 80051e6:	ed2d 8b02 	vpush	{d8}
 80051ea:	4601      	mov	r1, r0
 80051ec:	6830      	ldr	r0, [r6, #0]
 80051ee:	f7ff f9eb 	bl	80045c8 <_strtod_l>
 80051f2:	ec55 4b10 	vmov	r4, r5, d0
 80051f6:	ee10 2a10 	vmov	r2, s0
 80051fa:	ee10 0a10 	vmov	r0, s0
 80051fe:	462b      	mov	r3, r5
 8005200:	4629      	mov	r1, r5
 8005202:	f7fb fc9b 	bl	8000b3c <__aeabi_dcmpun>
 8005206:	b190      	cbz	r0, 800522e <strtof+0x52>
 8005208:	2d00      	cmp	r5, #0
 800520a:	481e      	ldr	r0, [pc, #120]	; (8005284 <strtof+0xa8>)
 800520c:	da09      	bge.n	8005222 <strtof+0x46>
 800520e:	f002 f93b 	bl	8007488 <nanf>
 8005212:	eeb1 8a40 	vneg.f32	s16, s0
 8005216:	eeb0 0a48 	vmov.f32	s0, s16
 800521a:	ecbd 8b02 	vpop	{d8}
 800521e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005222:	ecbd 8b02 	vpop	{d8}
 8005226:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 800522a:	f002 b92d 	b.w	8007488 <nanf>
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fb fce1 	bl	8000bf8 <__aeabi_d2f>
 8005236:	ee08 0a10 	vmov	s16, r0
 800523a:	eddf 7a13 	vldr	s15, [pc, #76]	; 8005288 <strtof+0xac>
 800523e:	eeb0 7ac8 	vabs.f32	s14, s16
 8005242:	eeb4 7a67 	vcmp.f32	s14, s15
 8005246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524a:	dde4      	ble.n	8005216 <strtof+0x3a>
 800524c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8005250:	4b0e      	ldr	r3, [pc, #56]	; (800528c <strtof+0xb0>)
 8005252:	f04f 32ff 	mov.w	r2, #4294967295
 8005256:	4620      	mov	r0, r4
 8005258:	4649      	mov	r1, r9
 800525a:	f7fb fc6f 	bl	8000b3c <__aeabi_dcmpun>
 800525e:	b940      	cbnz	r0, 8005272 <strtof+0x96>
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <strtof+0xb0>)
 8005262:	f04f 32ff 	mov.w	r2, #4294967295
 8005266:	4620      	mov	r0, r4
 8005268:	4649      	mov	r1, r9
 800526a:	f7fb fc49 	bl	8000b00 <__aeabi_dcmple>
 800526e:	2800      	cmp	r0, #0
 8005270:	d0d1      	beq.n	8005216 <strtof+0x3a>
 8005272:	6833      	ldr	r3, [r6, #0]
 8005274:	2222      	movs	r2, #34	; 0x22
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	e7cd      	b.n	8005216 <strtof+0x3a>
 800527a:	bf00      	nop
 800527c:	20000054 	.word	0x20000054
 8005280:	200000bc 	.word	0x200000bc
 8005284:	08008418 	.word	0x08008418
 8005288:	7f7fffff 	.word	0x7f7fffff
 800528c:	7fefffff 	.word	0x7fefffff

08005290 <quorem>:
 8005290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	6903      	ldr	r3, [r0, #16]
 8005296:	690c      	ldr	r4, [r1, #16]
 8005298:	42a3      	cmp	r3, r4
 800529a:	4607      	mov	r7, r0
 800529c:	f2c0 8081 	blt.w	80053a2 <quorem+0x112>
 80052a0:	3c01      	subs	r4, #1
 80052a2:	f101 0814 	add.w	r8, r1, #20
 80052a6:	f100 0514 	add.w	r5, r0, #20
 80052aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052b8:	3301      	adds	r3, #1
 80052ba:	429a      	cmp	r2, r3
 80052bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80052c8:	d331      	bcc.n	800532e <quorem+0x9e>
 80052ca:	f04f 0e00 	mov.w	lr, #0
 80052ce:	4640      	mov	r0, r8
 80052d0:	46ac      	mov	ip, r5
 80052d2:	46f2      	mov	sl, lr
 80052d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80052d8:	b293      	uxth	r3, r2
 80052da:	fb06 e303 	mla	r3, r6, r3, lr
 80052de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	ebaa 0303 	sub.w	r3, sl, r3
 80052e8:	0c12      	lsrs	r2, r2, #16
 80052ea:	f8dc a000 	ldr.w	sl, [ip]
 80052ee:	fb06 e202 	mla	r2, r6, r2, lr
 80052f2:	fa13 f38a 	uxtah	r3, r3, sl
 80052f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052fa:	fa1f fa82 	uxth.w	sl, r2
 80052fe:	f8dc 2000 	ldr.w	r2, [ip]
 8005302:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005306:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800530a:	b29b      	uxth	r3, r3
 800530c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005310:	4581      	cmp	r9, r0
 8005312:	f84c 3b04 	str.w	r3, [ip], #4
 8005316:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800531a:	d2db      	bcs.n	80052d4 <quorem+0x44>
 800531c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005320:	b92b      	cbnz	r3, 800532e <quorem+0x9e>
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	3b04      	subs	r3, #4
 8005326:	429d      	cmp	r5, r3
 8005328:	461a      	mov	r2, r3
 800532a:	d32e      	bcc.n	800538a <quorem+0xfa>
 800532c:	613c      	str	r4, [r7, #16]
 800532e:	4638      	mov	r0, r7
 8005330:	f001 fc8a 	bl	8006c48 <__mcmp>
 8005334:	2800      	cmp	r0, #0
 8005336:	db24      	blt.n	8005382 <quorem+0xf2>
 8005338:	3601      	adds	r6, #1
 800533a:	4628      	mov	r0, r5
 800533c:	f04f 0c00 	mov.w	ip, #0
 8005340:	f858 2b04 	ldr.w	r2, [r8], #4
 8005344:	f8d0 e000 	ldr.w	lr, [r0]
 8005348:	b293      	uxth	r3, r2
 800534a:	ebac 0303 	sub.w	r3, ip, r3
 800534e:	0c12      	lsrs	r2, r2, #16
 8005350:	fa13 f38e 	uxtah	r3, r3, lr
 8005354:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800535c:	b29b      	uxth	r3, r3
 800535e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005362:	45c1      	cmp	r9, r8
 8005364:	f840 3b04 	str.w	r3, [r0], #4
 8005368:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800536c:	d2e8      	bcs.n	8005340 <quorem+0xb0>
 800536e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005376:	b922      	cbnz	r2, 8005382 <quorem+0xf2>
 8005378:	3b04      	subs	r3, #4
 800537a:	429d      	cmp	r5, r3
 800537c:	461a      	mov	r2, r3
 800537e:	d30a      	bcc.n	8005396 <quorem+0x106>
 8005380:	613c      	str	r4, [r7, #16]
 8005382:	4630      	mov	r0, r6
 8005384:	b003      	add	sp, #12
 8005386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	3b04      	subs	r3, #4
 800538e:	2a00      	cmp	r2, #0
 8005390:	d1cc      	bne.n	800532c <quorem+0x9c>
 8005392:	3c01      	subs	r4, #1
 8005394:	e7c7      	b.n	8005326 <quorem+0x96>
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	3b04      	subs	r3, #4
 800539a:	2a00      	cmp	r2, #0
 800539c:	d1f0      	bne.n	8005380 <quorem+0xf0>
 800539e:	3c01      	subs	r4, #1
 80053a0:	e7eb      	b.n	800537a <quorem+0xea>
 80053a2:	2000      	movs	r0, #0
 80053a4:	e7ee      	b.n	8005384 <quorem+0xf4>
	...

080053a8 <_dtoa_r>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	ed2d 8b02 	vpush	{d8}
 80053b0:	ec57 6b10 	vmov	r6, r7, d0
 80053b4:	b095      	sub	sp, #84	; 0x54
 80053b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053bc:	9105      	str	r1, [sp, #20]
 80053be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80053c2:	4604      	mov	r4, r0
 80053c4:	9209      	str	r2, [sp, #36]	; 0x24
 80053c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80053c8:	b975      	cbnz	r5, 80053e8 <_dtoa_r+0x40>
 80053ca:	2010      	movs	r0, #16
 80053cc:	f001 f94c 	bl	8006668 <malloc>
 80053d0:	4602      	mov	r2, r0
 80053d2:	6260      	str	r0, [r4, #36]	; 0x24
 80053d4:	b920      	cbnz	r0, 80053e0 <_dtoa_r+0x38>
 80053d6:	4bb2      	ldr	r3, [pc, #712]	; (80056a0 <_dtoa_r+0x2f8>)
 80053d8:	21ea      	movs	r1, #234	; 0xea
 80053da:	48b2      	ldr	r0, [pc, #712]	; (80056a4 <_dtoa_r+0x2fc>)
 80053dc:	f002 f868 	bl	80074b0 <__assert_func>
 80053e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053e4:	6005      	str	r5, [r0, #0]
 80053e6:	60c5      	str	r5, [r0, #12]
 80053e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053ea:	6819      	ldr	r1, [r3, #0]
 80053ec:	b151      	cbz	r1, 8005404 <_dtoa_r+0x5c>
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	604a      	str	r2, [r1, #4]
 80053f2:	2301      	movs	r3, #1
 80053f4:	4093      	lsls	r3, r2
 80053f6:	608b      	str	r3, [r1, #8]
 80053f8:	4620      	mov	r0, r4
 80053fa:	f001 f99d 	bl	8006738 <_Bfree>
 80053fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	1e3b      	subs	r3, r7, #0
 8005406:	bfb9      	ittee	lt
 8005408:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800540c:	9303      	strlt	r3, [sp, #12]
 800540e:	2300      	movge	r3, #0
 8005410:	f8c8 3000 	strge.w	r3, [r8]
 8005414:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005418:	4ba3      	ldr	r3, [pc, #652]	; (80056a8 <_dtoa_r+0x300>)
 800541a:	bfbc      	itt	lt
 800541c:	2201      	movlt	r2, #1
 800541e:	f8c8 2000 	strlt.w	r2, [r8]
 8005422:	ea33 0309 	bics.w	r3, r3, r9
 8005426:	d11b      	bne.n	8005460 <_dtoa_r+0xb8>
 8005428:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800542a:	f242 730f 	movw	r3, #9999	; 0x270f
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005434:	4333      	orrs	r3, r6
 8005436:	f000 857a 	beq.w	8005f2e <_dtoa_r+0xb86>
 800543a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800543c:	b963      	cbnz	r3, 8005458 <_dtoa_r+0xb0>
 800543e:	4b9b      	ldr	r3, [pc, #620]	; (80056ac <_dtoa_r+0x304>)
 8005440:	e024      	b.n	800548c <_dtoa_r+0xe4>
 8005442:	4b9b      	ldr	r3, [pc, #620]	; (80056b0 <_dtoa_r+0x308>)
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	9800      	ldr	r0, [sp, #0]
 800544e:	b015      	add	sp, #84	; 0x54
 8005450:	ecbd 8b02 	vpop	{d8}
 8005454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005458:	4b94      	ldr	r3, [pc, #592]	; (80056ac <_dtoa_r+0x304>)
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	3303      	adds	r3, #3
 800545e:	e7f3      	b.n	8005448 <_dtoa_r+0xa0>
 8005460:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	ec51 0b17 	vmov	r0, r1, d7
 800546a:	2300      	movs	r3, #0
 800546c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005470:	f7fb fb32 	bl	8000ad8 <__aeabi_dcmpeq>
 8005474:	4680      	mov	r8, r0
 8005476:	b158      	cbz	r0, 8005490 <_dtoa_r+0xe8>
 8005478:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800547a:	2301      	movs	r3, #1
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8551 	beq.w	8005f28 <_dtoa_r+0xb80>
 8005486:	488b      	ldr	r0, [pc, #556]	; (80056b4 <_dtoa_r+0x30c>)
 8005488:	6018      	str	r0, [r3, #0]
 800548a:	1e43      	subs	r3, r0, #1
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	e7dd      	b.n	800544c <_dtoa_r+0xa4>
 8005490:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005494:	aa12      	add	r2, sp, #72	; 0x48
 8005496:	a913      	add	r1, sp, #76	; 0x4c
 8005498:	4620      	mov	r0, r4
 800549a:	f001 fcf5 	bl	8006e88 <__d2b>
 800549e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80054a2:	4683      	mov	fp, r0
 80054a4:	2d00      	cmp	r5, #0
 80054a6:	d07c      	beq.n	80055a2 <_dtoa_r+0x1fa>
 80054a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80054ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80054b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80054ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80054be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054c2:	4b7d      	ldr	r3, [pc, #500]	; (80056b8 <_dtoa_r+0x310>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	4630      	mov	r0, r6
 80054c8:	4639      	mov	r1, r7
 80054ca:	f7fa fee5 	bl	8000298 <__aeabi_dsub>
 80054ce:	a36e      	add	r3, pc, #440	; (adr r3, 8005688 <_dtoa_r+0x2e0>)
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	f7fb f898 	bl	8000608 <__aeabi_dmul>
 80054d8:	a36d      	add	r3, pc, #436	; (adr r3, 8005690 <_dtoa_r+0x2e8>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fa fedd 	bl	800029c <__adddf3>
 80054e2:	4606      	mov	r6, r0
 80054e4:	4628      	mov	r0, r5
 80054e6:	460f      	mov	r7, r1
 80054e8:	f7fb f824 	bl	8000534 <__aeabi_i2d>
 80054ec:	a36a      	add	r3, pc, #424	; (adr r3, 8005698 <_dtoa_r+0x2f0>)
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	f7fb f889 	bl	8000608 <__aeabi_dmul>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4630      	mov	r0, r6
 80054fc:	4639      	mov	r1, r7
 80054fe:	f7fa fecd 	bl	800029c <__adddf3>
 8005502:	4606      	mov	r6, r0
 8005504:	460f      	mov	r7, r1
 8005506:	f7fb fb2f 	bl	8000b68 <__aeabi_d2iz>
 800550a:	2200      	movs	r2, #0
 800550c:	4682      	mov	sl, r0
 800550e:	2300      	movs	r3, #0
 8005510:	4630      	mov	r0, r6
 8005512:	4639      	mov	r1, r7
 8005514:	f7fb faea 	bl	8000aec <__aeabi_dcmplt>
 8005518:	b148      	cbz	r0, 800552e <_dtoa_r+0x186>
 800551a:	4650      	mov	r0, sl
 800551c:	f7fb f80a 	bl	8000534 <__aeabi_i2d>
 8005520:	4632      	mov	r2, r6
 8005522:	463b      	mov	r3, r7
 8005524:	f7fb fad8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005528:	b908      	cbnz	r0, 800552e <_dtoa_r+0x186>
 800552a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800552e:	f1ba 0f16 	cmp.w	sl, #22
 8005532:	d854      	bhi.n	80055de <_dtoa_r+0x236>
 8005534:	4b61      	ldr	r3, [pc, #388]	; (80056bc <_dtoa_r+0x314>)
 8005536:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005542:	f7fb fad3 	bl	8000aec <__aeabi_dcmplt>
 8005546:	2800      	cmp	r0, #0
 8005548:	d04b      	beq.n	80055e2 <_dtoa_r+0x23a>
 800554a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800554e:	2300      	movs	r3, #0
 8005550:	930e      	str	r3, [sp, #56]	; 0x38
 8005552:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005554:	1b5d      	subs	r5, r3, r5
 8005556:	1e6b      	subs	r3, r5, #1
 8005558:	9304      	str	r3, [sp, #16]
 800555a:	bf43      	ittte	mi
 800555c:	2300      	movmi	r3, #0
 800555e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005562:	9304      	strmi	r3, [sp, #16]
 8005564:	f04f 0800 	movpl.w	r8, #0
 8005568:	f1ba 0f00 	cmp.w	sl, #0
 800556c:	db3b      	blt.n	80055e6 <_dtoa_r+0x23e>
 800556e:	9b04      	ldr	r3, [sp, #16]
 8005570:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005574:	4453      	add	r3, sl
 8005576:	9304      	str	r3, [sp, #16]
 8005578:	2300      	movs	r3, #0
 800557a:	9306      	str	r3, [sp, #24]
 800557c:	9b05      	ldr	r3, [sp, #20]
 800557e:	2b09      	cmp	r3, #9
 8005580:	d869      	bhi.n	8005656 <_dtoa_r+0x2ae>
 8005582:	2b05      	cmp	r3, #5
 8005584:	bfc4      	itt	gt
 8005586:	3b04      	subgt	r3, #4
 8005588:	9305      	strgt	r3, [sp, #20]
 800558a:	9b05      	ldr	r3, [sp, #20]
 800558c:	f1a3 0302 	sub.w	r3, r3, #2
 8005590:	bfcc      	ite	gt
 8005592:	2500      	movgt	r5, #0
 8005594:	2501      	movle	r5, #1
 8005596:	2b03      	cmp	r3, #3
 8005598:	d869      	bhi.n	800566e <_dtoa_r+0x2c6>
 800559a:	e8df f003 	tbb	[pc, r3]
 800559e:	4e2c      	.short	0x4e2c
 80055a0:	5a4c      	.short	0x5a4c
 80055a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80055a6:	441d      	add	r5, r3
 80055a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	bfc1      	itttt	gt
 80055b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80055b8:	fa09 f303 	lslgt.w	r3, r9, r3
 80055bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80055c0:	bfda      	itte	le
 80055c2:	f1c3 0320 	rsble	r3, r3, #32
 80055c6:	fa06 f003 	lslle.w	r0, r6, r3
 80055ca:	4318      	orrgt	r0, r3
 80055cc:	f7fa ffa2 	bl	8000514 <__aeabi_ui2d>
 80055d0:	2301      	movs	r3, #1
 80055d2:	4606      	mov	r6, r0
 80055d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80055d8:	3d01      	subs	r5, #1
 80055da:	9310      	str	r3, [sp, #64]	; 0x40
 80055dc:	e771      	b.n	80054c2 <_dtoa_r+0x11a>
 80055de:	2301      	movs	r3, #1
 80055e0:	e7b6      	b.n	8005550 <_dtoa_r+0x1a8>
 80055e2:	900e      	str	r0, [sp, #56]	; 0x38
 80055e4:	e7b5      	b.n	8005552 <_dtoa_r+0x1aa>
 80055e6:	f1ca 0300 	rsb	r3, sl, #0
 80055ea:	9306      	str	r3, [sp, #24]
 80055ec:	2300      	movs	r3, #0
 80055ee:	eba8 080a 	sub.w	r8, r8, sl
 80055f2:	930d      	str	r3, [sp, #52]	; 0x34
 80055f4:	e7c2      	b.n	800557c <_dtoa_r+0x1d4>
 80055f6:	2300      	movs	r3, #0
 80055f8:	9308      	str	r3, [sp, #32]
 80055fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	dc39      	bgt.n	8005674 <_dtoa_r+0x2cc>
 8005600:	f04f 0901 	mov.w	r9, #1
 8005604:	f8cd 9004 	str.w	r9, [sp, #4]
 8005608:	464b      	mov	r3, r9
 800560a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800560e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005610:	2200      	movs	r2, #0
 8005612:	6042      	str	r2, [r0, #4]
 8005614:	2204      	movs	r2, #4
 8005616:	f102 0614 	add.w	r6, r2, #20
 800561a:	429e      	cmp	r6, r3
 800561c:	6841      	ldr	r1, [r0, #4]
 800561e:	d92f      	bls.n	8005680 <_dtoa_r+0x2d8>
 8005620:	4620      	mov	r0, r4
 8005622:	f001 f849 	bl	80066b8 <_Balloc>
 8005626:	9000      	str	r0, [sp, #0]
 8005628:	2800      	cmp	r0, #0
 800562a:	d14b      	bne.n	80056c4 <_dtoa_r+0x31c>
 800562c:	4b24      	ldr	r3, [pc, #144]	; (80056c0 <_dtoa_r+0x318>)
 800562e:	4602      	mov	r2, r0
 8005630:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005634:	e6d1      	b.n	80053da <_dtoa_r+0x32>
 8005636:	2301      	movs	r3, #1
 8005638:	e7de      	b.n	80055f8 <_dtoa_r+0x250>
 800563a:	2300      	movs	r3, #0
 800563c:	9308      	str	r3, [sp, #32]
 800563e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005640:	eb0a 0903 	add.w	r9, sl, r3
 8005644:	f109 0301 	add.w	r3, r9, #1
 8005648:	2b01      	cmp	r3, #1
 800564a:	9301      	str	r3, [sp, #4]
 800564c:	bfb8      	it	lt
 800564e:	2301      	movlt	r3, #1
 8005650:	e7dd      	b.n	800560e <_dtoa_r+0x266>
 8005652:	2301      	movs	r3, #1
 8005654:	e7f2      	b.n	800563c <_dtoa_r+0x294>
 8005656:	2501      	movs	r5, #1
 8005658:	2300      	movs	r3, #0
 800565a:	9305      	str	r3, [sp, #20]
 800565c:	9508      	str	r5, [sp, #32]
 800565e:	f04f 39ff 	mov.w	r9, #4294967295
 8005662:	2200      	movs	r2, #0
 8005664:	f8cd 9004 	str.w	r9, [sp, #4]
 8005668:	2312      	movs	r3, #18
 800566a:	9209      	str	r2, [sp, #36]	; 0x24
 800566c:	e7cf      	b.n	800560e <_dtoa_r+0x266>
 800566e:	2301      	movs	r3, #1
 8005670:	9308      	str	r3, [sp, #32]
 8005672:	e7f4      	b.n	800565e <_dtoa_r+0x2b6>
 8005674:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005678:	f8cd 9004 	str.w	r9, [sp, #4]
 800567c:	464b      	mov	r3, r9
 800567e:	e7c6      	b.n	800560e <_dtoa_r+0x266>
 8005680:	3101      	adds	r1, #1
 8005682:	6041      	str	r1, [r0, #4]
 8005684:	0052      	lsls	r2, r2, #1
 8005686:	e7c6      	b.n	8005616 <_dtoa_r+0x26e>
 8005688:	636f4361 	.word	0x636f4361
 800568c:	3fd287a7 	.word	0x3fd287a7
 8005690:	8b60c8b3 	.word	0x8b60c8b3
 8005694:	3fc68a28 	.word	0x3fc68a28
 8005698:	509f79fb 	.word	0x509f79fb
 800569c:	3fd34413 	.word	0x3fd34413
 80056a0:	08008165 	.word	0x08008165
 80056a4:	0800817c 	.word	0x0800817c
 80056a8:	7ff00000 	.word	0x7ff00000
 80056ac:	08008161 	.word	0x08008161
 80056b0:	08008158 	.word	0x08008158
 80056b4:	080080e1 	.word	0x080080e1
 80056b8:	3ff80000 	.word	0x3ff80000
 80056bc:	080082f8 	.word	0x080082f8
 80056c0:	080081db 	.word	0x080081db
 80056c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056c6:	9a00      	ldr	r2, [sp, #0]
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	9b01      	ldr	r3, [sp, #4]
 80056cc:	2b0e      	cmp	r3, #14
 80056ce:	f200 80ad 	bhi.w	800582c <_dtoa_r+0x484>
 80056d2:	2d00      	cmp	r5, #0
 80056d4:	f000 80aa 	beq.w	800582c <_dtoa_r+0x484>
 80056d8:	f1ba 0f00 	cmp.w	sl, #0
 80056dc:	dd36      	ble.n	800574c <_dtoa_r+0x3a4>
 80056de:	4ac3      	ldr	r2, [pc, #780]	; (80059ec <_dtoa_r+0x644>)
 80056e0:	f00a 030f 	and.w	r3, sl, #15
 80056e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056e8:	ed93 7b00 	vldr	d7, [r3]
 80056ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80056f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80056f4:	eeb0 8a47 	vmov.f32	s16, s14
 80056f8:	eef0 8a67 	vmov.f32	s17, s15
 80056fc:	d016      	beq.n	800572c <_dtoa_r+0x384>
 80056fe:	4bbc      	ldr	r3, [pc, #752]	; (80059f0 <_dtoa_r+0x648>)
 8005700:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005708:	f7fb f8a8 	bl	800085c <__aeabi_ddiv>
 800570c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005710:	f007 070f 	and.w	r7, r7, #15
 8005714:	2503      	movs	r5, #3
 8005716:	4eb6      	ldr	r6, [pc, #728]	; (80059f0 <_dtoa_r+0x648>)
 8005718:	b957      	cbnz	r7, 8005730 <_dtoa_r+0x388>
 800571a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800571e:	ec53 2b18 	vmov	r2, r3, d8
 8005722:	f7fb f89b 	bl	800085c <__aeabi_ddiv>
 8005726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800572a:	e029      	b.n	8005780 <_dtoa_r+0x3d8>
 800572c:	2502      	movs	r5, #2
 800572e:	e7f2      	b.n	8005716 <_dtoa_r+0x36e>
 8005730:	07f9      	lsls	r1, r7, #31
 8005732:	d508      	bpl.n	8005746 <_dtoa_r+0x39e>
 8005734:	ec51 0b18 	vmov	r0, r1, d8
 8005738:	e9d6 2300 	ldrd	r2, r3, [r6]
 800573c:	f7fa ff64 	bl	8000608 <__aeabi_dmul>
 8005740:	ec41 0b18 	vmov	d8, r0, r1
 8005744:	3501      	adds	r5, #1
 8005746:	107f      	asrs	r7, r7, #1
 8005748:	3608      	adds	r6, #8
 800574a:	e7e5      	b.n	8005718 <_dtoa_r+0x370>
 800574c:	f000 80a6 	beq.w	800589c <_dtoa_r+0x4f4>
 8005750:	f1ca 0600 	rsb	r6, sl, #0
 8005754:	4ba5      	ldr	r3, [pc, #660]	; (80059ec <_dtoa_r+0x644>)
 8005756:	4fa6      	ldr	r7, [pc, #664]	; (80059f0 <_dtoa_r+0x648>)
 8005758:	f006 020f 	and.w	r2, r6, #15
 800575c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005768:	f7fa ff4e 	bl	8000608 <__aeabi_dmul>
 800576c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005770:	1136      	asrs	r6, r6, #4
 8005772:	2300      	movs	r3, #0
 8005774:	2502      	movs	r5, #2
 8005776:	2e00      	cmp	r6, #0
 8005778:	f040 8085 	bne.w	8005886 <_dtoa_r+0x4de>
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1d2      	bne.n	8005726 <_dtoa_r+0x37e>
 8005780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 808c 	beq.w	80058a0 <_dtoa_r+0x4f8>
 8005788:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800578c:	4b99      	ldr	r3, [pc, #612]	; (80059f4 <_dtoa_r+0x64c>)
 800578e:	2200      	movs	r2, #0
 8005790:	4630      	mov	r0, r6
 8005792:	4639      	mov	r1, r7
 8005794:	f7fb f9aa 	bl	8000aec <__aeabi_dcmplt>
 8005798:	2800      	cmp	r0, #0
 800579a:	f000 8081 	beq.w	80058a0 <_dtoa_r+0x4f8>
 800579e:	9b01      	ldr	r3, [sp, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d07d      	beq.n	80058a0 <_dtoa_r+0x4f8>
 80057a4:	f1b9 0f00 	cmp.w	r9, #0
 80057a8:	dd3c      	ble.n	8005824 <_dtoa_r+0x47c>
 80057aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80057ae:	9307      	str	r3, [sp, #28]
 80057b0:	2200      	movs	r2, #0
 80057b2:	4b91      	ldr	r3, [pc, #580]	; (80059f8 <_dtoa_r+0x650>)
 80057b4:	4630      	mov	r0, r6
 80057b6:	4639      	mov	r1, r7
 80057b8:	f7fa ff26 	bl	8000608 <__aeabi_dmul>
 80057bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057c0:	3501      	adds	r5, #1
 80057c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80057c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057ca:	4628      	mov	r0, r5
 80057cc:	f7fa feb2 	bl	8000534 <__aeabi_i2d>
 80057d0:	4632      	mov	r2, r6
 80057d2:	463b      	mov	r3, r7
 80057d4:	f7fa ff18 	bl	8000608 <__aeabi_dmul>
 80057d8:	4b88      	ldr	r3, [pc, #544]	; (80059fc <_dtoa_r+0x654>)
 80057da:	2200      	movs	r2, #0
 80057dc:	f7fa fd5e 	bl	800029c <__adddf3>
 80057e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80057e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057e8:	9303      	str	r3, [sp, #12]
 80057ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d15c      	bne.n	80058aa <_dtoa_r+0x502>
 80057f0:	4b83      	ldr	r3, [pc, #524]	; (8005a00 <_dtoa_r+0x658>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	4630      	mov	r0, r6
 80057f6:	4639      	mov	r1, r7
 80057f8:	f7fa fd4e 	bl	8000298 <__aeabi_dsub>
 80057fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005800:	4606      	mov	r6, r0
 8005802:	460f      	mov	r7, r1
 8005804:	f7fb f990 	bl	8000b28 <__aeabi_dcmpgt>
 8005808:	2800      	cmp	r0, #0
 800580a:	f040 8296 	bne.w	8005d3a <_dtoa_r+0x992>
 800580e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005812:	4630      	mov	r0, r6
 8005814:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005818:	4639      	mov	r1, r7
 800581a:	f7fb f967 	bl	8000aec <__aeabi_dcmplt>
 800581e:	2800      	cmp	r0, #0
 8005820:	f040 8288 	bne.w	8005d34 <_dtoa_r+0x98c>
 8005824:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005828:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800582c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800582e:	2b00      	cmp	r3, #0
 8005830:	f2c0 8158 	blt.w	8005ae4 <_dtoa_r+0x73c>
 8005834:	f1ba 0f0e 	cmp.w	sl, #14
 8005838:	f300 8154 	bgt.w	8005ae4 <_dtoa_r+0x73c>
 800583c:	4b6b      	ldr	r3, [pc, #428]	; (80059ec <_dtoa_r+0x644>)
 800583e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005842:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	f280 80e3 	bge.w	8005a14 <_dtoa_r+0x66c>
 800584e:	9b01      	ldr	r3, [sp, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	f300 80df 	bgt.w	8005a14 <_dtoa_r+0x66c>
 8005856:	f040 826d 	bne.w	8005d34 <_dtoa_r+0x98c>
 800585a:	4b69      	ldr	r3, [pc, #420]	; (8005a00 <_dtoa_r+0x658>)
 800585c:	2200      	movs	r2, #0
 800585e:	4640      	mov	r0, r8
 8005860:	4649      	mov	r1, r9
 8005862:	f7fa fed1 	bl	8000608 <__aeabi_dmul>
 8005866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800586a:	f7fb f953 	bl	8000b14 <__aeabi_dcmpge>
 800586e:	9e01      	ldr	r6, [sp, #4]
 8005870:	4637      	mov	r7, r6
 8005872:	2800      	cmp	r0, #0
 8005874:	f040 8243 	bne.w	8005cfe <_dtoa_r+0x956>
 8005878:	9d00      	ldr	r5, [sp, #0]
 800587a:	2331      	movs	r3, #49	; 0x31
 800587c:	f805 3b01 	strb.w	r3, [r5], #1
 8005880:	f10a 0a01 	add.w	sl, sl, #1
 8005884:	e23f      	b.n	8005d06 <_dtoa_r+0x95e>
 8005886:	07f2      	lsls	r2, r6, #31
 8005888:	d505      	bpl.n	8005896 <_dtoa_r+0x4ee>
 800588a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800588e:	f7fa febb 	bl	8000608 <__aeabi_dmul>
 8005892:	3501      	adds	r5, #1
 8005894:	2301      	movs	r3, #1
 8005896:	1076      	asrs	r6, r6, #1
 8005898:	3708      	adds	r7, #8
 800589a:	e76c      	b.n	8005776 <_dtoa_r+0x3ce>
 800589c:	2502      	movs	r5, #2
 800589e:	e76f      	b.n	8005780 <_dtoa_r+0x3d8>
 80058a0:	9b01      	ldr	r3, [sp, #4]
 80058a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80058a6:	930c      	str	r3, [sp, #48]	; 0x30
 80058a8:	e78d      	b.n	80057c6 <_dtoa_r+0x41e>
 80058aa:	9900      	ldr	r1, [sp, #0]
 80058ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80058ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058b0:	4b4e      	ldr	r3, [pc, #312]	; (80059ec <_dtoa_r+0x644>)
 80058b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058b6:	4401      	add	r1, r0
 80058b8:	9102      	str	r1, [sp, #8]
 80058ba:	9908      	ldr	r1, [sp, #32]
 80058bc:	eeb0 8a47 	vmov.f32	s16, s14
 80058c0:	eef0 8a67 	vmov.f32	s17, s15
 80058c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d045      	beq.n	800595c <_dtoa_r+0x5b4>
 80058d0:	494c      	ldr	r1, [pc, #304]	; (8005a04 <_dtoa_r+0x65c>)
 80058d2:	2000      	movs	r0, #0
 80058d4:	f7fa ffc2 	bl	800085c <__aeabi_ddiv>
 80058d8:	ec53 2b18 	vmov	r2, r3, d8
 80058dc:	f7fa fcdc 	bl	8000298 <__aeabi_dsub>
 80058e0:	9d00      	ldr	r5, [sp, #0]
 80058e2:	ec41 0b18 	vmov	d8, r0, r1
 80058e6:	4639      	mov	r1, r7
 80058e8:	4630      	mov	r0, r6
 80058ea:	f7fb f93d 	bl	8000b68 <__aeabi_d2iz>
 80058ee:	900c      	str	r0, [sp, #48]	; 0x30
 80058f0:	f7fa fe20 	bl	8000534 <__aeabi_i2d>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4630      	mov	r0, r6
 80058fa:	4639      	mov	r1, r7
 80058fc:	f7fa fccc 	bl	8000298 <__aeabi_dsub>
 8005900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005902:	3330      	adds	r3, #48	; 0x30
 8005904:	f805 3b01 	strb.w	r3, [r5], #1
 8005908:	ec53 2b18 	vmov	r2, r3, d8
 800590c:	4606      	mov	r6, r0
 800590e:	460f      	mov	r7, r1
 8005910:	f7fb f8ec 	bl	8000aec <__aeabi_dcmplt>
 8005914:	2800      	cmp	r0, #0
 8005916:	d165      	bne.n	80059e4 <_dtoa_r+0x63c>
 8005918:	4632      	mov	r2, r6
 800591a:	463b      	mov	r3, r7
 800591c:	4935      	ldr	r1, [pc, #212]	; (80059f4 <_dtoa_r+0x64c>)
 800591e:	2000      	movs	r0, #0
 8005920:	f7fa fcba 	bl	8000298 <__aeabi_dsub>
 8005924:	ec53 2b18 	vmov	r2, r3, d8
 8005928:	f7fb f8e0 	bl	8000aec <__aeabi_dcmplt>
 800592c:	2800      	cmp	r0, #0
 800592e:	f040 80b9 	bne.w	8005aa4 <_dtoa_r+0x6fc>
 8005932:	9b02      	ldr	r3, [sp, #8]
 8005934:	429d      	cmp	r5, r3
 8005936:	f43f af75 	beq.w	8005824 <_dtoa_r+0x47c>
 800593a:	4b2f      	ldr	r3, [pc, #188]	; (80059f8 <_dtoa_r+0x650>)
 800593c:	ec51 0b18 	vmov	r0, r1, d8
 8005940:	2200      	movs	r2, #0
 8005942:	f7fa fe61 	bl	8000608 <__aeabi_dmul>
 8005946:	4b2c      	ldr	r3, [pc, #176]	; (80059f8 <_dtoa_r+0x650>)
 8005948:	ec41 0b18 	vmov	d8, r0, r1
 800594c:	2200      	movs	r2, #0
 800594e:	4630      	mov	r0, r6
 8005950:	4639      	mov	r1, r7
 8005952:	f7fa fe59 	bl	8000608 <__aeabi_dmul>
 8005956:	4606      	mov	r6, r0
 8005958:	460f      	mov	r7, r1
 800595a:	e7c4      	b.n	80058e6 <_dtoa_r+0x53e>
 800595c:	ec51 0b17 	vmov	r0, r1, d7
 8005960:	f7fa fe52 	bl	8000608 <__aeabi_dmul>
 8005964:	9b02      	ldr	r3, [sp, #8]
 8005966:	9d00      	ldr	r5, [sp, #0]
 8005968:	930c      	str	r3, [sp, #48]	; 0x30
 800596a:	ec41 0b18 	vmov	d8, r0, r1
 800596e:	4639      	mov	r1, r7
 8005970:	4630      	mov	r0, r6
 8005972:	f7fb f8f9 	bl	8000b68 <__aeabi_d2iz>
 8005976:	9011      	str	r0, [sp, #68]	; 0x44
 8005978:	f7fa fddc 	bl	8000534 <__aeabi_i2d>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4630      	mov	r0, r6
 8005982:	4639      	mov	r1, r7
 8005984:	f7fa fc88 	bl	8000298 <__aeabi_dsub>
 8005988:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800598a:	3330      	adds	r3, #48	; 0x30
 800598c:	f805 3b01 	strb.w	r3, [r5], #1
 8005990:	9b02      	ldr	r3, [sp, #8]
 8005992:	429d      	cmp	r5, r3
 8005994:	4606      	mov	r6, r0
 8005996:	460f      	mov	r7, r1
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	d134      	bne.n	8005a08 <_dtoa_r+0x660>
 800599e:	4b19      	ldr	r3, [pc, #100]	; (8005a04 <_dtoa_r+0x65c>)
 80059a0:	ec51 0b18 	vmov	r0, r1, d8
 80059a4:	f7fa fc7a 	bl	800029c <__adddf3>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4630      	mov	r0, r6
 80059ae:	4639      	mov	r1, r7
 80059b0:	f7fb f8ba 	bl	8000b28 <__aeabi_dcmpgt>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d175      	bne.n	8005aa4 <_dtoa_r+0x6fc>
 80059b8:	ec53 2b18 	vmov	r2, r3, d8
 80059bc:	4911      	ldr	r1, [pc, #68]	; (8005a04 <_dtoa_r+0x65c>)
 80059be:	2000      	movs	r0, #0
 80059c0:	f7fa fc6a 	bl	8000298 <__aeabi_dsub>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4630      	mov	r0, r6
 80059ca:	4639      	mov	r1, r7
 80059cc:	f7fb f88e 	bl	8000aec <__aeabi_dcmplt>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	f43f af27 	beq.w	8005824 <_dtoa_r+0x47c>
 80059d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059d8:	1e6b      	subs	r3, r5, #1
 80059da:	930c      	str	r3, [sp, #48]	; 0x30
 80059dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059e0:	2b30      	cmp	r3, #48	; 0x30
 80059e2:	d0f8      	beq.n	80059d6 <_dtoa_r+0x62e>
 80059e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80059e8:	e04a      	b.n	8005a80 <_dtoa_r+0x6d8>
 80059ea:	bf00      	nop
 80059ec:	080082f8 	.word	0x080082f8
 80059f0:	080082d0 	.word	0x080082d0
 80059f4:	3ff00000 	.word	0x3ff00000
 80059f8:	40240000 	.word	0x40240000
 80059fc:	401c0000 	.word	0x401c0000
 8005a00:	40140000 	.word	0x40140000
 8005a04:	3fe00000 	.word	0x3fe00000
 8005a08:	4baf      	ldr	r3, [pc, #700]	; (8005cc8 <_dtoa_r+0x920>)
 8005a0a:	f7fa fdfd 	bl	8000608 <__aeabi_dmul>
 8005a0e:	4606      	mov	r6, r0
 8005a10:	460f      	mov	r7, r1
 8005a12:	e7ac      	b.n	800596e <_dtoa_r+0x5c6>
 8005a14:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a18:	9d00      	ldr	r5, [sp, #0]
 8005a1a:	4642      	mov	r2, r8
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	4630      	mov	r0, r6
 8005a20:	4639      	mov	r1, r7
 8005a22:	f7fa ff1b 	bl	800085c <__aeabi_ddiv>
 8005a26:	f7fb f89f 	bl	8000b68 <__aeabi_d2iz>
 8005a2a:	9002      	str	r0, [sp, #8]
 8005a2c:	f7fa fd82 	bl	8000534 <__aeabi_i2d>
 8005a30:	4642      	mov	r2, r8
 8005a32:	464b      	mov	r3, r9
 8005a34:	f7fa fde8 	bl	8000608 <__aeabi_dmul>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	4639      	mov	r1, r7
 8005a40:	f7fa fc2a 	bl	8000298 <__aeabi_dsub>
 8005a44:	9e02      	ldr	r6, [sp, #8]
 8005a46:	9f01      	ldr	r7, [sp, #4]
 8005a48:	3630      	adds	r6, #48	; 0x30
 8005a4a:	f805 6b01 	strb.w	r6, [r5], #1
 8005a4e:	9e00      	ldr	r6, [sp, #0]
 8005a50:	1bae      	subs	r6, r5, r6
 8005a52:	42b7      	cmp	r7, r6
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	d137      	bne.n	8005aca <_dtoa_r+0x722>
 8005a5a:	f7fa fc1f 	bl	800029c <__adddf3>
 8005a5e:	4642      	mov	r2, r8
 8005a60:	464b      	mov	r3, r9
 8005a62:	4606      	mov	r6, r0
 8005a64:	460f      	mov	r7, r1
 8005a66:	f7fb f85f 	bl	8000b28 <__aeabi_dcmpgt>
 8005a6a:	b9c8      	cbnz	r0, 8005aa0 <_dtoa_r+0x6f8>
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	464b      	mov	r3, r9
 8005a70:	4630      	mov	r0, r6
 8005a72:	4639      	mov	r1, r7
 8005a74:	f7fb f830 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a78:	b110      	cbz	r0, 8005a80 <_dtoa_r+0x6d8>
 8005a7a:	9b02      	ldr	r3, [sp, #8]
 8005a7c:	07d9      	lsls	r1, r3, #31
 8005a7e:	d40f      	bmi.n	8005aa0 <_dtoa_r+0x6f8>
 8005a80:	4620      	mov	r0, r4
 8005a82:	4659      	mov	r1, fp
 8005a84:	f000 fe58 	bl	8006738 <_Bfree>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	702b      	strb	r3, [r5, #0]
 8005a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a8e:	f10a 0001 	add.w	r0, sl, #1
 8005a92:	6018      	str	r0, [r3, #0]
 8005a94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f43f acd8 	beq.w	800544c <_dtoa_r+0xa4>
 8005a9c:	601d      	str	r5, [r3, #0]
 8005a9e:	e4d5      	b.n	800544c <_dtoa_r+0xa4>
 8005aa0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	461d      	mov	r5, r3
 8005aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005aac:	2a39      	cmp	r2, #57	; 0x39
 8005aae:	d108      	bne.n	8005ac2 <_dtoa_r+0x71a>
 8005ab0:	9a00      	ldr	r2, [sp, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d1f7      	bne.n	8005aa6 <_dtoa_r+0x6fe>
 8005ab6:	9a07      	ldr	r2, [sp, #28]
 8005ab8:	9900      	ldr	r1, [sp, #0]
 8005aba:	3201      	adds	r2, #1
 8005abc:	9207      	str	r2, [sp, #28]
 8005abe:	2230      	movs	r2, #48	; 0x30
 8005ac0:	700a      	strb	r2, [r1, #0]
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	3201      	adds	r2, #1
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	e78c      	b.n	80059e4 <_dtoa_r+0x63c>
 8005aca:	4b7f      	ldr	r3, [pc, #508]	; (8005cc8 <_dtoa_r+0x920>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	f7fa fd9b 	bl	8000608 <__aeabi_dmul>
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	4606      	mov	r6, r0
 8005ad8:	460f      	mov	r7, r1
 8005ada:	f7fa fffd 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d09b      	beq.n	8005a1a <_dtoa_r+0x672>
 8005ae2:	e7cd      	b.n	8005a80 <_dtoa_r+0x6d8>
 8005ae4:	9a08      	ldr	r2, [sp, #32]
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	f000 80c4 	beq.w	8005c74 <_dtoa_r+0x8cc>
 8005aec:	9a05      	ldr	r2, [sp, #20]
 8005aee:	2a01      	cmp	r2, #1
 8005af0:	f300 80a8 	bgt.w	8005c44 <_dtoa_r+0x89c>
 8005af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005af6:	2a00      	cmp	r2, #0
 8005af8:	f000 80a0 	beq.w	8005c3c <_dtoa_r+0x894>
 8005afc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b00:	9e06      	ldr	r6, [sp, #24]
 8005b02:	4645      	mov	r5, r8
 8005b04:	9a04      	ldr	r2, [sp, #16]
 8005b06:	2101      	movs	r1, #1
 8005b08:	441a      	add	r2, r3
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	4498      	add	r8, r3
 8005b0e:	9204      	str	r2, [sp, #16]
 8005b10:	f000 ff18 	bl	8006944 <__i2b>
 8005b14:	4607      	mov	r7, r0
 8005b16:	2d00      	cmp	r5, #0
 8005b18:	dd0b      	ble.n	8005b32 <_dtoa_r+0x78a>
 8005b1a:	9b04      	ldr	r3, [sp, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	dd08      	ble.n	8005b32 <_dtoa_r+0x78a>
 8005b20:	42ab      	cmp	r3, r5
 8005b22:	9a04      	ldr	r2, [sp, #16]
 8005b24:	bfa8      	it	ge
 8005b26:	462b      	movge	r3, r5
 8005b28:	eba8 0803 	sub.w	r8, r8, r3
 8005b2c:	1aed      	subs	r5, r5, r3
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	9b06      	ldr	r3, [sp, #24]
 8005b34:	b1fb      	cbz	r3, 8005b76 <_dtoa_r+0x7ce>
 8005b36:	9b08      	ldr	r3, [sp, #32]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 809f 	beq.w	8005c7c <_dtoa_r+0x8d4>
 8005b3e:	2e00      	cmp	r6, #0
 8005b40:	dd11      	ble.n	8005b66 <_dtoa_r+0x7be>
 8005b42:	4639      	mov	r1, r7
 8005b44:	4632      	mov	r2, r6
 8005b46:	4620      	mov	r0, r4
 8005b48:	f000 ffb8 	bl	8006abc <__pow5mult>
 8005b4c:	465a      	mov	r2, fp
 8005b4e:	4601      	mov	r1, r0
 8005b50:	4607      	mov	r7, r0
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 ff0c 	bl	8006970 <__multiply>
 8005b58:	4659      	mov	r1, fp
 8005b5a:	9007      	str	r0, [sp, #28]
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 fdeb 	bl	8006738 <_Bfree>
 8005b62:	9b07      	ldr	r3, [sp, #28]
 8005b64:	469b      	mov	fp, r3
 8005b66:	9b06      	ldr	r3, [sp, #24]
 8005b68:	1b9a      	subs	r2, r3, r6
 8005b6a:	d004      	beq.n	8005b76 <_dtoa_r+0x7ce>
 8005b6c:	4659      	mov	r1, fp
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f000 ffa4 	bl	8006abc <__pow5mult>
 8005b74:	4683      	mov	fp, r0
 8005b76:	2101      	movs	r1, #1
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f000 fee3 	bl	8006944 <__i2b>
 8005b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	4606      	mov	r6, r0
 8005b84:	dd7c      	ble.n	8005c80 <_dtoa_r+0x8d8>
 8005b86:	461a      	mov	r2, r3
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f000 ff96 	bl	8006abc <__pow5mult>
 8005b90:	9b05      	ldr	r3, [sp, #20]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	4606      	mov	r6, r0
 8005b96:	dd76      	ble.n	8005c86 <_dtoa_r+0x8de>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9306      	str	r3, [sp, #24]
 8005b9c:	6933      	ldr	r3, [r6, #16]
 8005b9e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ba2:	6918      	ldr	r0, [r3, #16]
 8005ba4:	f000 fe7e 	bl	80068a4 <__hi0bits>
 8005ba8:	f1c0 0020 	rsb	r0, r0, #32
 8005bac:	9b04      	ldr	r3, [sp, #16]
 8005bae:	4418      	add	r0, r3
 8005bb0:	f010 001f 	ands.w	r0, r0, #31
 8005bb4:	f000 8086 	beq.w	8005cc4 <_dtoa_r+0x91c>
 8005bb8:	f1c0 0320 	rsb	r3, r0, #32
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	dd7f      	ble.n	8005cc0 <_dtoa_r+0x918>
 8005bc0:	f1c0 001c 	rsb	r0, r0, #28
 8005bc4:	9b04      	ldr	r3, [sp, #16]
 8005bc6:	4403      	add	r3, r0
 8005bc8:	4480      	add	r8, r0
 8005bca:	4405      	add	r5, r0
 8005bcc:	9304      	str	r3, [sp, #16]
 8005bce:	f1b8 0f00 	cmp.w	r8, #0
 8005bd2:	dd05      	ble.n	8005be0 <_dtoa_r+0x838>
 8005bd4:	4659      	mov	r1, fp
 8005bd6:	4642      	mov	r2, r8
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f000 ffc9 	bl	8006b70 <__lshift>
 8005bde:	4683      	mov	fp, r0
 8005be0:	9b04      	ldr	r3, [sp, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dd05      	ble.n	8005bf2 <_dtoa_r+0x84a>
 8005be6:	4631      	mov	r1, r6
 8005be8:	461a      	mov	r2, r3
 8005bea:	4620      	mov	r0, r4
 8005bec:	f000 ffc0 	bl	8006b70 <__lshift>
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d069      	beq.n	8005ccc <_dtoa_r+0x924>
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4658      	mov	r0, fp
 8005bfc:	f001 f824 	bl	8006c48 <__mcmp>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	da63      	bge.n	8005ccc <_dtoa_r+0x924>
 8005c04:	2300      	movs	r3, #0
 8005c06:	4659      	mov	r1, fp
 8005c08:	220a      	movs	r2, #10
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f000 fdb6 	bl	800677c <__multadd>
 8005c10:	9b08      	ldr	r3, [sp, #32]
 8005c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c16:	4683      	mov	fp, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 818f 	beq.w	8005f3c <_dtoa_r+0xb94>
 8005c1e:	4639      	mov	r1, r7
 8005c20:	2300      	movs	r3, #0
 8005c22:	220a      	movs	r2, #10
 8005c24:	4620      	mov	r0, r4
 8005c26:	f000 fda9 	bl	800677c <__multadd>
 8005c2a:	f1b9 0f00 	cmp.w	r9, #0
 8005c2e:	4607      	mov	r7, r0
 8005c30:	f300 808e 	bgt.w	8005d50 <_dtoa_r+0x9a8>
 8005c34:	9b05      	ldr	r3, [sp, #20]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	dc50      	bgt.n	8005cdc <_dtoa_r+0x934>
 8005c3a:	e089      	b.n	8005d50 <_dtoa_r+0x9a8>
 8005c3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c42:	e75d      	b.n	8005b00 <_dtoa_r+0x758>
 8005c44:	9b01      	ldr	r3, [sp, #4]
 8005c46:	1e5e      	subs	r6, r3, #1
 8005c48:	9b06      	ldr	r3, [sp, #24]
 8005c4a:	42b3      	cmp	r3, r6
 8005c4c:	bfbf      	itttt	lt
 8005c4e:	9b06      	ldrlt	r3, [sp, #24]
 8005c50:	9606      	strlt	r6, [sp, #24]
 8005c52:	1af2      	sublt	r2, r6, r3
 8005c54:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005c56:	bfb6      	itet	lt
 8005c58:	189b      	addlt	r3, r3, r2
 8005c5a:	1b9e      	subge	r6, r3, r6
 8005c5c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005c5e:	9b01      	ldr	r3, [sp, #4]
 8005c60:	bfb8      	it	lt
 8005c62:	2600      	movlt	r6, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bfb5      	itete	lt
 8005c68:	eba8 0503 	sublt.w	r5, r8, r3
 8005c6c:	9b01      	ldrge	r3, [sp, #4]
 8005c6e:	2300      	movlt	r3, #0
 8005c70:	4645      	movge	r5, r8
 8005c72:	e747      	b.n	8005b04 <_dtoa_r+0x75c>
 8005c74:	9e06      	ldr	r6, [sp, #24]
 8005c76:	9f08      	ldr	r7, [sp, #32]
 8005c78:	4645      	mov	r5, r8
 8005c7a:	e74c      	b.n	8005b16 <_dtoa_r+0x76e>
 8005c7c:	9a06      	ldr	r2, [sp, #24]
 8005c7e:	e775      	b.n	8005b6c <_dtoa_r+0x7c4>
 8005c80:	9b05      	ldr	r3, [sp, #20]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	dc18      	bgt.n	8005cb8 <_dtoa_r+0x910>
 8005c86:	9b02      	ldr	r3, [sp, #8]
 8005c88:	b9b3      	cbnz	r3, 8005cb8 <_dtoa_r+0x910>
 8005c8a:	9b03      	ldr	r3, [sp, #12]
 8005c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c90:	b9a3      	cbnz	r3, 8005cbc <_dtoa_r+0x914>
 8005c92:	9b03      	ldr	r3, [sp, #12]
 8005c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c98:	0d1b      	lsrs	r3, r3, #20
 8005c9a:	051b      	lsls	r3, r3, #20
 8005c9c:	b12b      	cbz	r3, 8005caa <_dtoa_r+0x902>
 8005c9e:	9b04      	ldr	r3, [sp, #16]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	9304      	str	r3, [sp, #16]
 8005ca4:	f108 0801 	add.w	r8, r8, #1
 8005ca8:	2301      	movs	r3, #1
 8005caa:	9306      	str	r3, [sp, #24]
 8005cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f47f af74 	bne.w	8005b9c <_dtoa_r+0x7f4>
 8005cb4:	2001      	movs	r0, #1
 8005cb6:	e779      	b.n	8005bac <_dtoa_r+0x804>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e7f6      	b.n	8005caa <_dtoa_r+0x902>
 8005cbc:	9b02      	ldr	r3, [sp, #8]
 8005cbe:	e7f4      	b.n	8005caa <_dtoa_r+0x902>
 8005cc0:	d085      	beq.n	8005bce <_dtoa_r+0x826>
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	301c      	adds	r0, #28
 8005cc6:	e77d      	b.n	8005bc4 <_dtoa_r+0x81c>
 8005cc8:	40240000 	.word	0x40240000
 8005ccc:	9b01      	ldr	r3, [sp, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dc38      	bgt.n	8005d44 <_dtoa_r+0x99c>
 8005cd2:	9b05      	ldr	r3, [sp, #20]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	dd35      	ble.n	8005d44 <_dtoa_r+0x99c>
 8005cd8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005cdc:	f1b9 0f00 	cmp.w	r9, #0
 8005ce0:	d10d      	bne.n	8005cfe <_dtoa_r+0x956>
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	2205      	movs	r2, #5
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 fd47 	bl	800677c <__multadd>
 8005cee:	4601      	mov	r1, r0
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	4658      	mov	r0, fp
 8005cf4:	f000 ffa8 	bl	8006c48 <__mcmp>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	f73f adbd 	bgt.w	8005878 <_dtoa_r+0x4d0>
 8005cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d00:	9d00      	ldr	r5, [sp, #0]
 8005d02:	ea6f 0a03 	mvn.w	sl, r3
 8005d06:	f04f 0800 	mov.w	r8, #0
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f000 fd13 	bl	8006738 <_Bfree>
 8005d12:	2f00      	cmp	r7, #0
 8005d14:	f43f aeb4 	beq.w	8005a80 <_dtoa_r+0x6d8>
 8005d18:	f1b8 0f00 	cmp.w	r8, #0
 8005d1c:	d005      	beq.n	8005d2a <_dtoa_r+0x982>
 8005d1e:	45b8      	cmp	r8, r7
 8005d20:	d003      	beq.n	8005d2a <_dtoa_r+0x982>
 8005d22:	4641      	mov	r1, r8
 8005d24:	4620      	mov	r0, r4
 8005d26:	f000 fd07 	bl	8006738 <_Bfree>
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f000 fd03 	bl	8006738 <_Bfree>
 8005d32:	e6a5      	b.n	8005a80 <_dtoa_r+0x6d8>
 8005d34:	2600      	movs	r6, #0
 8005d36:	4637      	mov	r7, r6
 8005d38:	e7e1      	b.n	8005cfe <_dtoa_r+0x956>
 8005d3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005d3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005d40:	4637      	mov	r7, r6
 8005d42:	e599      	b.n	8005878 <_dtoa_r+0x4d0>
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80fd 	beq.w	8005f4a <_dtoa_r+0xba2>
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	dd05      	ble.n	8005d60 <_dtoa_r+0x9b8>
 8005d54:	4639      	mov	r1, r7
 8005d56:	462a      	mov	r2, r5
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 ff09 	bl	8006b70 <__lshift>
 8005d5e:	4607      	mov	r7, r0
 8005d60:	9b06      	ldr	r3, [sp, #24]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d05c      	beq.n	8005e20 <_dtoa_r+0xa78>
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f000 fca5 	bl	80066b8 <_Balloc>
 8005d6e:	4605      	mov	r5, r0
 8005d70:	b928      	cbnz	r0, 8005d7e <_dtoa_r+0x9d6>
 8005d72:	4b80      	ldr	r3, [pc, #512]	; (8005f74 <_dtoa_r+0xbcc>)
 8005d74:	4602      	mov	r2, r0
 8005d76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d7a:	f7ff bb2e 	b.w	80053da <_dtoa_r+0x32>
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	3202      	adds	r2, #2
 8005d82:	0092      	lsls	r2, r2, #2
 8005d84:	f107 010c 	add.w	r1, r7, #12
 8005d88:	300c      	adds	r0, #12
 8005d8a:	f000 fc87 	bl	800669c <memcpy>
 8005d8e:	2201      	movs	r2, #1
 8005d90:	4629      	mov	r1, r5
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 feec 	bl	8006b70 <__lshift>
 8005d98:	9b00      	ldr	r3, [sp, #0]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	9b00      	ldr	r3, [sp, #0]
 8005da0:	444b      	add	r3, r9
 8005da2:	9307      	str	r3, [sp, #28]
 8005da4:	9b02      	ldr	r3, [sp, #8]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	46b8      	mov	r8, r7
 8005dac:	9306      	str	r3, [sp, #24]
 8005dae:	4607      	mov	r7, r0
 8005db0:	9b01      	ldr	r3, [sp, #4]
 8005db2:	4631      	mov	r1, r6
 8005db4:	3b01      	subs	r3, #1
 8005db6:	4658      	mov	r0, fp
 8005db8:	9302      	str	r3, [sp, #8]
 8005dba:	f7ff fa69 	bl	8005290 <quorem>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	3330      	adds	r3, #48	; 0x30
 8005dc2:	9004      	str	r0, [sp, #16]
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	4658      	mov	r0, fp
 8005dc8:	9308      	str	r3, [sp, #32]
 8005dca:	f000 ff3d 	bl	8006c48 <__mcmp>
 8005dce:	463a      	mov	r2, r7
 8005dd0:	4681      	mov	r9, r0
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f000 ff53 	bl	8006c80 <__mdiff>
 8005dda:	68c2      	ldr	r2, [r0, #12]
 8005ddc:	9b08      	ldr	r3, [sp, #32]
 8005dde:	4605      	mov	r5, r0
 8005de0:	bb02      	cbnz	r2, 8005e24 <_dtoa_r+0xa7c>
 8005de2:	4601      	mov	r1, r0
 8005de4:	4658      	mov	r0, fp
 8005de6:	f000 ff2f 	bl	8006c48 <__mcmp>
 8005dea:	9b08      	ldr	r3, [sp, #32]
 8005dec:	4602      	mov	r2, r0
 8005dee:	4629      	mov	r1, r5
 8005df0:	4620      	mov	r0, r4
 8005df2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005df6:	f000 fc9f 	bl	8006738 <_Bfree>
 8005dfa:	9b05      	ldr	r3, [sp, #20]
 8005dfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dfe:	9d01      	ldr	r5, [sp, #4]
 8005e00:	ea43 0102 	orr.w	r1, r3, r2
 8005e04:	9b06      	ldr	r3, [sp, #24]
 8005e06:	430b      	orrs	r3, r1
 8005e08:	9b08      	ldr	r3, [sp, #32]
 8005e0a:	d10d      	bne.n	8005e28 <_dtoa_r+0xa80>
 8005e0c:	2b39      	cmp	r3, #57	; 0x39
 8005e0e:	d029      	beq.n	8005e64 <_dtoa_r+0xabc>
 8005e10:	f1b9 0f00 	cmp.w	r9, #0
 8005e14:	dd01      	ble.n	8005e1a <_dtoa_r+0xa72>
 8005e16:	9b04      	ldr	r3, [sp, #16]
 8005e18:	3331      	adds	r3, #49	; 0x31
 8005e1a:	9a02      	ldr	r2, [sp, #8]
 8005e1c:	7013      	strb	r3, [r2, #0]
 8005e1e:	e774      	b.n	8005d0a <_dtoa_r+0x962>
 8005e20:	4638      	mov	r0, r7
 8005e22:	e7b9      	b.n	8005d98 <_dtoa_r+0x9f0>
 8005e24:	2201      	movs	r2, #1
 8005e26:	e7e2      	b.n	8005dee <_dtoa_r+0xa46>
 8005e28:	f1b9 0f00 	cmp.w	r9, #0
 8005e2c:	db06      	blt.n	8005e3c <_dtoa_r+0xa94>
 8005e2e:	9905      	ldr	r1, [sp, #20]
 8005e30:	ea41 0909 	orr.w	r9, r1, r9
 8005e34:	9906      	ldr	r1, [sp, #24]
 8005e36:	ea59 0101 	orrs.w	r1, r9, r1
 8005e3a:	d120      	bne.n	8005e7e <_dtoa_r+0xad6>
 8005e3c:	2a00      	cmp	r2, #0
 8005e3e:	ddec      	ble.n	8005e1a <_dtoa_r+0xa72>
 8005e40:	4659      	mov	r1, fp
 8005e42:	2201      	movs	r2, #1
 8005e44:	4620      	mov	r0, r4
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	f000 fe92 	bl	8006b70 <__lshift>
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4683      	mov	fp, r0
 8005e50:	f000 fefa 	bl	8006c48 <__mcmp>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	9b01      	ldr	r3, [sp, #4]
 8005e58:	dc02      	bgt.n	8005e60 <_dtoa_r+0xab8>
 8005e5a:	d1de      	bne.n	8005e1a <_dtoa_r+0xa72>
 8005e5c:	07da      	lsls	r2, r3, #31
 8005e5e:	d5dc      	bpl.n	8005e1a <_dtoa_r+0xa72>
 8005e60:	2b39      	cmp	r3, #57	; 0x39
 8005e62:	d1d8      	bne.n	8005e16 <_dtoa_r+0xa6e>
 8005e64:	9a02      	ldr	r2, [sp, #8]
 8005e66:	2339      	movs	r3, #57	; 0x39
 8005e68:	7013      	strb	r3, [r2, #0]
 8005e6a:	462b      	mov	r3, r5
 8005e6c:	461d      	mov	r5, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e74:	2a39      	cmp	r2, #57	; 0x39
 8005e76:	d050      	beq.n	8005f1a <_dtoa_r+0xb72>
 8005e78:	3201      	adds	r2, #1
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	e745      	b.n	8005d0a <_dtoa_r+0x962>
 8005e7e:	2a00      	cmp	r2, #0
 8005e80:	dd03      	ble.n	8005e8a <_dtoa_r+0xae2>
 8005e82:	2b39      	cmp	r3, #57	; 0x39
 8005e84:	d0ee      	beq.n	8005e64 <_dtoa_r+0xabc>
 8005e86:	3301      	adds	r3, #1
 8005e88:	e7c7      	b.n	8005e1a <_dtoa_r+0xa72>
 8005e8a:	9a01      	ldr	r2, [sp, #4]
 8005e8c:	9907      	ldr	r1, [sp, #28]
 8005e8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e92:	428a      	cmp	r2, r1
 8005e94:	d02a      	beq.n	8005eec <_dtoa_r+0xb44>
 8005e96:	4659      	mov	r1, fp
 8005e98:	2300      	movs	r3, #0
 8005e9a:	220a      	movs	r2, #10
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f000 fc6d 	bl	800677c <__multadd>
 8005ea2:	45b8      	cmp	r8, r7
 8005ea4:	4683      	mov	fp, r0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	f04f 020a 	mov.w	r2, #10
 8005eae:	4641      	mov	r1, r8
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	d107      	bne.n	8005ec4 <_dtoa_r+0xb1c>
 8005eb4:	f000 fc62 	bl	800677c <__multadd>
 8005eb8:	4680      	mov	r8, r0
 8005eba:	4607      	mov	r7, r0
 8005ebc:	9b01      	ldr	r3, [sp, #4]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	e775      	b.n	8005db0 <_dtoa_r+0xa08>
 8005ec4:	f000 fc5a 	bl	800677c <__multadd>
 8005ec8:	4639      	mov	r1, r7
 8005eca:	4680      	mov	r8, r0
 8005ecc:	2300      	movs	r3, #0
 8005ece:	220a      	movs	r2, #10
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 fc53 	bl	800677c <__multadd>
 8005ed6:	4607      	mov	r7, r0
 8005ed8:	e7f0      	b.n	8005ebc <_dtoa_r+0xb14>
 8005eda:	f1b9 0f00 	cmp.w	r9, #0
 8005ede:	9a00      	ldr	r2, [sp, #0]
 8005ee0:	bfcc      	ite	gt
 8005ee2:	464d      	movgt	r5, r9
 8005ee4:	2501      	movle	r5, #1
 8005ee6:	4415      	add	r5, r2
 8005ee8:	f04f 0800 	mov.w	r8, #0
 8005eec:	4659      	mov	r1, fp
 8005eee:	2201      	movs	r2, #1
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	f000 fe3c 	bl	8006b70 <__lshift>
 8005ef8:	4631      	mov	r1, r6
 8005efa:	4683      	mov	fp, r0
 8005efc:	f000 fea4 	bl	8006c48 <__mcmp>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	dcb2      	bgt.n	8005e6a <_dtoa_r+0xac2>
 8005f04:	d102      	bne.n	8005f0c <_dtoa_r+0xb64>
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	07db      	lsls	r3, r3, #31
 8005f0a:	d4ae      	bmi.n	8005e6a <_dtoa_r+0xac2>
 8005f0c:	462b      	mov	r3, r5
 8005f0e:	461d      	mov	r5, r3
 8005f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f14:	2a30      	cmp	r2, #48	; 0x30
 8005f16:	d0fa      	beq.n	8005f0e <_dtoa_r+0xb66>
 8005f18:	e6f7      	b.n	8005d0a <_dtoa_r+0x962>
 8005f1a:	9a00      	ldr	r2, [sp, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d1a5      	bne.n	8005e6c <_dtoa_r+0xac4>
 8005f20:	f10a 0a01 	add.w	sl, sl, #1
 8005f24:	2331      	movs	r3, #49	; 0x31
 8005f26:	e779      	b.n	8005e1c <_dtoa_r+0xa74>
 8005f28:	4b13      	ldr	r3, [pc, #76]	; (8005f78 <_dtoa_r+0xbd0>)
 8005f2a:	f7ff baaf 	b.w	800548c <_dtoa_r+0xe4>
 8005f2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f47f aa86 	bne.w	8005442 <_dtoa_r+0x9a>
 8005f36:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <_dtoa_r+0xbd4>)
 8005f38:	f7ff baa8 	b.w	800548c <_dtoa_r+0xe4>
 8005f3c:	f1b9 0f00 	cmp.w	r9, #0
 8005f40:	dc03      	bgt.n	8005f4a <_dtoa_r+0xba2>
 8005f42:	9b05      	ldr	r3, [sp, #20]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	f73f aec9 	bgt.w	8005cdc <_dtoa_r+0x934>
 8005f4a:	9d00      	ldr	r5, [sp, #0]
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4658      	mov	r0, fp
 8005f50:	f7ff f99e 	bl	8005290 <quorem>
 8005f54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005f58:	f805 3b01 	strb.w	r3, [r5], #1
 8005f5c:	9a00      	ldr	r2, [sp, #0]
 8005f5e:	1aaa      	subs	r2, r5, r2
 8005f60:	4591      	cmp	r9, r2
 8005f62:	ddba      	ble.n	8005eda <_dtoa_r+0xb32>
 8005f64:	4659      	mov	r1, fp
 8005f66:	2300      	movs	r3, #0
 8005f68:	220a      	movs	r2, #10
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f000 fc06 	bl	800677c <__multadd>
 8005f70:	4683      	mov	fp, r0
 8005f72:	e7eb      	b.n	8005f4c <_dtoa_r+0xba4>
 8005f74:	080081db 	.word	0x080081db
 8005f78:	080080e0 	.word	0x080080e0
 8005f7c:	08008158 	.word	0x08008158

08005f80 <rshift>:
 8005f80:	6903      	ldr	r3, [r0, #16]
 8005f82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005f86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005f8e:	f100 0414 	add.w	r4, r0, #20
 8005f92:	dd45      	ble.n	8006020 <rshift+0xa0>
 8005f94:	f011 011f 	ands.w	r1, r1, #31
 8005f98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005f9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005fa0:	d10c      	bne.n	8005fbc <rshift+0x3c>
 8005fa2:	f100 0710 	add.w	r7, r0, #16
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	42b1      	cmp	r1, r6
 8005faa:	d334      	bcc.n	8006016 <rshift+0x96>
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	1eea      	subs	r2, r5, #3
 8005fb2:	4296      	cmp	r6, r2
 8005fb4:	bf38      	it	cc
 8005fb6:	2300      	movcc	r3, #0
 8005fb8:	4423      	add	r3, r4
 8005fba:	e015      	b.n	8005fe8 <rshift+0x68>
 8005fbc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005fc0:	f1c1 0820 	rsb	r8, r1, #32
 8005fc4:	40cf      	lsrs	r7, r1
 8005fc6:	f105 0e04 	add.w	lr, r5, #4
 8005fca:	46a1      	mov	r9, r4
 8005fcc:	4576      	cmp	r6, lr
 8005fce:	46f4      	mov	ip, lr
 8005fd0:	d815      	bhi.n	8005ffe <rshift+0x7e>
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	009a      	lsls	r2, r3, #2
 8005fd6:	3a04      	subs	r2, #4
 8005fd8:	3501      	adds	r5, #1
 8005fda:	42ae      	cmp	r6, r5
 8005fdc:	bf38      	it	cc
 8005fde:	2200      	movcc	r2, #0
 8005fe0:	18a3      	adds	r3, r4, r2
 8005fe2:	50a7      	str	r7, [r4, r2]
 8005fe4:	b107      	cbz	r7, 8005fe8 <rshift+0x68>
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	1b1a      	subs	r2, r3, r4
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005ff0:	bf08      	it	eq
 8005ff2:	2300      	moveq	r3, #0
 8005ff4:	6102      	str	r2, [r0, #16]
 8005ff6:	bf08      	it	eq
 8005ff8:	6143      	streq	r3, [r0, #20]
 8005ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ffe:	f8dc c000 	ldr.w	ip, [ip]
 8006002:	fa0c fc08 	lsl.w	ip, ip, r8
 8006006:	ea4c 0707 	orr.w	r7, ip, r7
 800600a:	f849 7b04 	str.w	r7, [r9], #4
 800600e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006012:	40cf      	lsrs	r7, r1
 8006014:	e7da      	b.n	8005fcc <rshift+0x4c>
 8006016:	f851 cb04 	ldr.w	ip, [r1], #4
 800601a:	f847 cf04 	str.w	ip, [r7, #4]!
 800601e:	e7c3      	b.n	8005fa8 <rshift+0x28>
 8006020:	4623      	mov	r3, r4
 8006022:	e7e1      	b.n	8005fe8 <rshift+0x68>

08006024 <__hexdig_fun>:
 8006024:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006028:	2b09      	cmp	r3, #9
 800602a:	d802      	bhi.n	8006032 <__hexdig_fun+0xe>
 800602c:	3820      	subs	r0, #32
 800602e:	b2c0      	uxtb	r0, r0
 8006030:	4770      	bx	lr
 8006032:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006036:	2b05      	cmp	r3, #5
 8006038:	d801      	bhi.n	800603e <__hexdig_fun+0x1a>
 800603a:	3847      	subs	r0, #71	; 0x47
 800603c:	e7f7      	b.n	800602e <__hexdig_fun+0xa>
 800603e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006042:	2b05      	cmp	r3, #5
 8006044:	d801      	bhi.n	800604a <__hexdig_fun+0x26>
 8006046:	3827      	subs	r0, #39	; 0x27
 8006048:	e7f1      	b.n	800602e <__hexdig_fun+0xa>
 800604a:	2000      	movs	r0, #0
 800604c:	4770      	bx	lr
	...

08006050 <__gethex>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	ed2d 8b02 	vpush	{d8}
 8006058:	b089      	sub	sp, #36	; 0x24
 800605a:	ee08 0a10 	vmov	s16, r0
 800605e:	9304      	str	r3, [sp, #16]
 8006060:	4bbc      	ldr	r3, [pc, #752]	; (8006354 <__gethex+0x304>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	9301      	str	r3, [sp, #4]
 8006066:	4618      	mov	r0, r3
 8006068:	468b      	mov	fp, r1
 800606a:	4690      	mov	r8, r2
 800606c:	f7fa f8b8 	bl	80001e0 <strlen>
 8006070:	9b01      	ldr	r3, [sp, #4]
 8006072:	f8db 2000 	ldr.w	r2, [fp]
 8006076:	4403      	add	r3, r0
 8006078:	4682      	mov	sl, r0
 800607a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800607e:	9305      	str	r3, [sp, #20]
 8006080:	1c93      	adds	r3, r2, #2
 8006082:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006086:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800608a:	32fe      	adds	r2, #254	; 0xfe
 800608c:	18d1      	adds	r1, r2, r3
 800608e:	461f      	mov	r7, r3
 8006090:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006094:	9100      	str	r1, [sp, #0]
 8006096:	2830      	cmp	r0, #48	; 0x30
 8006098:	d0f8      	beq.n	800608c <__gethex+0x3c>
 800609a:	f7ff ffc3 	bl	8006024 <__hexdig_fun>
 800609e:	4604      	mov	r4, r0
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d13a      	bne.n	800611a <__gethex+0xca>
 80060a4:	9901      	ldr	r1, [sp, #4]
 80060a6:	4652      	mov	r2, sl
 80060a8:	4638      	mov	r0, r7
 80060aa:	f7fe fa30 	bl	800450e <strncmp>
 80060ae:	4605      	mov	r5, r0
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d168      	bne.n	8006186 <__gethex+0x136>
 80060b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80060b8:	eb07 060a 	add.w	r6, r7, sl
 80060bc:	f7ff ffb2 	bl	8006024 <__hexdig_fun>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d062      	beq.n	800618a <__gethex+0x13a>
 80060c4:	4633      	mov	r3, r6
 80060c6:	7818      	ldrb	r0, [r3, #0]
 80060c8:	2830      	cmp	r0, #48	; 0x30
 80060ca:	461f      	mov	r7, r3
 80060cc:	f103 0301 	add.w	r3, r3, #1
 80060d0:	d0f9      	beq.n	80060c6 <__gethex+0x76>
 80060d2:	f7ff ffa7 	bl	8006024 <__hexdig_fun>
 80060d6:	2301      	movs	r3, #1
 80060d8:	fab0 f480 	clz	r4, r0
 80060dc:	0964      	lsrs	r4, r4, #5
 80060de:	4635      	mov	r5, r6
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	463a      	mov	r2, r7
 80060e4:	4616      	mov	r6, r2
 80060e6:	3201      	adds	r2, #1
 80060e8:	7830      	ldrb	r0, [r6, #0]
 80060ea:	f7ff ff9b 	bl	8006024 <__hexdig_fun>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d1f8      	bne.n	80060e4 <__gethex+0x94>
 80060f2:	9901      	ldr	r1, [sp, #4]
 80060f4:	4652      	mov	r2, sl
 80060f6:	4630      	mov	r0, r6
 80060f8:	f7fe fa09 	bl	800450e <strncmp>
 80060fc:	b980      	cbnz	r0, 8006120 <__gethex+0xd0>
 80060fe:	b94d      	cbnz	r5, 8006114 <__gethex+0xc4>
 8006100:	eb06 050a 	add.w	r5, r6, sl
 8006104:	462a      	mov	r2, r5
 8006106:	4616      	mov	r6, r2
 8006108:	3201      	adds	r2, #1
 800610a:	7830      	ldrb	r0, [r6, #0]
 800610c:	f7ff ff8a 	bl	8006024 <__hexdig_fun>
 8006110:	2800      	cmp	r0, #0
 8006112:	d1f8      	bne.n	8006106 <__gethex+0xb6>
 8006114:	1bad      	subs	r5, r5, r6
 8006116:	00ad      	lsls	r5, r5, #2
 8006118:	e004      	b.n	8006124 <__gethex+0xd4>
 800611a:	2400      	movs	r4, #0
 800611c:	4625      	mov	r5, r4
 800611e:	e7e0      	b.n	80060e2 <__gethex+0x92>
 8006120:	2d00      	cmp	r5, #0
 8006122:	d1f7      	bne.n	8006114 <__gethex+0xc4>
 8006124:	7833      	ldrb	r3, [r6, #0]
 8006126:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800612a:	2b50      	cmp	r3, #80	; 0x50
 800612c:	d13b      	bne.n	80061a6 <__gethex+0x156>
 800612e:	7873      	ldrb	r3, [r6, #1]
 8006130:	2b2b      	cmp	r3, #43	; 0x2b
 8006132:	d02c      	beq.n	800618e <__gethex+0x13e>
 8006134:	2b2d      	cmp	r3, #45	; 0x2d
 8006136:	d02e      	beq.n	8006196 <__gethex+0x146>
 8006138:	1c71      	adds	r1, r6, #1
 800613a:	f04f 0900 	mov.w	r9, #0
 800613e:	7808      	ldrb	r0, [r1, #0]
 8006140:	f7ff ff70 	bl	8006024 <__hexdig_fun>
 8006144:	1e43      	subs	r3, r0, #1
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b18      	cmp	r3, #24
 800614a:	d82c      	bhi.n	80061a6 <__gethex+0x156>
 800614c:	f1a0 0210 	sub.w	r2, r0, #16
 8006150:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006154:	f7ff ff66 	bl	8006024 <__hexdig_fun>
 8006158:	1e43      	subs	r3, r0, #1
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b18      	cmp	r3, #24
 800615e:	d91d      	bls.n	800619c <__gethex+0x14c>
 8006160:	f1b9 0f00 	cmp.w	r9, #0
 8006164:	d000      	beq.n	8006168 <__gethex+0x118>
 8006166:	4252      	negs	r2, r2
 8006168:	4415      	add	r5, r2
 800616a:	f8cb 1000 	str.w	r1, [fp]
 800616e:	b1e4      	cbz	r4, 80061aa <__gethex+0x15a>
 8006170:	9b00      	ldr	r3, [sp, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	bf14      	ite	ne
 8006176:	2700      	movne	r7, #0
 8006178:	2706      	moveq	r7, #6
 800617a:	4638      	mov	r0, r7
 800617c:	b009      	add	sp, #36	; 0x24
 800617e:	ecbd 8b02 	vpop	{d8}
 8006182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006186:	463e      	mov	r6, r7
 8006188:	4625      	mov	r5, r4
 800618a:	2401      	movs	r4, #1
 800618c:	e7ca      	b.n	8006124 <__gethex+0xd4>
 800618e:	f04f 0900 	mov.w	r9, #0
 8006192:	1cb1      	adds	r1, r6, #2
 8006194:	e7d3      	b.n	800613e <__gethex+0xee>
 8006196:	f04f 0901 	mov.w	r9, #1
 800619a:	e7fa      	b.n	8006192 <__gethex+0x142>
 800619c:	230a      	movs	r3, #10
 800619e:	fb03 0202 	mla	r2, r3, r2, r0
 80061a2:	3a10      	subs	r2, #16
 80061a4:	e7d4      	b.n	8006150 <__gethex+0x100>
 80061a6:	4631      	mov	r1, r6
 80061a8:	e7df      	b.n	800616a <__gethex+0x11a>
 80061aa:	1bf3      	subs	r3, r6, r7
 80061ac:	3b01      	subs	r3, #1
 80061ae:	4621      	mov	r1, r4
 80061b0:	2b07      	cmp	r3, #7
 80061b2:	dc0b      	bgt.n	80061cc <__gethex+0x17c>
 80061b4:	ee18 0a10 	vmov	r0, s16
 80061b8:	f000 fa7e 	bl	80066b8 <_Balloc>
 80061bc:	4604      	mov	r4, r0
 80061be:	b940      	cbnz	r0, 80061d2 <__gethex+0x182>
 80061c0:	4b65      	ldr	r3, [pc, #404]	; (8006358 <__gethex+0x308>)
 80061c2:	4602      	mov	r2, r0
 80061c4:	21de      	movs	r1, #222	; 0xde
 80061c6:	4865      	ldr	r0, [pc, #404]	; (800635c <__gethex+0x30c>)
 80061c8:	f001 f972 	bl	80074b0 <__assert_func>
 80061cc:	3101      	adds	r1, #1
 80061ce:	105b      	asrs	r3, r3, #1
 80061d0:	e7ee      	b.n	80061b0 <__gethex+0x160>
 80061d2:	f100 0914 	add.w	r9, r0, #20
 80061d6:	f04f 0b00 	mov.w	fp, #0
 80061da:	f1ca 0301 	rsb	r3, sl, #1
 80061de:	f8cd 9008 	str.w	r9, [sp, #8]
 80061e2:	f8cd b000 	str.w	fp, [sp]
 80061e6:	9306      	str	r3, [sp, #24]
 80061e8:	42b7      	cmp	r7, r6
 80061ea:	d340      	bcc.n	800626e <__gethex+0x21e>
 80061ec:	9802      	ldr	r0, [sp, #8]
 80061ee:	9b00      	ldr	r3, [sp, #0]
 80061f0:	f840 3b04 	str.w	r3, [r0], #4
 80061f4:	eba0 0009 	sub.w	r0, r0, r9
 80061f8:	1080      	asrs	r0, r0, #2
 80061fa:	0146      	lsls	r6, r0, #5
 80061fc:	6120      	str	r0, [r4, #16]
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fb50 	bl	80068a4 <__hi0bits>
 8006204:	1a30      	subs	r0, r6, r0
 8006206:	f8d8 6000 	ldr.w	r6, [r8]
 800620a:	42b0      	cmp	r0, r6
 800620c:	dd63      	ble.n	80062d6 <__gethex+0x286>
 800620e:	1b87      	subs	r7, r0, r6
 8006210:	4639      	mov	r1, r7
 8006212:	4620      	mov	r0, r4
 8006214:	f000 feea 	bl	8006fec <__any_on>
 8006218:	4682      	mov	sl, r0
 800621a:	b1a8      	cbz	r0, 8006248 <__gethex+0x1f8>
 800621c:	1e7b      	subs	r3, r7, #1
 800621e:	1159      	asrs	r1, r3, #5
 8006220:	f003 021f 	and.w	r2, r3, #31
 8006224:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006228:	f04f 0a01 	mov.w	sl, #1
 800622c:	fa0a f202 	lsl.w	r2, sl, r2
 8006230:	420a      	tst	r2, r1
 8006232:	d009      	beq.n	8006248 <__gethex+0x1f8>
 8006234:	4553      	cmp	r3, sl
 8006236:	dd05      	ble.n	8006244 <__gethex+0x1f4>
 8006238:	1eb9      	subs	r1, r7, #2
 800623a:	4620      	mov	r0, r4
 800623c:	f000 fed6 	bl	8006fec <__any_on>
 8006240:	2800      	cmp	r0, #0
 8006242:	d145      	bne.n	80062d0 <__gethex+0x280>
 8006244:	f04f 0a02 	mov.w	sl, #2
 8006248:	4639      	mov	r1, r7
 800624a:	4620      	mov	r0, r4
 800624c:	f7ff fe98 	bl	8005f80 <rshift>
 8006250:	443d      	add	r5, r7
 8006252:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006256:	42ab      	cmp	r3, r5
 8006258:	da4c      	bge.n	80062f4 <__gethex+0x2a4>
 800625a:	ee18 0a10 	vmov	r0, s16
 800625e:	4621      	mov	r1, r4
 8006260:	f000 fa6a 	bl	8006738 <_Bfree>
 8006264:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006266:	2300      	movs	r3, #0
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	27a3      	movs	r7, #163	; 0xa3
 800626c:	e785      	b.n	800617a <__gethex+0x12a>
 800626e:	1e73      	subs	r3, r6, #1
 8006270:	9a05      	ldr	r2, [sp, #20]
 8006272:	9303      	str	r3, [sp, #12]
 8006274:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006278:	4293      	cmp	r3, r2
 800627a:	d019      	beq.n	80062b0 <__gethex+0x260>
 800627c:	f1bb 0f20 	cmp.w	fp, #32
 8006280:	d107      	bne.n	8006292 <__gethex+0x242>
 8006282:	9b02      	ldr	r3, [sp, #8]
 8006284:	9a00      	ldr	r2, [sp, #0]
 8006286:	f843 2b04 	str.w	r2, [r3], #4
 800628a:	9302      	str	r3, [sp, #8]
 800628c:	2300      	movs	r3, #0
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	469b      	mov	fp, r3
 8006292:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006296:	f7ff fec5 	bl	8006024 <__hexdig_fun>
 800629a:	9b00      	ldr	r3, [sp, #0]
 800629c:	f000 000f 	and.w	r0, r0, #15
 80062a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80062a4:	4303      	orrs	r3, r0
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	f10b 0b04 	add.w	fp, fp, #4
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	e00d      	b.n	80062cc <__gethex+0x27c>
 80062b0:	9b03      	ldr	r3, [sp, #12]
 80062b2:	9a06      	ldr	r2, [sp, #24]
 80062b4:	4413      	add	r3, r2
 80062b6:	42bb      	cmp	r3, r7
 80062b8:	d3e0      	bcc.n	800627c <__gethex+0x22c>
 80062ba:	4618      	mov	r0, r3
 80062bc:	9901      	ldr	r1, [sp, #4]
 80062be:	9307      	str	r3, [sp, #28]
 80062c0:	4652      	mov	r2, sl
 80062c2:	f7fe f924 	bl	800450e <strncmp>
 80062c6:	9b07      	ldr	r3, [sp, #28]
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d1d7      	bne.n	800627c <__gethex+0x22c>
 80062cc:	461e      	mov	r6, r3
 80062ce:	e78b      	b.n	80061e8 <__gethex+0x198>
 80062d0:	f04f 0a03 	mov.w	sl, #3
 80062d4:	e7b8      	b.n	8006248 <__gethex+0x1f8>
 80062d6:	da0a      	bge.n	80062ee <__gethex+0x29e>
 80062d8:	1a37      	subs	r7, r6, r0
 80062da:	4621      	mov	r1, r4
 80062dc:	ee18 0a10 	vmov	r0, s16
 80062e0:	463a      	mov	r2, r7
 80062e2:	f000 fc45 	bl	8006b70 <__lshift>
 80062e6:	1bed      	subs	r5, r5, r7
 80062e8:	4604      	mov	r4, r0
 80062ea:	f100 0914 	add.w	r9, r0, #20
 80062ee:	f04f 0a00 	mov.w	sl, #0
 80062f2:	e7ae      	b.n	8006252 <__gethex+0x202>
 80062f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80062f8:	42a8      	cmp	r0, r5
 80062fa:	dd72      	ble.n	80063e2 <__gethex+0x392>
 80062fc:	1b45      	subs	r5, r0, r5
 80062fe:	42ae      	cmp	r6, r5
 8006300:	dc36      	bgt.n	8006370 <__gethex+0x320>
 8006302:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006306:	2b02      	cmp	r3, #2
 8006308:	d02a      	beq.n	8006360 <__gethex+0x310>
 800630a:	2b03      	cmp	r3, #3
 800630c:	d02c      	beq.n	8006368 <__gethex+0x318>
 800630e:	2b01      	cmp	r3, #1
 8006310:	d115      	bne.n	800633e <__gethex+0x2ee>
 8006312:	42ae      	cmp	r6, r5
 8006314:	d113      	bne.n	800633e <__gethex+0x2ee>
 8006316:	2e01      	cmp	r6, #1
 8006318:	d10b      	bne.n	8006332 <__gethex+0x2e2>
 800631a:	9a04      	ldr	r2, [sp, #16]
 800631c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	2301      	movs	r3, #1
 8006324:	6123      	str	r3, [r4, #16]
 8006326:	f8c9 3000 	str.w	r3, [r9]
 800632a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800632c:	2762      	movs	r7, #98	; 0x62
 800632e:	601c      	str	r4, [r3, #0]
 8006330:	e723      	b.n	800617a <__gethex+0x12a>
 8006332:	1e71      	subs	r1, r6, #1
 8006334:	4620      	mov	r0, r4
 8006336:	f000 fe59 	bl	8006fec <__any_on>
 800633a:	2800      	cmp	r0, #0
 800633c:	d1ed      	bne.n	800631a <__gethex+0x2ca>
 800633e:	ee18 0a10 	vmov	r0, s16
 8006342:	4621      	mov	r1, r4
 8006344:	f000 f9f8 	bl	8006738 <_Bfree>
 8006348:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800634a:	2300      	movs	r3, #0
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	2750      	movs	r7, #80	; 0x50
 8006350:	e713      	b.n	800617a <__gethex+0x12a>
 8006352:	bf00      	nop
 8006354:	08008258 	.word	0x08008258
 8006358:	080081db 	.word	0x080081db
 800635c:	080081ec 	.word	0x080081ec
 8006360:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1eb      	bne.n	800633e <__gethex+0x2ee>
 8006366:	e7d8      	b.n	800631a <__gethex+0x2ca>
 8006368:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1d5      	bne.n	800631a <__gethex+0x2ca>
 800636e:	e7e6      	b.n	800633e <__gethex+0x2ee>
 8006370:	1e6f      	subs	r7, r5, #1
 8006372:	f1ba 0f00 	cmp.w	sl, #0
 8006376:	d131      	bne.n	80063dc <__gethex+0x38c>
 8006378:	b127      	cbz	r7, 8006384 <__gethex+0x334>
 800637a:	4639      	mov	r1, r7
 800637c:	4620      	mov	r0, r4
 800637e:	f000 fe35 	bl	8006fec <__any_on>
 8006382:	4682      	mov	sl, r0
 8006384:	117b      	asrs	r3, r7, #5
 8006386:	2101      	movs	r1, #1
 8006388:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800638c:	f007 071f 	and.w	r7, r7, #31
 8006390:	fa01 f707 	lsl.w	r7, r1, r7
 8006394:	421f      	tst	r7, r3
 8006396:	4629      	mov	r1, r5
 8006398:	4620      	mov	r0, r4
 800639a:	bf18      	it	ne
 800639c:	f04a 0a02 	orrne.w	sl, sl, #2
 80063a0:	1b76      	subs	r6, r6, r5
 80063a2:	f7ff fded 	bl	8005f80 <rshift>
 80063a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80063aa:	2702      	movs	r7, #2
 80063ac:	f1ba 0f00 	cmp.w	sl, #0
 80063b0:	d048      	beq.n	8006444 <__gethex+0x3f4>
 80063b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d015      	beq.n	80063e6 <__gethex+0x396>
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d017      	beq.n	80063ee <__gethex+0x39e>
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d109      	bne.n	80063d6 <__gethex+0x386>
 80063c2:	f01a 0f02 	tst.w	sl, #2
 80063c6:	d006      	beq.n	80063d6 <__gethex+0x386>
 80063c8:	f8d9 0000 	ldr.w	r0, [r9]
 80063cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80063d0:	f01a 0f01 	tst.w	sl, #1
 80063d4:	d10e      	bne.n	80063f4 <__gethex+0x3a4>
 80063d6:	f047 0710 	orr.w	r7, r7, #16
 80063da:	e033      	b.n	8006444 <__gethex+0x3f4>
 80063dc:	f04f 0a01 	mov.w	sl, #1
 80063e0:	e7d0      	b.n	8006384 <__gethex+0x334>
 80063e2:	2701      	movs	r7, #1
 80063e4:	e7e2      	b.n	80063ac <__gethex+0x35c>
 80063e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063e8:	f1c3 0301 	rsb	r3, r3, #1
 80063ec:	9315      	str	r3, [sp, #84]	; 0x54
 80063ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0f0      	beq.n	80063d6 <__gethex+0x386>
 80063f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80063f8:	f104 0314 	add.w	r3, r4, #20
 80063fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006400:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006404:	f04f 0c00 	mov.w	ip, #0
 8006408:	4618      	mov	r0, r3
 800640a:	f853 2b04 	ldr.w	r2, [r3], #4
 800640e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006412:	d01c      	beq.n	800644e <__gethex+0x3fe>
 8006414:	3201      	adds	r2, #1
 8006416:	6002      	str	r2, [r0, #0]
 8006418:	2f02      	cmp	r7, #2
 800641a:	f104 0314 	add.w	r3, r4, #20
 800641e:	d13f      	bne.n	80064a0 <__gethex+0x450>
 8006420:	f8d8 2000 	ldr.w	r2, [r8]
 8006424:	3a01      	subs	r2, #1
 8006426:	42b2      	cmp	r2, r6
 8006428:	d10a      	bne.n	8006440 <__gethex+0x3f0>
 800642a:	1171      	asrs	r1, r6, #5
 800642c:	2201      	movs	r2, #1
 800642e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006432:	f006 061f 	and.w	r6, r6, #31
 8006436:	fa02 f606 	lsl.w	r6, r2, r6
 800643a:	421e      	tst	r6, r3
 800643c:	bf18      	it	ne
 800643e:	4617      	movne	r7, r2
 8006440:	f047 0720 	orr.w	r7, r7, #32
 8006444:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006446:	601c      	str	r4, [r3, #0]
 8006448:	9b04      	ldr	r3, [sp, #16]
 800644a:	601d      	str	r5, [r3, #0]
 800644c:	e695      	b.n	800617a <__gethex+0x12a>
 800644e:	4299      	cmp	r1, r3
 8006450:	f843 cc04 	str.w	ip, [r3, #-4]
 8006454:	d8d8      	bhi.n	8006408 <__gethex+0x3b8>
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	459b      	cmp	fp, r3
 800645a:	db19      	blt.n	8006490 <__gethex+0x440>
 800645c:	6861      	ldr	r1, [r4, #4]
 800645e:	ee18 0a10 	vmov	r0, s16
 8006462:	3101      	adds	r1, #1
 8006464:	f000 f928 	bl	80066b8 <_Balloc>
 8006468:	4681      	mov	r9, r0
 800646a:	b918      	cbnz	r0, 8006474 <__gethex+0x424>
 800646c:	4b1a      	ldr	r3, [pc, #104]	; (80064d8 <__gethex+0x488>)
 800646e:	4602      	mov	r2, r0
 8006470:	2184      	movs	r1, #132	; 0x84
 8006472:	e6a8      	b.n	80061c6 <__gethex+0x176>
 8006474:	6922      	ldr	r2, [r4, #16]
 8006476:	3202      	adds	r2, #2
 8006478:	f104 010c 	add.w	r1, r4, #12
 800647c:	0092      	lsls	r2, r2, #2
 800647e:	300c      	adds	r0, #12
 8006480:	f000 f90c 	bl	800669c <memcpy>
 8006484:	4621      	mov	r1, r4
 8006486:	ee18 0a10 	vmov	r0, s16
 800648a:	f000 f955 	bl	8006738 <_Bfree>
 800648e:	464c      	mov	r4, r9
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006498:	6122      	str	r2, [r4, #16]
 800649a:	2201      	movs	r2, #1
 800649c:	615a      	str	r2, [r3, #20]
 800649e:	e7bb      	b.n	8006418 <__gethex+0x3c8>
 80064a0:	6922      	ldr	r2, [r4, #16]
 80064a2:	455a      	cmp	r2, fp
 80064a4:	dd0b      	ble.n	80064be <__gethex+0x46e>
 80064a6:	2101      	movs	r1, #1
 80064a8:	4620      	mov	r0, r4
 80064aa:	f7ff fd69 	bl	8005f80 <rshift>
 80064ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064b2:	3501      	adds	r5, #1
 80064b4:	42ab      	cmp	r3, r5
 80064b6:	f6ff aed0 	blt.w	800625a <__gethex+0x20a>
 80064ba:	2701      	movs	r7, #1
 80064bc:	e7c0      	b.n	8006440 <__gethex+0x3f0>
 80064be:	f016 061f 	ands.w	r6, r6, #31
 80064c2:	d0fa      	beq.n	80064ba <__gethex+0x46a>
 80064c4:	449a      	add	sl, r3
 80064c6:	f1c6 0620 	rsb	r6, r6, #32
 80064ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80064ce:	f000 f9e9 	bl	80068a4 <__hi0bits>
 80064d2:	42b0      	cmp	r0, r6
 80064d4:	dbe7      	blt.n	80064a6 <__gethex+0x456>
 80064d6:	e7f0      	b.n	80064ba <__gethex+0x46a>
 80064d8:	080081db 	.word	0x080081db

080064dc <L_shift>:
 80064dc:	f1c2 0208 	rsb	r2, r2, #8
 80064e0:	0092      	lsls	r2, r2, #2
 80064e2:	b570      	push	{r4, r5, r6, lr}
 80064e4:	f1c2 0620 	rsb	r6, r2, #32
 80064e8:	6843      	ldr	r3, [r0, #4]
 80064ea:	6804      	ldr	r4, [r0, #0]
 80064ec:	fa03 f506 	lsl.w	r5, r3, r6
 80064f0:	432c      	orrs	r4, r5
 80064f2:	40d3      	lsrs	r3, r2
 80064f4:	6004      	str	r4, [r0, #0]
 80064f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80064fa:	4288      	cmp	r0, r1
 80064fc:	d3f4      	bcc.n	80064e8 <L_shift+0xc>
 80064fe:	bd70      	pop	{r4, r5, r6, pc}

08006500 <__match>:
 8006500:	b530      	push	{r4, r5, lr}
 8006502:	6803      	ldr	r3, [r0, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650a:	b914      	cbnz	r4, 8006512 <__match+0x12>
 800650c:	6003      	str	r3, [r0, #0]
 800650e:	2001      	movs	r0, #1
 8006510:	bd30      	pop	{r4, r5, pc}
 8006512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006516:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800651a:	2d19      	cmp	r5, #25
 800651c:	bf98      	it	ls
 800651e:	3220      	addls	r2, #32
 8006520:	42a2      	cmp	r2, r4
 8006522:	d0f0      	beq.n	8006506 <__match+0x6>
 8006524:	2000      	movs	r0, #0
 8006526:	e7f3      	b.n	8006510 <__match+0x10>

08006528 <__hexnan>:
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	680b      	ldr	r3, [r1, #0]
 800652e:	6801      	ldr	r1, [r0, #0]
 8006530:	115e      	asrs	r6, r3, #5
 8006532:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006536:	f013 031f 	ands.w	r3, r3, #31
 800653a:	b087      	sub	sp, #28
 800653c:	bf18      	it	ne
 800653e:	3604      	addne	r6, #4
 8006540:	2500      	movs	r5, #0
 8006542:	1f37      	subs	r7, r6, #4
 8006544:	4682      	mov	sl, r0
 8006546:	4690      	mov	r8, r2
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	f846 5c04 	str.w	r5, [r6, #-4]
 800654e:	46b9      	mov	r9, r7
 8006550:	463c      	mov	r4, r7
 8006552:	9502      	str	r5, [sp, #8]
 8006554:	46ab      	mov	fp, r5
 8006556:	784a      	ldrb	r2, [r1, #1]
 8006558:	1c4b      	adds	r3, r1, #1
 800655a:	9303      	str	r3, [sp, #12]
 800655c:	b342      	cbz	r2, 80065b0 <__hexnan+0x88>
 800655e:	4610      	mov	r0, r2
 8006560:	9105      	str	r1, [sp, #20]
 8006562:	9204      	str	r2, [sp, #16]
 8006564:	f7ff fd5e 	bl	8006024 <__hexdig_fun>
 8006568:	2800      	cmp	r0, #0
 800656a:	d14f      	bne.n	800660c <__hexnan+0xe4>
 800656c:	9a04      	ldr	r2, [sp, #16]
 800656e:	9905      	ldr	r1, [sp, #20]
 8006570:	2a20      	cmp	r2, #32
 8006572:	d818      	bhi.n	80065a6 <__hexnan+0x7e>
 8006574:	9b02      	ldr	r3, [sp, #8]
 8006576:	459b      	cmp	fp, r3
 8006578:	dd13      	ble.n	80065a2 <__hexnan+0x7a>
 800657a:	454c      	cmp	r4, r9
 800657c:	d206      	bcs.n	800658c <__hexnan+0x64>
 800657e:	2d07      	cmp	r5, #7
 8006580:	dc04      	bgt.n	800658c <__hexnan+0x64>
 8006582:	462a      	mov	r2, r5
 8006584:	4649      	mov	r1, r9
 8006586:	4620      	mov	r0, r4
 8006588:	f7ff ffa8 	bl	80064dc <L_shift>
 800658c:	4544      	cmp	r4, r8
 800658e:	d950      	bls.n	8006632 <__hexnan+0x10a>
 8006590:	2300      	movs	r3, #0
 8006592:	f1a4 0904 	sub.w	r9, r4, #4
 8006596:	f844 3c04 	str.w	r3, [r4, #-4]
 800659a:	f8cd b008 	str.w	fp, [sp, #8]
 800659e:	464c      	mov	r4, r9
 80065a0:	461d      	mov	r5, r3
 80065a2:	9903      	ldr	r1, [sp, #12]
 80065a4:	e7d7      	b.n	8006556 <__hexnan+0x2e>
 80065a6:	2a29      	cmp	r2, #41	; 0x29
 80065a8:	d156      	bne.n	8006658 <__hexnan+0x130>
 80065aa:	3102      	adds	r1, #2
 80065ac:	f8ca 1000 	str.w	r1, [sl]
 80065b0:	f1bb 0f00 	cmp.w	fp, #0
 80065b4:	d050      	beq.n	8006658 <__hexnan+0x130>
 80065b6:	454c      	cmp	r4, r9
 80065b8:	d206      	bcs.n	80065c8 <__hexnan+0xa0>
 80065ba:	2d07      	cmp	r5, #7
 80065bc:	dc04      	bgt.n	80065c8 <__hexnan+0xa0>
 80065be:	462a      	mov	r2, r5
 80065c0:	4649      	mov	r1, r9
 80065c2:	4620      	mov	r0, r4
 80065c4:	f7ff ff8a 	bl	80064dc <L_shift>
 80065c8:	4544      	cmp	r4, r8
 80065ca:	d934      	bls.n	8006636 <__hexnan+0x10e>
 80065cc:	f1a8 0204 	sub.w	r2, r8, #4
 80065d0:	4623      	mov	r3, r4
 80065d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80065d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80065da:	429f      	cmp	r7, r3
 80065dc:	d2f9      	bcs.n	80065d2 <__hexnan+0xaa>
 80065de:	1b3b      	subs	r3, r7, r4
 80065e0:	f023 0303 	bic.w	r3, r3, #3
 80065e4:	3304      	adds	r3, #4
 80065e6:	3401      	adds	r4, #1
 80065e8:	3e03      	subs	r6, #3
 80065ea:	42b4      	cmp	r4, r6
 80065ec:	bf88      	it	hi
 80065ee:	2304      	movhi	r3, #4
 80065f0:	4443      	add	r3, r8
 80065f2:	2200      	movs	r2, #0
 80065f4:	f843 2b04 	str.w	r2, [r3], #4
 80065f8:	429f      	cmp	r7, r3
 80065fa:	d2fb      	bcs.n	80065f4 <__hexnan+0xcc>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	b91b      	cbnz	r3, 8006608 <__hexnan+0xe0>
 8006600:	4547      	cmp	r7, r8
 8006602:	d127      	bne.n	8006654 <__hexnan+0x12c>
 8006604:	2301      	movs	r3, #1
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	2005      	movs	r0, #5
 800660a:	e026      	b.n	800665a <__hexnan+0x132>
 800660c:	3501      	adds	r5, #1
 800660e:	2d08      	cmp	r5, #8
 8006610:	f10b 0b01 	add.w	fp, fp, #1
 8006614:	dd06      	ble.n	8006624 <__hexnan+0xfc>
 8006616:	4544      	cmp	r4, r8
 8006618:	d9c3      	bls.n	80065a2 <__hexnan+0x7a>
 800661a:	2300      	movs	r3, #0
 800661c:	f844 3c04 	str.w	r3, [r4, #-4]
 8006620:	2501      	movs	r5, #1
 8006622:	3c04      	subs	r4, #4
 8006624:	6822      	ldr	r2, [r4, #0]
 8006626:	f000 000f 	and.w	r0, r0, #15
 800662a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800662e:	6022      	str	r2, [r4, #0]
 8006630:	e7b7      	b.n	80065a2 <__hexnan+0x7a>
 8006632:	2508      	movs	r5, #8
 8006634:	e7b5      	b.n	80065a2 <__hexnan+0x7a>
 8006636:	9b01      	ldr	r3, [sp, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0df      	beq.n	80065fc <__hexnan+0xd4>
 800663c:	f04f 32ff 	mov.w	r2, #4294967295
 8006640:	f1c3 0320 	rsb	r3, r3, #32
 8006644:	fa22 f303 	lsr.w	r3, r2, r3
 8006648:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800664c:	401a      	ands	r2, r3
 800664e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006652:	e7d3      	b.n	80065fc <__hexnan+0xd4>
 8006654:	3f04      	subs	r7, #4
 8006656:	e7d1      	b.n	80065fc <__hexnan+0xd4>
 8006658:	2004      	movs	r0, #4
 800665a:	b007      	add	sp, #28
 800665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006660 <_localeconv_r>:
 8006660:	4800      	ldr	r0, [pc, #0]	; (8006664 <_localeconv_r+0x4>)
 8006662:	4770      	bx	lr
 8006664:	200001ac 	.word	0x200001ac

08006668 <malloc>:
 8006668:	4b02      	ldr	r3, [pc, #8]	; (8006674 <malloc+0xc>)
 800666a:	4601      	mov	r1, r0
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	f000 bd3d 	b.w	80070ec <_malloc_r>
 8006672:	bf00      	nop
 8006674:	20000054 	.word	0x20000054

08006678 <__ascii_mbtowc>:
 8006678:	b082      	sub	sp, #8
 800667a:	b901      	cbnz	r1, 800667e <__ascii_mbtowc+0x6>
 800667c:	a901      	add	r1, sp, #4
 800667e:	b142      	cbz	r2, 8006692 <__ascii_mbtowc+0x1a>
 8006680:	b14b      	cbz	r3, 8006696 <__ascii_mbtowc+0x1e>
 8006682:	7813      	ldrb	r3, [r2, #0]
 8006684:	600b      	str	r3, [r1, #0]
 8006686:	7812      	ldrb	r2, [r2, #0]
 8006688:	1e10      	subs	r0, r2, #0
 800668a:	bf18      	it	ne
 800668c:	2001      	movne	r0, #1
 800668e:	b002      	add	sp, #8
 8006690:	4770      	bx	lr
 8006692:	4610      	mov	r0, r2
 8006694:	e7fb      	b.n	800668e <__ascii_mbtowc+0x16>
 8006696:	f06f 0001 	mvn.w	r0, #1
 800669a:	e7f8      	b.n	800668e <__ascii_mbtowc+0x16>

0800669c <memcpy>:
 800669c:	440a      	add	r2, r1
 800669e:	4291      	cmp	r1, r2
 80066a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80066a4:	d100      	bne.n	80066a8 <memcpy+0xc>
 80066a6:	4770      	bx	lr
 80066a8:	b510      	push	{r4, lr}
 80066aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066b2:	4291      	cmp	r1, r2
 80066b4:	d1f9      	bne.n	80066aa <memcpy+0xe>
 80066b6:	bd10      	pop	{r4, pc}

080066b8 <_Balloc>:
 80066b8:	b570      	push	{r4, r5, r6, lr}
 80066ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066bc:	4604      	mov	r4, r0
 80066be:	460d      	mov	r5, r1
 80066c0:	b976      	cbnz	r6, 80066e0 <_Balloc+0x28>
 80066c2:	2010      	movs	r0, #16
 80066c4:	f7ff ffd0 	bl	8006668 <malloc>
 80066c8:	4602      	mov	r2, r0
 80066ca:	6260      	str	r0, [r4, #36]	; 0x24
 80066cc:	b920      	cbnz	r0, 80066d8 <_Balloc+0x20>
 80066ce:	4b18      	ldr	r3, [pc, #96]	; (8006730 <_Balloc+0x78>)
 80066d0:	4818      	ldr	r0, [pc, #96]	; (8006734 <_Balloc+0x7c>)
 80066d2:	2166      	movs	r1, #102	; 0x66
 80066d4:	f000 feec 	bl	80074b0 <__assert_func>
 80066d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066dc:	6006      	str	r6, [r0, #0]
 80066de:	60c6      	str	r6, [r0, #12]
 80066e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066e2:	68f3      	ldr	r3, [r6, #12]
 80066e4:	b183      	cbz	r3, 8006708 <_Balloc+0x50>
 80066e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066ee:	b9b8      	cbnz	r0, 8006720 <_Balloc+0x68>
 80066f0:	2101      	movs	r1, #1
 80066f2:	fa01 f605 	lsl.w	r6, r1, r5
 80066f6:	1d72      	adds	r2, r6, #5
 80066f8:	0092      	lsls	r2, r2, #2
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 fc97 	bl	800702e <_calloc_r>
 8006700:	b160      	cbz	r0, 800671c <_Balloc+0x64>
 8006702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006706:	e00e      	b.n	8006726 <_Balloc+0x6e>
 8006708:	2221      	movs	r2, #33	; 0x21
 800670a:	2104      	movs	r1, #4
 800670c:	4620      	mov	r0, r4
 800670e:	f000 fc8e 	bl	800702e <_calloc_r>
 8006712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006714:	60f0      	str	r0, [r6, #12]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e4      	bne.n	80066e6 <_Balloc+0x2e>
 800671c:	2000      	movs	r0, #0
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	6802      	ldr	r2, [r0, #0]
 8006722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006726:	2300      	movs	r3, #0
 8006728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800672c:	e7f7      	b.n	800671e <_Balloc+0x66>
 800672e:	bf00      	nop
 8006730:	08008165 	.word	0x08008165
 8006734:	0800826c 	.word	0x0800826c

08006738 <_Bfree>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800673c:	4605      	mov	r5, r0
 800673e:	460c      	mov	r4, r1
 8006740:	b976      	cbnz	r6, 8006760 <_Bfree+0x28>
 8006742:	2010      	movs	r0, #16
 8006744:	f7ff ff90 	bl	8006668 <malloc>
 8006748:	4602      	mov	r2, r0
 800674a:	6268      	str	r0, [r5, #36]	; 0x24
 800674c:	b920      	cbnz	r0, 8006758 <_Bfree+0x20>
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <_Bfree+0x3c>)
 8006750:	4809      	ldr	r0, [pc, #36]	; (8006778 <_Bfree+0x40>)
 8006752:	218a      	movs	r1, #138	; 0x8a
 8006754:	f000 feac 	bl	80074b0 <__assert_func>
 8006758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800675c:	6006      	str	r6, [r0, #0]
 800675e:	60c6      	str	r6, [r0, #12]
 8006760:	b13c      	cbz	r4, 8006772 <_Bfree+0x3a>
 8006762:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006764:	6862      	ldr	r2, [r4, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800676c:	6021      	str	r1, [r4, #0]
 800676e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	08008165 	.word	0x08008165
 8006778:	0800826c 	.word	0x0800826c

0800677c <__multadd>:
 800677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006780:	690e      	ldr	r6, [r1, #16]
 8006782:	4607      	mov	r7, r0
 8006784:	4698      	mov	r8, r3
 8006786:	460c      	mov	r4, r1
 8006788:	f101 0014 	add.w	r0, r1, #20
 800678c:	2300      	movs	r3, #0
 800678e:	6805      	ldr	r5, [r0, #0]
 8006790:	b2a9      	uxth	r1, r5
 8006792:	fb02 8101 	mla	r1, r2, r1, r8
 8006796:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800679a:	0c2d      	lsrs	r5, r5, #16
 800679c:	fb02 c505 	mla	r5, r2, r5, ip
 80067a0:	b289      	uxth	r1, r1
 80067a2:	3301      	adds	r3, #1
 80067a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80067a8:	429e      	cmp	r6, r3
 80067aa:	f840 1b04 	str.w	r1, [r0], #4
 80067ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80067b2:	dcec      	bgt.n	800678e <__multadd+0x12>
 80067b4:	f1b8 0f00 	cmp.w	r8, #0
 80067b8:	d022      	beq.n	8006800 <__multadd+0x84>
 80067ba:	68a3      	ldr	r3, [r4, #8]
 80067bc:	42b3      	cmp	r3, r6
 80067be:	dc19      	bgt.n	80067f4 <__multadd+0x78>
 80067c0:	6861      	ldr	r1, [r4, #4]
 80067c2:	4638      	mov	r0, r7
 80067c4:	3101      	adds	r1, #1
 80067c6:	f7ff ff77 	bl	80066b8 <_Balloc>
 80067ca:	4605      	mov	r5, r0
 80067cc:	b928      	cbnz	r0, 80067da <__multadd+0x5e>
 80067ce:	4602      	mov	r2, r0
 80067d0:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <__multadd+0x8c>)
 80067d2:	480e      	ldr	r0, [pc, #56]	; (800680c <__multadd+0x90>)
 80067d4:	21b5      	movs	r1, #181	; 0xb5
 80067d6:	f000 fe6b 	bl	80074b0 <__assert_func>
 80067da:	6922      	ldr	r2, [r4, #16]
 80067dc:	3202      	adds	r2, #2
 80067de:	f104 010c 	add.w	r1, r4, #12
 80067e2:	0092      	lsls	r2, r2, #2
 80067e4:	300c      	adds	r0, #12
 80067e6:	f7ff ff59 	bl	800669c <memcpy>
 80067ea:	4621      	mov	r1, r4
 80067ec:	4638      	mov	r0, r7
 80067ee:	f7ff ffa3 	bl	8006738 <_Bfree>
 80067f2:	462c      	mov	r4, r5
 80067f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80067f8:	3601      	adds	r6, #1
 80067fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80067fe:	6126      	str	r6, [r4, #16]
 8006800:	4620      	mov	r0, r4
 8006802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006806:	bf00      	nop
 8006808:	080081db 	.word	0x080081db
 800680c:	0800826c 	.word	0x0800826c

08006810 <__s2b>:
 8006810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006814:	460c      	mov	r4, r1
 8006816:	4615      	mov	r5, r2
 8006818:	461f      	mov	r7, r3
 800681a:	2209      	movs	r2, #9
 800681c:	3308      	adds	r3, #8
 800681e:	4606      	mov	r6, r0
 8006820:	fb93 f3f2 	sdiv	r3, r3, r2
 8006824:	2100      	movs	r1, #0
 8006826:	2201      	movs	r2, #1
 8006828:	429a      	cmp	r2, r3
 800682a:	db09      	blt.n	8006840 <__s2b+0x30>
 800682c:	4630      	mov	r0, r6
 800682e:	f7ff ff43 	bl	80066b8 <_Balloc>
 8006832:	b940      	cbnz	r0, 8006846 <__s2b+0x36>
 8006834:	4602      	mov	r2, r0
 8006836:	4b19      	ldr	r3, [pc, #100]	; (800689c <__s2b+0x8c>)
 8006838:	4819      	ldr	r0, [pc, #100]	; (80068a0 <__s2b+0x90>)
 800683a:	21ce      	movs	r1, #206	; 0xce
 800683c:	f000 fe38 	bl	80074b0 <__assert_func>
 8006840:	0052      	lsls	r2, r2, #1
 8006842:	3101      	adds	r1, #1
 8006844:	e7f0      	b.n	8006828 <__s2b+0x18>
 8006846:	9b08      	ldr	r3, [sp, #32]
 8006848:	6143      	str	r3, [r0, #20]
 800684a:	2d09      	cmp	r5, #9
 800684c:	f04f 0301 	mov.w	r3, #1
 8006850:	6103      	str	r3, [r0, #16]
 8006852:	dd16      	ble.n	8006882 <__s2b+0x72>
 8006854:	f104 0909 	add.w	r9, r4, #9
 8006858:	46c8      	mov	r8, r9
 800685a:	442c      	add	r4, r5
 800685c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006860:	4601      	mov	r1, r0
 8006862:	3b30      	subs	r3, #48	; 0x30
 8006864:	220a      	movs	r2, #10
 8006866:	4630      	mov	r0, r6
 8006868:	f7ff ff88 	bl	800677c <__multadd>
 800686c:	45a0      	cmp	r8, r4
 800686e:	d1f5      	bne.n	800685c <__s2b+0x4c>
 8006870:	f1a5 0408 	sub.w	r4, r5, #8
 8006874:	444c      	add	r4, r9
 8006876:	1b2d      	subs	r5, r5, r4
 8006878:	1963      	adds	r3, r4, r5
 800687a:	42bb      	cmp	r3, r7
 800687c:	db04      	blt.n	8006888 <__s2b+0x78>
 800687e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006882:	340a      	adds	r4, #10
 8006884:	2509      	movs	r5, #9
 8006886:	e7f6      	b.n	8006876 <__s2b+0x66>
 8006888:	f814 3b01 	ldrb.w	r3, [r4], #1
 800688c:	4601      	mov	r1, r0
 800688e:	3b30      	subs	r3, #48	; 0x30
 8006890:	220a      	movs	r2, #10
 8006892:	4630      	mov	r0, r6
 8006894:	f7ff ff72 	bl	800677c <__multadd>
 8006898:	e7ee      	b.n	8006878 <__s2b+0x68>
 800689a:	bf00      	nop
 800689c:	080081db 	.word	0x080081db
 80068a0:	0800826c 	.word	0x0800826c

080068a4 <__hi0bits>:
 80068a4:	0c03      	lsrs	r3, r0, #16
 80068a6:	041b      	lsls	r3, r3, #16
 80068a8:	b9d3      	cbnz	r3, 80068e0 <__hi0bits+0x3c>
 80068aa:	0400      	lsls	r0, r0, #16
 80068ac:	2310      	movs	r3, #16
 80068ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80068b2:	bf04      	itt	eq
 80068b4:	0200      	lsleq	r0, r0, #8
 80068b6:	3308      	addeq	r3, #8
 80068b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80068bc:	bf04      	itt	eq
 80068be:	0100      	lsleq	r0, r0, #4
 80068c0:	3304      	addeq	r3, #4
 80068c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80068c6:	bf04      	itt	eq
 80068c8:	0080      	lsleq	r0, r0, #2
 80068ca:	3302      	addeq	r3, #2
 80068cc:	2800      	cmp	r0, #0
 80068ce:	db05      	blt.n	80068dc <__hi0bits+0x38>
 80068d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80068d4:	f103 0301 	add.w	r3, r3, #1
 80068d8:	bf08      	it	eq
 80068da:	2320      	moveq	r3, #32
 80068dc:	4618      	mov	r0, r3
 80068de:	4770      	bx	lr
 80068e0:	2300      	movs	r3, #0
 80068e2:	e7e4      	b.n	80068ae <__hi0bits+0xa>

080068e4 <__lo0bits>:
 80068e4:	6803      	ldr	r3, [r0, #0]
 80068e6:	f013 0207 	ands.w	r2, r3, #7
 80068ea:	4601      	mov	r1, r0
 80068ec:	d00b      	beq.n	8006906 <__lo0bits+0x22>
 80068ee:	07da      	lsls	r2, r3, #31
 80068f0:	d424      	bmi.n	800693c <__lo0bits+0x58>
 80068f2:	0798      	lsls	r0, r3, #30
 80068f4:	bf49      	itett	mi
 80068f6:	085b      	lsrmi	r3, r3, #1
 80068f8:	089b      	lsrpl	r3, r3, #2
 80068fa:	2001      	movmi	r0, #1
 80068fc:	600b      	strmi	r3, [r1, #0]
 80068fe:	bf5c      	itt	pl
 8006900:	600b      	strpl	r3, [r1, #0]
 8006902:	2002      	movpl	r0, #2
 8006904:	4770      	bx	lr
 8006906:	b298      	uxth	r0, r3
 8006908:	b9b0      	cbnz	r0, 8006938 <__lo0bits+0x54>
 800690a:	0c1b      	lsrs	r3, r3, #16
 800690c:	2010      	movs	r0, #16
 800690e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006912:	bf04      	itt	eq
 8006914:	0a1b      	lsreq	r3, r3, #8
 8006916:	3008      	addeq	r0, #8
 8006918:	071a      	lsls	r2, r3, #28
 800691a:	bf04      	itt	eq
 800691c:	091b      	lsreq	r3, r3, #4
 800691e:	3004      	addeq	r0, #4
 8006920:	079a      	lsls	r2, r3, #30
 8006922:	bf04      	itt	eq
 8006924:	089b      	lsreq	r3, r3, #2
 8006926:	3002      	addeq	r0, #2
 8006928:	07da      	lsls	r2, r3, #31
 800692a:	d403      	bmi.n	8006934 <__lo0bits+0x50>
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	f100 0001 	add.w	r0, r0, #1
 8006932:	d005      	beq.n	8006940 <__lo0bits+0x5c>
 8006934:	600b      	str	r3, [r1, #0]
 8006936:	4770      	bx	lr
 8006938:	4610      	mov	r0, r2
 800693a:	e7e8      	b.n	800690e <__lo0bits+0x2a>
 800693c:	2000      	movs	r0, #0
 800693e:	4770      	bx	lr
 8006940:	2020      	movs	r0, #32
 8006942:	4770      	bx	lr

08006944 <__i2b>:
 8006944:	b510      	push	{r4, lr}
 8006946:	460c      	mov	r4, r1
 8006948:	2101      	movs	r1, #1
 800694a:	f7ff feb5 	bl	80066b8 <_Balloc>
 800694e:	4602      	mov	r2, r0
 8006950:	b928      	cbnz	r0, 800695e <__i2b+0x1a>
 8006952:	4b05      	ldr	r3, [pc, #20]	; (8006968 <__i2b+0x24>)
 8006954:	4805      	ldr	r0, [pc, #20]	; (800696c <__i2b+0x28>)
 8006956:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800695a:	f000 fda9 	bl	80074b0 <__assert_func>
 800695e:	2301      	movs	r3, #1
 8006960:	6144      	str	r4, [r0, #20]
 8006962:	6103      	str	r3, [r0, #16]
 8006964:	bd10      	pop	{r4, pc}
 8006966:	bf00      	nop
 8006968:	080081db 	.word	0x080081db
 800696c:	0800826c 	.word	0x0800826c

08006970 <__multiply>:
 8006970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006974:	4614      	mov	r4, r2
 8006976:	690a      	ldr	r2, [r1, #16]
 8006978:	6923      	ldr	r3, [r4, #16]
 800697a:	429a      	cmp	r2, r3
 800697c:	bfb8      	it	lt
 800697e:	460b      	movlt	r3, r1
 8006980:	460d      	mov	r5, r1
 8006982:	bfbc      	itt	lt
 8006984:	4625      	movlt	r5, r4
 8006986:	461c      	movlt	r4, r3
 8006988:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800698c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006990:	68ab      	ldr	r3, [r5, #8]
 8006992:	6869      	ldr	r1, [r5, #4]
 8006994:	eb0a 0709 	add.w	r7, sl, r9
 8006998:	42bb      	cmp	r3, r7
 800699a:	b085      	sub	sp, #20
 800699c:	bfb8      	it	lt
 800699e:	3101      	addlt	r1, #1
 80069a0:	f7ff fe8a 	bl	80066b8 <_Balloc>
 80069a4:	b930      	cbnz	r0, 80069b4 <__multiply+0x44>
 80069a6:	4602      	mov	r2, r0
 80069a8:	4b42      	ldr	r3, [pc, #264]	; (8006ab4 <__multiply+0x144>)
 80069aa:	4843      	ldr	r0, [pc, #268]	; (8006ab8 <__multiply+0x148>)
 80069ac:	f240 115d 	movw	r1, #349	; 0x15d
 80069b0:	f000 fd7e 	bl	80074b0 <__assert_func>
 80069b4:	f100 0614 	add.w	r6, r0, #20
 80069b8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80069bc:	4633      	mov	r3, r6
 80069be:	2200      	movs	r2, #0
 80069c0:	4543      	cmp	r3, r8
 80069c2:	d31e      	bcc.n	8006a02 <__multiply+0x92>
 80069c4:	f105 0c14 	add.w	ip, r5, #20
 80069c8:	f104 0314 	add.w	r3, r4, #20
 80069cc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80069d0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80069d4:	9202      	str	r2, [sp, #8]
 80069d6:	ebac 0205 	sub.w	r2, ip, r5
 80069da:	3a15      	subs	r2, #21
 80069dc:	f022 0203 	bic.w	r2, r2, #3
 80069e0:	3204      	adds	r2, #4
 80069e2:	f105 0115 	add.w	r1, r5, #21
 80069e6:	458c      	cmp	ip, r1
 80069e8:	bf38      	it	cc
 80069ea:	2204      	movcc	r2, #4
 80069ec:	9201      	str	r2, [sp, #4]
 80069ee:	9a02      	ldr	r2, [sp, #8]
 80069f0:	9303      	str	r3, [sp, #12]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d808      	bhi.n	8006a08 <__multiply+0x98>
 80069f6:	2f00      	cmp	r7, #0
 80069f8:	dc55      	bgt.n	8006aa6 <__multiply+0x136>
 80069fa:	6107      	str	r7, [r0, #16]
 80069fc:	b005      	add	sp, #20
 80069fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a02:	f843 2b04 	str.w	r2, [r3], #4
 8006a06:	e7db      	b.n	80069c0 <__multiply+0x50>
 8006a08:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a0c:	f1ba 0f00 	cmp.w	sl, #0
 8006a10:	d020      	beq.n	8006a54 <__multiply+0xe4>
 8006a12:	f105 0e14 	add.w	lr, r5, #20
 8006a16:	46b1      	mov	r9, r6
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006a1e:	f8d9 b000 	ldr.w	fp, [r9]
 8006a22:	b2a1      	uxth	r1, r4
 8006a24:	fa1f fb8b 	uxth.w	fp, fp
 8006a28:	fb0a b101 	mla	r1, sl, r1, fp
 8006a2c:	4411      	add	r1, r2
 8006a2e:	f8d9 2000 	ldr.w	r2, [r9]
 8006a32:	0c24      	lsrs	r4, r4, #16
 8006a34:	0c12      	lsrs	r2, r2, #16
 8006a36:	fb0a 2404 	mla	r4, sl, r4, r2
 8006a3a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006a3e:	b289      	uxth	r1, r1
 8006a40:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006a44:	45f4      	cmp	ip, lr
 8006a46:	f849 1b04 	str.w	r1, [r9], #4
 8006a4a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006a4e:	d8e4      	bhi.n	8006a1a <__multiply+0xaa>
 8006a50:	9901      	ldr	r1, [sp, #4]
 8006a52:	5072      	str	r2, [r6, r1]
 8006a54:	9a03      	ldr	r2, [sp, #12]
 8006a56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	f1b9 0f00 	cmp.w	r9, #0
 8006a60:	d01f      	beq.n	8006aa2 <__multiply+0x132>
 8006a62:	6834      	ldr	r4, [r6, #0]
 8006a64:	f105 0114 	add.w	r1, r5, #20
 8006a68:	46b6      	mov	lr, r6
 8006a6a:	f04f 0a00 	mov.w	sl, #0
 8006a6e:	880a      	ldrh	r2, [r1, #0]
 8006a70:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006a74:	fb09 b202 	mla	r2, r9, r2, fp
 8006a78:	4492      	add	sl, r2
 8006a7a:	b2a4      	uxth	r4, r4
 8006a7c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006a80:	f84e 4b04 	str.w	r4, [lr], #4
 8006a84:	f851 4b04 	ldr.w	r4, [r1], #4
 8006a88:	f8be 2000 	ldrh.w	r2, [lr]
 8006a8c:	0c24      	lsrs	r4, r4, #16
 8006a8e:	fb09 2404 	mla	r4, r9, r4, r2
 8006a92:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006a96:	458c      	cmp	ip, r1
 8006a98:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006a9c:	d8e7      	bhi.n	8006a6e <__multiply+0xfe>
 8006a9e:	9a01      	ldr	r2, [sp, #4]
 8006aa0:	50b4      	str	r4, [r6, r2]
 8006aa2:	3604      	adds	r6, #4
 8006aa4:	e7a3      	b.n	80069ee <__multiply+0x7e>
 8006aa6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1a5      	bne.n	80069fa <__multiply+0x8a>
 8006aae:	3f01      	subs	r7, #1
 8006ab0:	e7a1      	b.n	80069f6 <__multiply+0x86>
 8006ab2:	bf00      	nop
 8006ab4:	080081db 	.word	0x080081db
 8006ab8:	0800826c 	.word	0x0800826c

08006abc <__pow5mult>:
 8006abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac0:	4615      	mov	r5, r2
 8006ac2:	f012 0203 	ands.w	r2, r2, #3
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	460f      	mov	r7, r1
 8006aca:	d007      	beq.n	8006adc <__pow5mult+0x20>
 8006acc:	4c25      	ldr	r4, [pc, #148]	; (8006b64 <__pow5mult+0xa8>)
 8006ace:	3a01      	subs	r2, #1
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ad6:	f7ff fe51 	bl	800677c <__multadd>
 8006ada:	4607      	mov	r7, r0
 8006adc:	10ad      	asrs	r5, r5, #2
 8006ade:	d03d      	beq.n	8006b5c <__pow5mult+0xa0>
 8006ae0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ae2:	b97c      	cbnz	r4, 8006b04 <__pow5mult+0x48>
 8006ae4:	2010      	movs	r0, #16
 8006ae6:	f7ff fdbf 	bl	8006668 <malloc>
 8006aea:	4602      	mov	r2, r0
 8006aec:	6270      	str	r0, [r6, #36]	; 0x24
 8006aee:	b928      	cbnz	r0, 8006afc <__pow5mult+0x40>
 8006af0:	4b1d      	ldr	r3, [pc, #116]	; (8006b68 <__pow5mult+0xac>)
 8006af2:	481e      	ldr	r0, [pc, #120]	; (8006b6c <__pow5mult+0xb0>)
 8006af4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006af8:	f000 fcda 	bl	80074b0 <__assert_func>
 8006afc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b00:	6004      	str	r4, [r0, #0]
 8006b02:	60c4      	str	r4, [r0, #12]
 8006b04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b0c:	b94c      	cbnz	r4, 8006b22 <__pow5mult+0x66>
 8006b0e:	f240 2171 	movw	r1, #625	; 0x271
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7ff ff16 	bl	8006944 <__i2b>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b1e:	4604      	mov	r4, r0
 8006b20:	6003      	str	r3, [r0, #0]
 8006b22:	f04f 0900 	mov.w	r9, #0
 8006b26:	07eb      	lsls	r3, r5, #31
 8006b28:	d50a      	bpl.n	8006b40 <__pow5mult+0x84>
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f7ff ff1e 	bl	8006970 <__multiply>
 8006b34:	4639      	mov	r1, r7
 8006b36:	4680      	mov	r8, r0
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f7ff fdfd 	bl	8006738 <_Bfree>
 8006b3e:	4647      	mov	r7, r8
 8006b40:	106d      	asrs	r5, r5, #1
 8006b42:	d00b      	beq.n	8006b5c <__pow5mult+0xa0>
 8006b44:	6820      	ldr	r0, [r4, #0]
 8006b46:	b938      	cbnz	r0, 8006b58 <__pow5mult+0x9c>
 8006b48:	4622      	mov	r2, r4
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7ff ff0f 	bl	8006970 <__multiply>
 8006b52:	6020      	str	r0, [r4, #0]
 8006b54:	f8c0 9000 	str.w	r9, [r0]
 8006b58:	4604      	mov	r4, r0
 8006b5a:	e7e4      	b.n	8006b26 <__pow5mult+0x6a>
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b62:	bf00      	nop
 8006b64:	080083c0 	.word	0x080083c0
 8006b68:	08008165 	.word	0x08008165
 8006b6c:	0800826c 	.word	0x0800826c

08006b70 <__lshift>:
 8006b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b74:	460c      	mov	r4, r1
 8006b76:	6849      	ldr	r1, [r1, #4]
 8006b78:	6923      	ldr	r3, [r4, #16]
 8006b7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b7e:	68a3      	ldr	r3, [r4, #8]
 8006b80:	4607      	mov	r7, r0
 8006b82:	4691      	mov	r9, r2
 8006b84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b88:	f108 0601 	add.w	r6, r8, #1
 8006b8c:	42b3      	cmp	r3, r6
 8006b8e:	db0b      	blt.n	8006ba8 <__lshift+0x38>
 8006b90:	4638      	mov	r0, r7
 8006b92:	f7ff fd91 	bl	80066b8 <_Balloc>
 8006b96:	4605      	mov	r5, r0
 8006b98:	b948      	cbnz	r0, 8006bae <__lshift+0x3e>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	4b28      	ldr	r3, [pc, #160]	; (8006c40 <__lshift+0xd0>)
 8006b9e:	4829      	ldr	r0, [pc, #164]	; (8006c44 <__lshift+0xd4>)
 8006ba0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ba4:	f000 fc84 	bl	80074b0 <__assert_func>
 8006ba8:	3101      	adds	r1, #1
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	e7ee      	b.n	8006b8c <__lshift+0x1c>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f100 0114 	add.w	r1, r0, #20
 8006bb4:	f100 0210 	add.w	r2, r0, #16
 8006bb8:	4618      	mov	r0, r3
 8006bba:	4553      	cmp	r3, sl
 8006bbc:	db33      	blt.n	8006c26 <__lshift+0xb6>
 8006bbe:	6920      	ldr	r0, [r4, #16]
 8006bc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bc4:	f104 0314 	add.w	r3, r4, #20
 8006bc8:	f019 091f 	ands.w	r9, r9, #31
 8006bcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bd4:	d02b      	beq.n	8006c2e <__lshift+0xbe>
 8006bd6:	f1c9 0e20 	rsb	lr, r9, #32
 8006bda:	468a      	mov	sl, r1
 8006bdc:	2200      	movs	r2, #0
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	fa00 f009 	lsl.w	r0, r0, r9
 8006be4:	4302      	orrs	r2, r0
 8006be6:	f84a 2b04 	str.w	r2, [sl], #4
 8006bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bee:	459c      	cmp	ip, r3
 8006bf0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006bf4:	d8f3      	bhi.n	8006bde <__lshift+0x6e>
 8006bf6:	ebac 0304 	sub.w	r3, ip, r4
 8006bfa:	3b15      	subs	r3, #21
 8006bfc:	f023 0303 	bic.w	r3, r3, #3
 8006c00:	3304      	adds	r3, #4
 8006c02:	f104 0015 	add.w	r0, r4, #21
 8006c06:	4584      	cmp	ip, r0
 8006c08:	bf38      	it	cc
 8006c0a:	2304      	movcc	r3, #4
 8006c0c:	50ca      	str	r2, [r1, r3]
 8006c0e:	b10a      	cbz	r2, 8006c14 <__lshift+0xa4>
 8006c10:	f108 0602 	add.w	r6, r8, #2
 8006c14:	3e01      	subs	r6, #1
 8006c16:	4638      	mov	r0, r7
 8006c18:	612e      	str	r6, [r5, #16]
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	f7ff fd8c 	bl	8006738 <_Bfree>
 8006c20:	4628      	mov	r0, r5
 8006c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c26:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	e7c5      	b.n	8006bba <__lshift+0x4a>
 8006c2e:	3904      	subs	r1, #4
 8006c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c34:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c38:	459c      	cmp	ip, r3
 8006c3a:	d8f9      	bhi.n	8006c30 <__lshift+0xc0>
 8006c3c:	e7ea      	b.n	8006c14 <__lshift+0xa4>
 8006c3e:	bf00      	nop
 8006c40:	080081db 	.word	0x080081db
 8006c44:	0800826c 	.word	0x0800826c

08006c48 <__mcmp>:
 8006c48:	b530      	push	{r4, r5, lr}
 8006c4a:	6902      	ldr	r2, [r0, #16]
 8006c4c:	690c      	ldr	r4, [r1, #16]
 8006c4e:	1b12      	subs	r2, r2, r4
 8006c50:	d10e      	bne.n	8006c70 <__mcmp+0x28>
 8006c52:	f100 0314 	add.w	r3, r0, #20
 8006c56:	3114      	adds	r1, #20
 8006c58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006c64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c68:	42a5      	cmp	r5, r4
 8006c6a:	d003      	beq.n	8006c74 <__mcmp+0x2c>
 8006c6c:	d305      	bcc.n	8006c7a <__mcmp+0x32>
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4610      	mov	r0, r2
 8006c72:	bd30      	pop	{r4, r5, pc}
 8006c74:	4283      	cmp	r3, r0
 8006c76:	d3f3      	bcc.n	8006c60 <__mcmp+0x18>
 8006c78:	e7fa      	b.n	8006c70 <__mcmp+0x28>
 8006c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7e:	e7f7      	b.n	8006c70 <__mcmp+0x28>

08006c80 <__mdiff>:
 8006c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c84:	460c      	mov	r4, r1
 8006c86:	4606      	mov	r6, r0
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	4617      	mov	r7, r2
 8006c8e:	f7ff ffdb 	bl	8006c48 <__mcmp>
 8006c92:	1e05      	subs	r5, r0, #0
 8006c94:	d110      	bne.n	8006cb8 <__mdiff+0x38>
 8006c96:	4629      	mov	r1, r5
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f7ff fd0d 	bl	80066b8 <_Balloc>
 8006c9e:	b930      	cbnz	r0, 8006cae <__mdiff+0x2e>
 8006ca0:	4b39      	ldr	r3, [pc, #228]	; (8006d88 <__mdiff+0x108>)
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	f240 2132 	movw	r1, #562	; 0x232
 8006ca8:	4838      	ldr	r0, [pc, #224]	; (8006d8c <__mdiff+0x10c>)
 8006caa:	f000 fc01 	bl	80074b0 <__assert_func>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb8:	bfa4      	itt	ge
 8006cba:	463b      	movge	r3, r7
 8006cbc:	4627      	movge	r7, r4
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	bfa6      	itte	ge
 8006cc4:	461c      	movge	r4, r3
 8006cc6:	2500      	movge	r5, #0
 8006cc8:	2501      	movlt	r5, #1
 8006cca:	f7ff fcf5 	bl	80066b8 <_Balloc>
 8006cce:	b920      	cbnz	r0, 8006cda <__mdiff+0x5a>
 8006cd0:	4b2d      	ldr	r3, [pc, #180]	; (8006d88 <__mdiff+0x108>)
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006cd8:	e7e6      	b.n	8006ca8 <__mdiff+0x28>
 8006cda:	693e      	ldr	r6, [r7, #16]
 8006cdc:	60c5      	str	r5, [r0, #12]
 8006cde:	6925      	ldr	r5, [r4, #16]
 8006ce0:	f107 0114 	add.w	r1, r7, #20
 8006ce4:	f104 0914 	add.w	r9, r4, #20
 8006ce8:	f100 0e14 	add.w	lr, r0, #20
 8006cec:	f107 0210 	add.w	r2, r7, #16
 8006cf0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006cf4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006cf8:	46f2      	mov	sl, lr
 8006cfa:	2700      	movs	r7, #0
 8006cfc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006d04:	fa1f f883 	uxth.w	r8, r3
 8006d08:	fa17 f78b 	uxtah	r7, r7, fp
 8006d0c:	0c1b      	lsrs	r3, r3, #16
 8006d0e:	eba7 0808 	sub.w	r8, r7, r8
 8006d12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d1a:	fa1f f888 	uxth.w	r8, r8
 8006d1e:	141f      	asrs	r7, r3, #16
 8006d20:	454d      	cmp	r5, r9
 8006d22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d26:	f84a 3b04 	str.w	r3, [sl], #4
 8006d2a:	d8e7      	bhi.n	8006cfc <__mdiff+0x7c>
 8006d2c:	1b2b      	subs	r3, r5, r4
 8006d2e:	3b15      	subs	r3, #21
 8006d30:	f023 0303 	bic.w	r3, r3, #3
 8006d34:	3304      	adds	r3, #4
 8006d36:	3415      	adds	r4, #21
 8006d38:	42a5      	cmp	r5, r4
 8006d3a:	bf38      	it	cc
 8006d3c:	2304      	movcc	r3, #4
 8006d3e:	4419      	add	r1, r3
 8006d40:	4473      	add	r3, lr
 8006d42:	469e      	mov	lr, r3
 8006d44:	460d      	mov	r5, r1
 8006d46:	4565      	cmp	r5, ip
 8006d48:	d30e      	bcc.n	8006d68 <__mdiff+0xe8>
 8006d4a:	f10c 0203 	add.w	r2, ip, #3
 8006d4e:	1a52      	subs	r2, r2, r1
 8006d50:	f022 0203 	bic.w	r2, r2, #3
 8006d54:	3903      	subs	r1, #3
 8006d56:	458c      	cmp	ip, r1
 8006d58:	bf38      	it	cc
 8006d5a:	2200      	movcc	r2, #0
 8006d5c:	441a      	add	r2, r3
 8006d5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006d62:	b17b      	cbz	r3, 8006d84 <__mdiff+0x104>
 8006d64:	6106      	str	r6, [r0, #16]
 8006d66:	e7a5      	b.n	8006cb4 <__mdiff+0x34>
 8006d68:	f855 8b04 	ldr.w	r8, [r5], #4
 8006d6c:	fa17 f488 	uxtah	r4, r7, r8
 8006d70:	1422      	asrs	r2, r4, #16
 8006d72:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006d76:	b2a4      	uxth	r4, r4
 8006d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006d7c:	f84e 4b04 	str.w	r4, [lr], #4
 8006d80:	1417      	asrs	r7, r2, #16
 8006d82:	e7e0      	b.n	8006d46 <__mdiff+0xc6>
 8006d84:	3e01      	subs	r6, #1
 8006d86:	e7ea      	b.n	8006d5e <__mdiff+0xde>
 8006d88:	080081db 	.word	0x080081db
 8006d8c:	0800826c 	.word	0x0800826c

08006d90 <__ulp>:
 8006d90:	b082      	sub	sp, #8
 8006d92:	ed8d 0b00 	vstr	d0, [sp]
 8006d96:	9b01      	ldr	r3, [sp, #4]
 8006d98:	4912      	ldr	r1, [pc, #72]	; (8006de4 <__ulp+0x54>)
 8006d9a:	4019      	ands	r1, r3
 8006d9c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006da0:	2900      	cmp	r1, #0
 8006da2:	dd05      	ble.n	8006db0 <__ulp+0x20>
 8006da4:	2200      	movs	r2, #0
 8006da6:	460b      	mov	r3, r1
 8006da8:	ec43 2b10 	vmov	d0, r2, r3
 8006dac:	b002      	add	sp, #8
 8006dae:	4770      	bx	lr
 8006db0:	4249      	negs	r1, r1
 8006db2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006db6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006dba:	f04f 0200 	mov.w	r2, #0
 8006dbe:	f04f 0300 	mov.w	r3, #0
 8006dc2:	da04      	bge.n	8006dce <__ulp+0x3e>
 8006dc4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006dc8:	fa41 f300 	asr.w	r3, r1, r0
 8006dcc:	e7ec      	b.n	8006da8 <__ulp+0x18>
 8006dce:	f1a0 0114 	sub.w	r1, r0, #20
 8006dd2:	291e      	cmp	r1, #30
 8006dd4:	bfda      	itte	le
 8006dd6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006dda:	fa20 f101 	lsrle.w	r1, r0, r1
 8006dde:	2101      	movgt	r1, #1
 8006de0:	460a      	mov	r2, r1
 8006de2:	e7e1      	b.n	8006da8 <__ulp+0x18>
 8006de4:	7ff00000 	.word	0x7ff00000

08006de8 <__b2d>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	6905      	ldr	r5, [r0, #16]
 8006dec:	f100 0714 	add.w	r7, r0, #20
 8006df0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006df4:	1f2e      	subs	r6, r5, #4
 8006df6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f7ff fd52 	bl	80068a4 <__hi0bits>
 8006e00:	f1c0 0320 	rsb	r3, r0, #32
 8006e04:	280a      	cmp	r0, #10
 8006e06:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006e84 <__b2d+0x9c>
 8006e0a:	600b      	str	r3, [r1, #0]
 8006e0c:	dc14      	bgt.n	8006e38 <__b2d+0x50>
 8006e0e:	f1c0 0e0b 	rsb	lr, r0, #11
 8006e12:	fa24 f10e 	lsr.w	r1, r4, lr
 8006e16:	42b7      	cmp	r7, r6
 8006e18:	ea41 030c 	orr.w	r3, r1, ip
 8006e1c:	bf34      	ite	cc
 8006e1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006e22:	2100      	movcs	r1, #0
 8006e24:	3015      	adds	r0, #21
 8006e26:	fa04 f000 	lsl.w	r0, r4, r0
 8006e2a:	fa21 f10e 	lsr.w	r1, r1, lr
 8006e2e:	ea40 0201 	orr.w	r2, r0, r1
 8006e32:	ec43 2b10 	vmov	d0, r2, r3
 8006e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e38:	42b7      	cmp	r7, r6
 8006e3a:	bf3a      	itte	cc
 8006e3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006e40:	f1a5 0608 	subcc.w	r6, r5, #8
 8006e44:	2100      	movcs	r1, #0
 8006e46:	380b      	subs	r0, #11
 8006e48:	d017      	beq.n	8006e7a <__b2d+0x92>
 8006e4a:	f1c0 0c20 	rsb	ip, r0, #32
 8006e4e:	fa04 f500 	lsl.w	r5, r4, r0
 8006e52:	42be      	cmp	r6, r7
 8006e54:	fa21 f40c 	lsr.w	r4, r1, ip
 8006e58:	ea45 0504 	orr.w	r5, r5, r4
 8006e5c:	bf8c      	ite	hi
 8006e5e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006e62:	2400      	movls	r4, #0
 8006e64:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006e68:	fa01 f000 	lsl.w	r0, r1, r0
 8006e6c:	fa24 f40c 	lsr.w	r4, r4, ip
 8006e70:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006e74:	ea40 0204 	orr.w	r2, r0, r4
 8006e78:	e7db      	b.n	8006e32 <__b2d+0x4a>
 8006e7a:	ea44 030c 	orr.w	r3, r4, ip
 8006e7e:	460a      	mov	r2, r1
 8006e80:	e7d7      	b.n	8006e32 <__b2d+0x4a>
 8006e82:	bf00      	nop
 8006e84:	3ff00000 	.word	0x3ff00000

08006e88 <__d2b>:
 8006e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e8c:	4689      	mov	r9, r1
 8006e8e:	2101      	movs	r1, #1
 8006e90:	ec57 6b10 	vmov	r6, r7, d0
 8006e94:	4690      	mov	r8, r2
 8006e96:	f7ff fc0f 	bl	80066b8 <_Balloc>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	b930      	cbnz	r0, 8006eac <__d2b+0x24>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	4b25      	ldr	r3, [pc, #148]	; (8006f38 <__d2b+0xb0>)
 8006ea2:	4826      	ldr	r0, [pc, #152]	; (8006f3c <__d2b+0xb4>)
 8006ea4:	f240 310a 	movw	r1, #778	; 0x30a
 8006ea8:	f000 fb02 	bl	80074b0 <__assert_func>
 8006eac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006eb4:	bb35      	cbnz	r5, 8006f04 <__d2b+0x7c>
 8006eb6:	2e00      	cmp	r6, #0
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	d028      	beq.n	8006f0e <__d2b+0x86>
 8006ebc:	4668      	mov	r0, sp
 8006ebe:	9600      	str	r6, [sp, #0]
 8006ec0:	f7ff fd10 	bl	80068e4 <__lo0bits>
 8006ec4:	9900      	ldr	r1, [sp, #0]
 8006ec6:	b300      	cbz	r0, 8006f0a <__d2b+0x82>
 8006ec8:	9a01      	ldr	r2, [sp, #4]
 8006eca:	f1c0 0320 	rsb	r3, r0, #32
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	40c2      	lsrs	r2, r0
 8006ed6:	6163      	str	r3, [r4, #20]
 8006ed8:	9201      	str	r2, [sp, #4]
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	61a3      	str	r3, [r4, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bf14      	ite	ne
 8006ee2:	2202      	movne	r2, #2
 8006ee4:	2201      	moveq	r2, #1
 8006ee6:	6122      	str	r2, [r4, #16]
 8006ee8:	b1d5      	cbz	r5, 8006f20 <__d2b+0x98>
 8006eea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006eee:	4405      	add	r5, r0
 8006ef0:	f8c9 5000 	str.w	r5, [r9]
 8006ef4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ef8:	f8c8 0000 	str.w	r0, [r8]
 8006efc:	4620      	mov	r0, r4
 8006efe:	b003      	add	sp, #12
 8006f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f08:	e7d5      	b.n	8006eb6 <__d2b+0x2e>
 8006f0a:	6161      	str	r1, [r4, #20]
 8006f0c:	e7e5      	b.n	8006eda <__d2b+0x52>
 8006f0e:	a801      	add	r0, sp, #4
 8006f10:	f7ff fce8 	bl	80068e4 <__lo0bits>
 8006f14:	9b01      	ldr	r3, [sp, #4]
 8006f16:	6163      	str	r3, [r4, #20]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	6122      	str	r2, [r4, #16]
 8006f1c:	3020      	adds	r0, #32
 8006f1e:	e7e3      	b.n	8006ee8 <__d2b+0x60>
 8006f20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f28:	f8c9 0000 	str.w	r0, [r9]
 8006f2c:	6918      	ldr	r0, [r3, #16]
 8006f2e:	f7ff fcb9 	bl	80068a4 <__hi0bits>
 8006f32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f36:	e7df      	b.n	8006ef8 <__d2b+0x70>
 8006f38:	080081db 	.word	0x080081db
 8006f3c:	0800826c 	.word	0x0800826c

08006f40 <__ratio>:
 8006f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f44:	4688      	mov	r8, r1
 8006f46:	4669      	mov	r1, sp
 8006f48:	4681      	mov	r9, r0
 8006f4a:	f7ff ff4d 	bl	8006de8 <__b2d>
 8006f4e:	a901      	add	r1, sp, #4
 8006f50:	4640      	mov	r0, r8
 8006f52:	ec55 4b10 	vmov	r4, r5, d0
 8006f56:	f7ff ff47 	bl	8006de8 <__b2d>
 8006f5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006f62:	eba3 0c02 	sub.w	ip, r3, r2
 8006f66:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f6a:	1a9b      	subs	r3, r3, r2
 8006f6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006f70:	ec51 0b10 	vmov	r0, r1, d0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	bfd6      	itet	le
 8006f78:	460a      	movle	r2, r1
 8006f7a:	462a      	movgt	r2, r5
 8006f7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006f80:	468b      	mov	fp, r1
 8006f82:	462f      	mov	r7, r5
 8006f84:	bfd4      	ite	le
 8006f86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006f8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006f8e:	4620      	mov	r0, r4
 8006f90:	ee10 2a10 	vmov	r2, s0
 8006f94:	465b      	mov	r3, fp
 8006f96:	4639      	mov	r1, r7
 8006f98:	f7f9 fc60 	bl	800085c <__aeabi_ddiv>
 8006f9c:	ec41 0b10 	vmov	d0, r0, r1
 8006fa0:	b003      	add	sp, #12
 8006fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006fa6 <__copybits>:
 8006fa6:	3901      	subs	r1, #1
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	1149      	asrs	r1, r1, #5
 8006fac:	6914      	ldr	r4, [r2, #16]
 8006fae:	3101      	adds	r1, #1
 8006fb0:	f102 0314 	add.w	r3, r2, #20
 8006fb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006fb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006fbc:	1f05      	subs	r5, r0, #4
 8006fbe:	42a3      	cmp	r3, r4
 8006fc0:	d30c      	bcc.n	8006fdc <__copybits+0x36>
 8006fc2:	1aa3      	subs	r3, r4, r2
 8006fc4:	3b11      	subs	r3, #17
 8006fc6:	f023 0303 	bic.w	r3, r3, #3
 8006fca:	3211      	adds	r2, #17
 8006fcc:	42a2      	cmp	r2, r4
 8006fce:	bf88      	it	hi
 8006fd0:	2300      	movhi	r3, #0
 8006fd2:	4418      	add	r0, r3
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4288      	cmp	r0, r1
 8006fd8:	d305      	bcc.n	8006fe6 <__copybits+0x40>
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	f853 6b04 	ldr.w	r6, [r3], #4
 8006fe0:	f845 6f04 	str.w	r6, [r5, #4]!
 8006fe4:	e7eb      	b.n	8006fbe <__copybits+0x18>
 8006fe6:	f840 3b04 	str.w	r3, [r0], #4
 8006fea:	e7f4      	b.n	8006fd6 <__copybits+0x30>

08006fec <__any_on>:
 8006fec:	f100 0214 	add.w	r2, r0, #20
 8006ff0:	6900      	ldr	r0, [r0, #16]
 8006ff2:	114b      	asrs	r3, r1, #5
 8006ff4:	4298      	cmp	r0, r3
 8006ff6:	b510      	push	{r4, lr}
 8006ff8:	db11      	blt.n	800701e <__any_on+0x32>
 8006ffa:	dd0a      	ble.n	8007012 <__any_on+0x26>
 8006ffc:	f011 011f 	ands.w	r1, r1, #31
 8007000:	d007      	beq.n	8007012 <__any_on+0x26>
 8007002:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007006:	fa24 f001 	lsr.w	r0, r4, r1
 800700a:	fa00 f101 	lsl.w	r1, r0, r1
 800700e:	428c      	cmp	r4, r1
 8007010:	d10b      	bne.n	800702a <__any_on+0x3e>
 8007012:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007016:	4293      	cmp	r3, r2
 8007018:	d803      	bhi.n	8007022 <__any_on+0x36>
 800701a:	2000      	movs	r0, #0
 800701c:	bd10      	pop	{r4, pc}
 800701e:	4603      	mov	r3, r0
 8007020:	e7f7      	b.n	8007012 <__any_on+0x26>
 8007022:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007026:	2900      	cmp	r1, #0
 8007028:	d0f5      	beq.n	8007016 <__any_on+0x2a>
 800702a:	2001      	movs	r0, #1
 800702c:	e7f6      	b.n	800701c <__any_on+0x30>

0800702e <_calloc_r>:
 800702e:	b513      	push	{r0, r1, r4, lr}
 8007030:	434a      	muls	r2, r1
 8007032:	4611      	mov	r1, r2
 8007034:	9201      	str	r2, [sp, #4]
 8007036:	f000 f859 	bl	80070ec <_malloc_r>
 800703a:	4604      	mov	r4, r0
 800703c:	b118      	cbz	r0, 8007046 <_calloc_r+0x18>
 800703e:	9a01      	ldr	r2, [sp, #4]
 8007040:	2100      	movs	r1, #0
 8007042:	f7fc fdb1 	bl	8003ba8 <memset>
 8007046:	4620      	mov	r0, r4
 8007048:	b002      	add	sp, #8
 800704a:	bd10      	pop	{r4, pc}

0800704c <_free_r>:
 800704c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800704e:	2900      	cmp	r1, #0
 8007050:	d048      	beq.n	80070e4 <_free_r+0x98>
 8007052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007056:	9001      	str	r0, [sp, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f1a1 0404 	sub.w	r4, r1, #4
 800705e:	bfb8      	it	lt
 8007060:	18e4      	addlt	r4, r4, r3
 8007062:	f000 fa6f 	bl	8007544 <__malloc_lock>
 8007066:	4a20      	ldr	r2, [pc, #128]	; (80070e8 <_free_r+0x9c>)
 8007068:	9801      	ldr	r0, [sp, #4]
 800706a:	6813      	ldr	r3, [r2, #0]
 800706c:	4615      	mov	r5, r2
 800706e:	b933      	cbnz	r3, 800707e <_free_r+0x32>
 8007070:	6063      	str	r3, [r4, #4]
 8007072:	6014      	str	r4, [r2, #0]
 8007074:	b003      	add	sp, #12
 8007076:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800707a:	f000 ba69 	b.w	8007550 <__malloc_unlock>
 800707e:	42a3      	cmp	r3, r4
 8007080:	d90b      	bls.n	800709a <_free_r+0x4e>
 8007082:	6821      	ldr	r1, [r4, #0]
 8007084:	1862      	adds	r2, r4, r1
 8007086:	4293      	cmp	r3, r2
 8007088:	bf04      	itt	eq
 800708a:	681a      	ldreq	r2, [r3, #0]
 800708c:	685b      	ldreq	r3, [r3, #4]
 800708e:	6063      	str	r3, [r4, #4]
 8007090:	bf04      	itt	eq
 8007092:	1852      	addeq	r2, r2, r1
 8007094:	6022      	streq	r2, [r4, #0]
 8007096:	602c      	str	r4, [r5, #0]
 8007098:	e7ec      	b.n	8007074 <_free_r+0x28>
 800709a:	461a      	mov	r2, r3
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	b10b      	cbz	r3, 80070a4 <_free_r+0x58>
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	d9fa      	bls.n	800709a <_free_r+0x4e>
 80070a4:	6811      	ldr	r1, [r2, #0]
 80070a6:	1855      	adds	r5, r2, r1
 80070a8:	42a5      	cmp	r5, r4
 80070aa:	d10b      	bne.n	80070c4 <_free_r+0x78>
 80070ac:	6824      	ldr	r4, [r4, #0]
 80070ae:	4421      	add	r1, r4
 80070b0:	1854      	adds	r4, r2, r1
 80070b2:	42a3      	cmp	r3, r4
 80070b4:	6011      	str	r1, [r2, #0]
 80070b6:	d1dd      	bne.n	8007074 <_free_r+0x28>
 80070b8:	681c      	ldr	r4, [r3, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	6053      	str	r3, [r2, #4]
 80070be:	4421      	add	r1, r4
 80070c0:	6011      	str	r1, [r2, #0]
 80070c2:	e7d7      	b.n	8007074 <_free_r+0x28>
 80070c4:	d902      	bls.n	80070cc <_free_r+0x80>
 80070c6:	230c      	movs	r3, #12
 80070c8:	6003      	str	r3, [r0, #0]
 80070ca:	e7d3      	b.n	8007074 <_free_r+0x28>
 80070cc:	6825      	ldr	r5, [r4, #0]
 80070ce:	1961      	adds	r1, r4, r5
 80070d0:	428b      	cmp	r3, r1
 80070d2:	bf04      	itt	eq
 80070d4:	6819      	ldreq	r1, [r3, #0]
 80070d6:	685b      	ldreq	r3, [r3, #4]
 80070d8:	6063      	str	r3, [r4, #4]
 80070da:	bf04      	itt	eq
 80070dc:	1949      	addeq	r1, r1, r5
 80070de:	6021      	streq	r1, [r4, #0]
 80070e0:	6054      	str	r4, [r2, #4]
 80070e2:	e7c7      	b.n	8007074 <_free_r+0x28>
 80070e4:	b003      	add	sp, #12
 80070e6:	bd30      	pop	{r4, r5, pc}
 80070e8:	20000264 	.word	0x20000264

080070ec <_malloc_r>:
 80070ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ee:	1ccd      	adds	r5, r1, #3
 80070f0:	f025 0503 	bic.w	r5, r5, #3
 80070f4:	3508      	adds	r5, #8
 80070f6:	2d0c      	cmp	r5, #12
 80070f8:	bf38      	it	cc
 80070fa:	250c      	movcc	r5, #12
 80070fc:	2d00      	cmp	r5, #0
 80070fe:	4606      	mov	r6, r0
 8007100:	db01      	blt.n	8007106 <_malloc_r+0x1a>
 8007102:	42a9      	cmp	r1, r5
 8007104:	d903      	bls.n	800710e <_malloc_r+0x22>
 8007106:	230c      	movs	r3, #12
 8007108:	6033      	str	r3, [r6, #0]
 800710a:	2000      	movs	r0, #0
 800710c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800710e:	f000 fa19 	bl	8007544 <__malloc_lock>
 8007112:	4921      	ldr	r1, [pc, #132]	; (8007198 <_malloc_r+0xac>)
 8007114:	680a      	ldr	r2, [r1, #0]
 8007116:	4614      	mov	r4, r2
 8007118:	b99c      	cbnz	r4, 8007142 <_malloc_r+0x56>
 800711a:	4f20      	ldr	r7, [pc, #128]	; (800719c <_malloc_r+0xb0>)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	b923      	cbnz	r3, 800712a <_malloc_r+0x3e>
 8007120:	4621      	mov	r1, r4
 8007122:	4630      	mov	r0, r6
 8007124:	f000 f9a0 	bl	8007468 <_sbrk_r>
 8007128:	6038      	str	r0, [r7, #0]
 800712a:	4629      	mov	r1, r5
 800712c:	4630      	mov	r0, r6
 800712e:	f000 f99b 	bl	8007468 <_sbrk_r>
 8007132:	1c43      	adds	r3, r0, #1
 8007134:	d123      	bne.n	800717e <_malloc_r+0x92>
 8007136:	230c      	movs	r3, #12
 8007138:	6033      	str	r3, [r6, #0]
 800713a:	4630      	mov	r0, r6
 800713c:	f000 fa08 	bl	8007550 <__malloc_unlock>
 8007140:	e7e3      	b.n	800710a <_malloc_r+0x1e>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	1b5b      	subs	r3, r3, r5
 8007146:	d417      	bmi.n	8007178 <_malloc_r+0x8c>
 8007148:	2b0b      	cmp	r3, #11
 800714a:	d903      	bls.n	8007154 <_malloc_r+0x68>
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	441c      	add	r4, r3
 8007150:	6025      	str	r5, [r4, #0]
 8007152:	e004      	b.n	800715e <_malloc_r+0x72>
 8007154:	6863      	ldr	r3, [r4, #4]
 8007156:	42a2      	cmp	r2, r4
 8007158:	bf0c      	ite	eq
 800715a:	600b      	streq	r3, [r1, #0]
 800715c:	6053      	strne	r3, [r2, #4]
 800715e:	4630      	mov	r0, r6
 8007160:	f000 f9f6 	bl	8007550 <__malloc_unlock>
 8007164:	f104 000b 	add.w	r0, r4, #11
 8007168:	1d23      	adds	r3, r4, #4
 800716a:	f020 0007 	bic.w	r0, r0, #7
 800716e:	1ac2      	subs	r2, r0, r3
 8007170:	d0cc      	beq.n	800710c <_malloc_r+0x20>
 8007172:	1a1b      	subs	r3, r3, r0
 8007174:	50a3      	str	r3, [r4, r2]
 8007176:	e7c9      	b.n	800710c <_malloc_r+0x20>
 8007178:	4622      	mov	r2, r4
 800717a:	6864      	ldr	r4, [r4, #4]
 800717c:	e7cc      	b.n	8007118 <_malloc_r+0x2c>
 800717e:	1cc4      	adds	r4, r0, #3
 8007180:	f024 0403 	bic.w	r4, r4, #3
 8007184:	42a0      	cmp	r0, r4
 8007186:	d0e3      	beq.n	8007150 <_malloc_r+0x64>
 8007188:	1a21      	subs	r1, r4, r0
 800718a:	4630      	mov	r0, r6
 800718c:	f000 f96c 	bl	8007468 <_sbrk_r>
 8007190:	3001      	adds	r0, #1
 8007192:	d1dd      	bne.n	8007150 <_malloc_r+0x64>
 8007194:	e7cf      	b.n	8007136 <_malloc_r+0x4a>
 8007196:	bf00      	nop
 8007198:	20000264 	.word	0x20000264
 800719c:	20000268 	.word	0x20000268

080071a0 <__ssputs_r>:
 80071a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a4:	688e      	ldr	r6, [r1, #8]
 80071a6:	429e      	cmp	r6, r3
 80071a8:	4682      	mov	sl, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	4690      	mov	r8, r2
 80071ae:	461f      	mov	r7, r3
 80071b0:	d838      	bhi.n	8007224 <__ssputs_r+0x84>
 80071b2:	898a      	ldrh	r2, [r1, #12]
 80071b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071b8:	d032      	beq.n	8007220 <__ssputs_r+0x80>
 80071ba:	6825      	ldr	r5, [r4, #0]
 80071bc:	6909      	ldr	r1, [r1, #16]
 80071be:	eba5 0901 	sub.w	r9, r5, r1
 80071c2:	6965      	ldr	r5, [r4, #20]
 80071c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071cc:	3301      	adds	r3, #1
 80071ce:	444b      	add	r3, r9
 80071d0:	106d      	asrs	r5, r5, #1
 80071d2:	429d      	cmp	r5, r3
 80071d4:	bf38      	it	cc
 80071d6:	461d      	movcc	r5, r3
 80071d8:	0553      	lsls	r3, r2, #21
 80071da:	d531      	bpl.n	8007240 <__ssputs_r+0xa0>
 80071dc:	4629      	mov	r1, r5
 80071de:	f7ff ff85 	bl	80070ec <_malloc_r>
 80071e2:	4606      	mov	r6, r0
 80071e4:	b950      	cbnz	r0, 80071fc <__ssputs_r+0x5c>
 80071e6:	230c      	movs	r3, #12
 80071e8:	f8ca 3000 	str.w	r3, [sl]
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	f04f 30ff 	mov.w	r0, #4294967295
 80071f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fc:	6921      	ldr	r1, [r4, #16]
 80071fe:	464a      	mov	r2, r9
 8007200:	f7ff fa4c 	bl	800669c <memcpy>
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800720a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720e:	81a3      	strh	r3, [r4, #12]
 8007210:	6126      	str	r6, [r4, #16]
 8007212:	6165      	str	r5, [r4, #20]
 8007214:	444e      	add	r6, r9
 8007216:	eba5 0509 	sub.w	r5, r5, r9
 800721a:	6026      	str	r6, [r4, #0]
 800721c:	60a5      	str	r5, [r4, #8]
 800721e:	463e      	mov	r6, r7
 8007220:	42be      	cmp	r6, r7
 8007222:	d900      	bls.n	8007226 <__ssputs_r+0x86>
 8007224:	463e      	mov	r6, r7
 8007226:	4632      	mov	r2, r6
 8007228:	6820      	ldr	r0, [r4, #0]
 800722a:	4641      	mov	r1, r8
 800722c:	f000 f970 	bl	8007510 <memmove>
 8007230:	68a3      	ldr	r3, [r4, #8]
 8007232:	6822      	ldr	r2, [r4, #0]
 8007234:	1b9b      	subs	r3, r3, r6
 8007236:	4432      	add	r2, r6
 8007238:	60a3      	str	r3, [r4, #8]
 800723a:	6022      	str	r2, [r4, #0]
 800723c:	2000      	movs	r0, #0
 800723e:	e7db      	b.n	80071f8 <__ssputs_r+0x58>
 8007240:	462a      	mov	r2, r5
 8007242:	f000 f98b 	bl	800755c <_realloc_r>
 8007246:	4606      	mov	r6, r0
 8007248:	2800      	cmp	r0, #0
 800724a:	d1e1      	bne.n	8007210 <__ssputs_r+0x70>
 800724c:	6921      	ldr	r1, [r4, #16]
 800724e:	4650      	mov	r0, sl
 8007250:	f7ff fefc 	bl	800704c <_free_r>
 8007254:	e7c7      	b.n	80071e6 <__ssputs_r+0x46>
	...

08007258 <_svfiprintf_r>:
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	4698      	mov	r8, r3
 800725e:	898b      	ldrh	r3, [r1, #12]
 8007260:	061b      	lsls	r3, r3, #24
 8007262:	b09d      	sub	sp, #116	; 0x74
 8007264:	4607      	mov	r7, r0
 8007266:	460d      	mov	r5, r1
 8007268:	4614      	mov	r4, r2
 800726a:	d50e      	bpl.n	800728a <_svfiprintf_r+0x32>
 800726c:	690b      	ldr	r3, [r1, #16]
 800726e:	b963      	cbnz	r3, 800728a <_svfiprintf_r+0x32>
 8007270:	2140      	movs	r1, #64	; 0x40
 8007272:	f7ff ff3b 	bl	80070ec <_malloc_r>
 8007276:	6028      	str	r0, [r5, #0]
 8007278:	6128      	str	r0, [r5, #16]
 800727a:	b920      	cbnz	r0, 8007286 <_svfiprintf_r+0x2e>
 800727c:	230c      	movs	r3, #12
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	e0d1      	b.n	800742a <_svfiprintf_r+0x1d2>
 8007286:	2340      	movs	r3, #64	; 0x40
 8007288:	616b      	str	r3, [r5, #20]
 800728a:	2300      	movs	r3, #0
 800728c:	9309      	str	r3, [sp, #36]	; 0x24
 800728e:	2320      	movs	r3, #32
 8007290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007294:	f8cd 800c 	str.w	r8, [sp, #12]
 8007298:	2330      	movs	r3, #48	; 0x30
 800729a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007444 <_svfiprintf_r+0x1ec>
 800729e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072a2:	f04f 0901 	mov.w	r9, #1
 80072a6:	4623      	mov	r3, r4
 80072a8:	469a      	mov	sl, r3
 80072aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ae:	b10a      	cbz	r2, 80072b4 <_svfiprintf_r+0x5c>
 80072b0:	2a25      	cmp	r2, #37	; 0x25
 80072b2:	d1f9      	bne.n	80072a8 <_svfiprintf_r+0x50>
 80072b4:	ebba 0b04 	subs.w	fp, sl, r4
 80072b8:	d00b      	beq.n	80072d2 <_svfiprintf_r+0x7a>
 80072ba:	465b      	mov	r3, fp
 80072bc:	4622      	mov	r2, r4
 80072be:	4629      	mov	r1, r5
 80072c0:	4638      	mov	r0, r7
 80072c2:	f7ff ff6d 	bl	80071a0 <__ssputs_r>
 80072c6:	3001      	adds	r0, #1
 80072c8:	f000 80aa 	beq.w	8007420 <_svfiprintf_r+0x1c8>
 80072cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ce:	445a      	add	r2, fp
 80072d0:	9209      	str	r2, [sp, #36]	; 0x24
 80072d2:	f89a 3000 	ldrb.w	r3, [sl]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80a2 	beq.w	8007420 <_svfiprintf_r+0x1c8>
 80072dc:	2300      	movs	r3, #0
 80072de:	f04f 32ff 	mov.w	r2, #4294967295
 80072e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072e6:	f10a 0a01 	add.w	sl, sl, #1
 80072ea:	9304      	str	r3, [sp, #16]
 80072ec:	9307      	str	r3, [sp, #28]
 80072ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072f2:	931a      	str	r3, [sp, #104]	; 0x68
 80072f4:	4654      	mov	r4, sl
 80072f6:	2205      	movs	r2, #5
 80072f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072fc:	4851      	ldr	r0, [pc, #324]	; (8007444 <_svfiprintf_r+0x1ec>)
 80072fe:	f7f8 ff77 	bl	80001f0 <memchr>
 8007302:	9a04      	ldr	r2, [sp, #16]
 8007304:	b9d8      	cbnz	r0, 800733e <_svfiprintf_r+0xe6>
 8007306:	06d0      	lsls	r0, r2, #27
 8007308:	bf44      	itt	mi
 800730a:	2320      	movmi	r3, #32
 800730c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007310:	0711      	lsls	r1, r2, #28
 8007312:	bf44      	itt	mi
 8007314:	232b      	movmi	r3, #43	; 0x2b
 8007316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800731a:	f89a 3000 	ldrb.w	r3, [sl]
 800731e:	2b2a      	cmp	r3, #42	; 0x2a
 8007320:	d015      	beq.n	800734e <_svfiprintf_r+0xf6>
 8007322:	9a07      	ldr	r2, [sp, #28]
 8007324:	4654      	mov	r4, sl
 8007326:	2000      	movs	r0, #0
 8007328:	f04f 0c0a 	mov.w	ip, #10
 800732c:	4621      	mov	r1, r4
 800732e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007332:	3b30      	subs	r3, #48	; 0x30
 8007334:	2b09      	cmp	r3, #9
 8007336:	d94e      	bls.n	80073d6 <_svfiprintf_r+0x17e>
 8007338:	b1b0      	cbz	r0, 8007368 <_svfiprintf_r+0x110>
 800733a:	9207      	str	r2, [sp, #28]
 800733c:	e014      	b.n	8007368 <_svfiprintf_r+0x110>
 800733e:	eba0 0308 	sub.w	r3, r0, r8
 8007342:	fa09 f303 	lsl.w	r3, r9, r3
 8007346:	4313      	orrs	r3, r2
 8007348:	9304      	str	r3, [sp, #16]
 800734a:	46a2      	mov	sl, r4
 800734c:	e7d2      	b.n	80072f4 <_svfiprintf_r+0x9c>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	1d19      	adds	r1, r3, #4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	9103      	str	r1, [sp, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	bfbb      	ittet	lt
 800735a:	425b      	neglt	r3, r3
 800735c:	f042 0202 	orrlt.w	r2, r2, #2
 8007360:	9307      	strge	r3, [sp, #28]
 8007362:	9307      	strlt	r3, [sp, #28]
 8007364:	bfb8      	it	lt
 8007366:	9204      	strlt	r2, [sp, #16]
 8007368:	7823      	ldrb	r3, [r4, #0]
 800736a:	2b2e      	cmp	r3, #46	; 0x2e
 800736c:	d10c      	bne.n	8007388 <_svfiprintf_r+0x130>
 800736e:	7863      	ldrb	r3, [r4, #1]
 8007370:	2b2a      	cmp	r3, #42	; 0x2a
 8007372:	d135      	bne.n	80073e0 <_svfiprintf_r+0x188>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	1d1a      	adds	r2, r3, #4
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	9203      	str	r2, [sp, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	bfb8      	it	lt
 8007380:	f04f 33ff 	movlt.w	r3, #4294967295
 8007384:	3402      	adds	r4, #2
 8007386:	9305      	str	r3, [sp, #20]
 8007388:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007454 <_svfiprintf_r+0x1fc>
 800738c:	7821      	ldrb	r1, [r4, #0]
 800738e:	2203      	movs	r2, #3
 8007390:	4650      	mov	r0, sl
 8007392:	f7f8 ff2d 	bl	80001f0 <memchr>
 8007396:	b140      	cbz	r0, 80073aa <_svfiprintf_r+0x152>
 8007398:	2340      	movs	r3, #64	; 0x40
 800739a:	eba0 000a 	sub.w	r0, r0, sl
 800739e:	fa03 f000 	lsl.w	r0, r3, r0
 80073a2:	9b04      	ldr	r3, [sp, #16]
 80073a4:	4303      	orrs	r3, r0
 80073a6:	3401      	adds	r4, #1
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ae:	4826      	ldr	r0, [pc, #152]	; (8007448 <_svfiprintf_r+0x1f0>)
 80073b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073b4:	2206      	movs	r2, #6
 80073b6:	f7f8 ff1b 	bl	80001f0 <memchr>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d038      	beq.n	8007430 <_svfiprintf_r+0x1d8>
 80073be:	4b23      	ldr	r3, [pc, #140]	; (800744c <_svfiprintf_r+0x1f4>)
 80073c0:	bb1b      	cbnz	r3, 800740a <_svfiprintf_r+0x1b2>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	3307      	adds	r3, #7
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	3308      	adds	r3, #8
 80073cc:	9303      	str	r3, [sp, #12]
 80073ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d0:	4433      	add	r3, r6
 80073d2:	9309      	str	r3, [sp, #36]	; 0x24
 80073d4:	e767      	b.n	80072a6 <_svfiprintf_r+0x4e>
 80073d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073da:	460c      	mov	r4, r1
 80073dc:	2001      	movs	r0, #1
 80073de:	e7a5      	b.n	800732c <_svfiprintf_r+0xd4>
 80073e0:	2300      	movs	r3, #0
 80073e2:	3401      	adds	r4, #1
 80073e4:	9305      	str	r3, [sp, #20]
 80073e6:	4619      	mov	r1, r3
 80073e8:	f04f 0c0a 	mov.w	ip, #10
 80073ec:	4620      	mov	r0, r4
 80073ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073f2:	3a30      	subs	r2, #48	; 0x30
 80073f4:	2a09      	cmp	r2, #9
 80073f6:	d903      	bls.n	8007400 <_svfiprintf_r+0x1a8>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0c5      	beq.n	8007388 <_svfiprintf_r+0x130>
 80073fc:	9105      	str	r1, [sp, #20]
 80073fe:	e7c3      	b.n	8007388 <_svfiprintf_r+0x130>
 8007400:	fb0c 2101 	mla	r1, ip, r1, r2
 8007404:	4604      	mov	r4, r0
 8007406:	2301      	movs	r3, #1
 8007408:	e7f0      	b.n	80073ec <_svfiprintf_r+0x194>
 800740a:	ab03      	add	r3, sp, #12
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	462a      	mov	r2, r5
 8007410:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <_svfiprintf_r+0x1f8>)
 8007412:	a904      	add	r1, sp, #16
 8007414:	4638      	mov	r0, r7
 8007416:	f7fc fc6f 	bl	8003cf8 <_printf_float>
 800741a:	1c42      	adds	r2, r0, #1
 800741c:	4606      	mov	r6, r0
 800741e:	d1d6      	bne.n	80073ce <_svfiprintf_r+0x176>
 8007420:	89ab      	ldrh	r3, [r5, #12]
 8007422:	065b      	lsls	r3, r3, #25
 8007424:	f53f af2c 	bmi.w	8007280 <_svfiprintf_r+0x28>
 8007428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800742a:	b01d      	add	sp, #116	; 0x74
 800742c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007430:	ab03      	add	r3, sp, #12
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	462a      	mov	r2, r5
 8007436:	4b06      	ldr	r3, [pc, #24]	; (8007450 <_svfiprintf_r+0x1f8>)
 8007438:	a904      	add	r1, sp, #16
 800743a:	4638      	mov	r0, r7
 800743c:	f7fc ff00 	bl	8004240 <_printf_i>
 8007440:	e7eb      	b.n	800741a <_svfiprintf_r+0x1c2>
 8007442:	bf00      	nop
 8007444:	080083cc 	.word	0x080083cc
 8007448:	080083d6 	.word	0x080083d6
 800744c:	08003cf9 	.word	0x08003cf9
 8007450:	080071a1 	.word	0x080071a1
 8007454:	080083d2 	.word	0x080083d2

08007458 <nan>:
 8007458:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007460 <nan+0x8>
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	00000000 	.word	0x00000000
 8007464:	7ff80000 	.word	0x7ff80000

08007468 <_sbrk_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d06      	ldr	r5, [pc, #24]	; (8007484 <_sbrk_r+0x1c>)
 800746c:	2300      	movs	r3, #0
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	f7fa fcfa 	bl	8001e6c <_sbrk>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_sbrk_r+0x1a>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_sbrk_r+0x1a>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	2000aefc 	.word	0x2000aefc

08007488 <nanf>:
 8007488:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007490 <nanf+0x8>
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	7fc00000 	.word	0x7fc00000

08007494 <__ascii_wctomb>:
 8007494:	b149      	cbz	r1, 80074aa <__ascii_wctomb+0x16>
 8007496:	2aff      	cmp	r2, #255	; 0xff
 8007498:	bf85      	ittet	hi
 800749a:	238a      	movhi	r3, #138	; 0x8a
 800749c:	6003      	strhi	r3, [r0, #0]
 800749e:	700a      	strbls	r2, [r1, #0]
 80074a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80074a4:	bf98      	it	ls
 80074a6:	2001      	movls	r0, #1
 80074a8:	4770      	bx	lr
 80074aa:	4608      	mov	r0, r1
 80074ac:	4770      	bx	lr
	...

080074b0 <__assert_func>:
 80074b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074b2:	4614      	mov	r4, r2
 80074b4:	461a      	mov	r2, r3
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <__assert_func+0x2c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4605      	mov	r5, r0
 80074bc:	68d8      	ldr	r0, [r3, #12]
 80074be:	b14c      	cbz	r4, 80074d4 <__assert_func+0x24>
 80074c0:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <__assert_func+0x30>)
 80074c2:	9100      	str	r1, [sp, #0]
 80074c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074c8:	4906      	ldr	r1, [pc, #24]	; (80074e4 <__assert_func+0x34>)
 80074ca:	462b      	mov	r3, r5
 80074cc:	f000 f80e 	bl	80074ec <fiprintf>
 80074d0:	f000 fa84 	bl	80079dc <abort>
 80074d4:	4b04      	ldr	r3, [pc, #16]	; (80074e8 <__assert_func+0x38>)
 80074d6:	461c      	mov	r4, r3
 80074d8:	e7f3      	b.n	80074c2 <__assert_func+0x12>
 80074da:	bf00      	nop
 80074dc:	20000054 	.word	0x20000054
 80074e0:	080083dd 	.word	0x080083dd
 80074e4:	080083ea 	.word	0x080083ea
 80074e8:	08008418 	.word	0x08008418

080074ec <fiprintf>:
 80074ec:	b40e      	push	{r1, r2, r3}
 80074ee:	b503      	push	{r0, r1, lr}
 80074f0:	4601      	mov	r1, r0
 80074f2:	ab03      	add	r3, sp, #12
 80074f4:	4805      	ldr	r0, [pc, #20]	; (800750c <fiprintf+0x20>)
 80074f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074fa:	6800      	ldr	r0, [r0, #0]
 80074fc:	9301      	str	r3, [sp, #4]
 80074fe:	f000 f87d 	bl	80075fc <_vfiprintf_r>
 8007502:	b002      	add	sp, #8
 8007504:	f85d eb04 	ldr.w	lr, [sp], #4
 8007508:	b003      	add	sp, #12
 800750a:	4770      	bx	lr
 800750c:	20000054 	.word	0x20000054

08007510 <memmove>:
 8007510:	4288      	cmp	r0, r1
 8007512:	b510      	push	{r4, lr}
 8007514:	eb01 0402 	add.w	r4, r1, r2
 8007518:	d902      	bls.n	8007520 <memmove+0x10>
 800751a:	4284      	cmp	r4, r0
 800751c:	4623      	mov	r3, r4
 800751e:	d807      	bhi.n	8007530 <memmove+0x20>
 8007520:	1e43      	subs	r3, r0, #1
 8007522:	42a1      	cmp	r1, r4
 8007524:	d008      	beq.n	8007538 <memmove+0x28>
 8007526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800752a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800752e:	e7f8      	b.n	8007522 <memmove+0x12>
 8007530:	4402      	add	r2, r0
 8007532:	4601      	mov	r1, r0
 8007534:	428a      	cmp	r2, r1
 8007536:	d100      	bne.n	800753a <memmove+0x2a>
 8007538:	bd10      	pop	{r4, pc}
 800753a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800753e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007542:	e7f7      	b.n	8007534 <memmove+0x24>

08007544 <__malloc_lock>:
 8007544:	4801      	ldr	r0, [pc, #4]	; (800754c <__malloc_lock+0x8>)
 8007546:	f000 bc09 	b.w	8007d5c <__retarget_lock_acquire_recursive>
 800754a:	bf00      	nop
 800754c:	2000af04 	.word	0x2000af04

08007550 <__malloc_unlock>:
 8007550:	4801      	ldr	r0, [pc, #4]	; (8007558 <__malloc_unlock+0x8>)
 8007552:	f000 bc04 	b.w	8007d5e <__retarget_lock_release_recursive>
 8007556:	bf00      	nop
 8007558:	2000af04 	.word	0x2000af04

0800755c <_realloc_r>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	4607      	mov	r7, r0
 8007560:	4614      	mov	r4, r2
 8007562:	460e      	mov	r6, r1
 8007564:	b921      	cbnz	r1, 8007570 <_realloc_r+0x14>
 8007566:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800756a:	4611      	mov	r1, r2
 800756c:	f7ff bdbe 	b.w	80070ec <_malloc_r>
 8007570:	b922      	cbnz	r2, 800757c <_realloc_r+0x20>
 8007572:	f7ff fd6b 	bl	800704c <_free_r>
 8007576:	4625      	mov	r5, r4
 8007578:	4628      	mov	r0, r5
 800757a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800757c:	f000 fc54 	bl	8007e28 <_malloc_usable_size_r>
 8007580:	42a0      	cmp	r0, r4
 8007582:	d20f      	bcs.n	80075a4 <_realloc_r+0x48>
 8007584:	4621      	mov	r1, r4
 8007586:	4638      	mov	r0, r7
 8007588:	f7ff fdb0 	bl	80070ec <_malloc_r>
 800758c:	4605      	mov	r5, r0
 800758e:	2800      	cmp	r0, #0
 8007590:	d0f2      	beq.n	8007578 <_realloc_r+0x1c>
 8007592:	4631      	mov	r1, r6
 8007594:	4622      	mov	r2, r4
 8007596:	f7ff f881 	bl	800669c <memcpy>
 800759a:	4631      	mov	r1, r6
 800759c:	4638      	mov	r0, r7
 800759e:	f7ff fd55 	bl	800704c <_free_r>
 80075a2:	e7e9      	b.n	8007578 <_realloc_r+0x1c>
 80075a4:	4635      	mov	r5, r6
 80075a6:	e7e7      	b.n	8007578 <_realloc_r+0x1c>

080075a8 <__sfputc_r>:
 80075a8:	6893      	ldr	r3, [r2, #8]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	b410      	push	{r4}
 80075b0:	6093      	str	r3, [r2, #8]
 80075b2:	da08      	bge.n	80075c6 <__sfputc_r+0x1e>
 80075b4:	6994      	ldr	r4, [r2, #24]
 80075b6:	42a3      	cmp	r3, r4
 80075b8:	db01      	blt.n	80075be <__sfputc_r+0x16>
 80075ba:	290a      	cmp	r1, #10
 80075bc:	d103      	bne.n	80075c6 <__sfputc_r+0x1e>
 80075be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075c2:	f000 b94b 	b.w	800785c <__swbuf_r>
 80075c6:	6813      	ldr	r3, [r2, #0]
 80075c8:	1c58      	adds	r0, r3, #1
 80075ca:	6010      	str	r0, [r2, #0]
 80075cc:	7019      	strb	r1, [r3, #0]
 80075ce:	4608      	mov	r0, r1
 80075d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <__sfputs_r>:
 80075d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d8:	4606      	mov	r6, r0
 80075da:	460f      	mov	r7, r1
 80075dc:	4614      	mov	r4, r2
 80075de:	18d5      	adds	r5, r2, r3
 80075e0:	42ac      	cmp	r4, r5
 80075e2:	d101      	bne.n	80075e8 <__sfputs_r+0x12>
 80075e4:	2000      	movs	r0, #0
 80075e6:	e007      	b.n	80075f8 <__sfputs_r+0x22>
 80075e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ec:	463a      	mov	r2, r7
 80075ee:	4630      	mov	r0, r6
 80075f0:	f7ff ffda 	bl	80075a8 <__sfputc_r>
 80075f4:	1c43      	adds	r3, r0, #1
 80075f6:	d1f3      	bne.n	80075e0 <__sfputs_r+0xa>
 80075f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075fc <_vfiprintf_r>:
 80075fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007600:	460d      	mov	r5, r1
 8007602:	b09d      	sub	sp, #116	; 0x74
 8007604:	4614      	mov	r4, r2
 8007606:	4698      	mov	r8, r3
 8007608:	4606      	mov	r6, r0
 800760a:	b118      	cbz	r0, 8007614 <_vfiprintf_r+0x18>
 800760c:	6983      	ldr	r3, [r0, #24]
 800760e:	b90b      	cbnz	r3, 8007614 <_vfiprintf_r+0x18>
 8007610:	f000 fb06 	bl	8007c20 <__sinit>
 8007614:	4b89      	ldr	r3, [pc, #548]	; (800783c <_vfiprintf_r+0x240>)
 8007616:	429d      	cmp	r5, r3
 8007618:	d11b      	bne.n	8007652 <_vfiprintf_r+0x56>
 800761a:	6875      	ldr	r5, [r6, #4]
 800761c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800761e:	07d9      	lsls	r1, r3, #31
 8007620:	d405      	bmi.n	800762e <_vfiprintf_r+0x32>
 8007622:	89ab      	ldrh	r3, [r5, #12]
 8007624:	059a      	lsls	r2, r3, #22
 8007626:	d402      	bmi.n	800762e <_vfiprintf_r+0x32>
 8007628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800762a:	f000 fb97 	bl	8007d5c <__retarget_lock_acquire_recursive>
 800762e:	89ab      	ldrh	r3, [r5, #12]
 8007630:	071b      	lsls	r3, r3, #28
 8007632:	d501      	bpl.n	8007638 <_vfiprintf_r+0x3c>
 8007634:	692b      	ldr	r3, [r5, #16]
 8007636:	b9eb      	cbnz	r3, 8007674 <_vfiprintf_r+0x78>
 8007638:	4629      	mov	r1, r5
 800763a:	4630      	mov	r0, r6
 800763c:	f000 f960 	bl	8007900 <__swsetup_r>
 8007640:	b1c0      	cbz	r0, 8007674 <_vfiprintf_r+0x78>
 8007642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007644:	07dc      	lsls	r4, r3, #31
 8007646:	d50e      	bpl.n	8007666 <_vfiprintf_r+0x6a>
 8007648:	f04f 30ff 	mov.w	r0, #4294967295
 800764c:	b01d      	add	sp, #116	; 0x74
 800764e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007652:	4b7b      	ldr	r3, [pc, #492]	; (8007840 <_vfiprintf_r+0x244>)
 8007654:	429d      	cmp	r5, r3
 8007656:	d101      	bne.n	800765c <_vfiprintf_r+0x60>
 8007658:	68b5      	ldr	r5, [r6, #8]
 800765a:	e7df      	b.n	800761c <_vfiprintf_r+0x20>
 800765c:	4b79      	ldr	r3, [pc, #484]	; (8007844 <_vfiprintf_r+0x248>)
 800765e:	429d      	cmp	r5, r3
 8007660:	bf08      	it	eq
 8007662:	68f5      	ldreq	r5, [r6, #12]
 8007664:	e7da      	b.n	800761c <_vfiprintf_r+0x20>
 8007666:	89ab      	ldrh	r3, [r5, #12]
 8007668:	0598      	lsls	r0, r3, #22
 800766a:	d4ed      	bmi.n	8007648 <_vfiprintf_r+0x4c>
 800766c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800766e:	f000 fb76 	bl	8007d5e <__retarget_lock_release_recursive>
 8007672:	e7e9      	b.n	8007648 <_vfiprintf_r+0x4c>
 8007674:	2300      	movs	r3, #0
 8007676:	9309      	str	r3, [sp, #36]	; 0x24
 8007678:	2320      	movs	r3, #32
 800767a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800767e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007682:	2330      	movs	r3, #48	; 0x30
 8007684:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007848 <_vfiprintf_r+0x24c>
 8007688:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800768c:	f04f 0901 	mov.w	r9, #1
 8007690:	4623      	mov	r3, r4
 8007692:	469a      	mov	sl, r3
 8007694:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007698:	b10a      	cbz	r2, 800769e <_vfiprintf_r+0xa2>
 800769a:	2a25      	cmp	r2, #37	; 0x25
 800769c:	d1f9      	bne.n	8007692 <_vfiprintf_r+0x96>
 800769e:	ebba 0b04 	subs.w	fp, sl, r4
 80076a2:	d00b      	beq.n	80076bc <_vfiprintf_r+0xc0>
 80076a4:	465b      	mov	r3, fp
 80076a6:	4622      	mov	r2, r4
 80076a8:	4629      	mov	r1, r5
 80076aa:	4630      	mov	r0, r6
 80076ac:	f7ff ff93 	bl	80075d6 <__sfputs_r>
 80076b0:	3001      	adds	r0, #1
 80076b2:	f000 80aa 	beq.w	800780a <_vfiprintf_r+0x20e>
 80076b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076b8:	445a      	add	r2, fp
 80076ba:	9209      	str	r2, [sp, #36]	; 0x24
 80076bc:	f89a 3000 	ldrb.w	r3, [sl]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80a2 	beq.w	800780a <_vfiprintf_r+0x20e>
 80076c6:	2300      	movs	r3, #0
 80076c8:	f04f 32ff 	mov.w	r2, #4294967295
 80076cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076d0:	f10a 0a01 	add.w	sl, sl, #1
 80076d4:	9304      	str	r3, [sp, #16]
 80076d6:	9307      	str	r3, [sp, #28]
 80076d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076dc:	931a      	str	r3, [sp, #104]	; 0x68
 80076de:	4654      	mov	r4, sl
 80076e0:	2205      	movs	r2, #5
 80076e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e6:	4858      	ldr	r0, [pc, #352]	; (8007848 <_vfiprintf_r+0x24c>)
 80076e8:	f7f8 fd82 	bl	80001f0 <memchr>
 80076ec:	9a04      	ldr	r2, [sp, #16]
 80076ee:	b9d8      	cbnz	r0, 8007728 <_vfiprintf_r+0x12c>
 80076f0:	06d1      	lsls	r1, r2, #27
 80076f2:	bf44      	itt	mi
 80076f4:	2320      	movmi	r3, #32
 80076f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076fa:	0713      	lsls	r3, r2, #28
 80076fc:	bf44      	itt	mi
 80076fe:	232b      	movmi	r3, #43	; 0x2b
 8007700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007704:	f89a 3000 	ldrb.w	r3, [sl]
 8007708:	2b2a      	cmp	r3, #42	; 0x2a
 800770a:	d015      	beq.n	8007738 <_vfiprintf_r+0x13c>
 800770c:	9a07      	ldr	r2, [sp, #28]
 800770e:	4654      	mov	r4, sl
 8007710:	2000      	movs	r0, #0
 8007712:	f04f 0c0a 	mov.w	ip, #10
 8007716:	4621      	mov	r1, r4
 8007718:	f811 3b01 	ldrb.w	r3, [r1], #1
 800771c:	3b30      	subs	r3, #48	; 0x30
 800771e:	2b09      	cmp	r3, #9
 8007720:	d94e      	bls.n	80077c0 <_vfiprintf_r+0x1c4>
 8007722:	b1b0      	cbz	r0, 8007752 <_vfiprintf_r+0x156>
 8007724:	9207      	str	r2, [sp, #28]
 8007726:	e014      	b.n	8007752 <_vfiprintf_r+0x156>
 8007728:	eba0 0308 	sub.w	r3, r0, r8
 800772c:	fa09 f303 	lsl.w	r3, r9, r3
 8007730:	4313      	orrs	r3, r2
 8007732:	9304      	str	r3, [sp, #16]
 8007734:	46a2      	mov	sl, r4
 8007736:	e7d2      	b.n	80076de <_vfiprintf_r+0xe2>
 8007738:	9b03      	ldr	r3, [sp, #12]
 800773a:	1d19      	adds	r1, r3, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	9103      	str	r1, [sp, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	bfbb      	ittet	lt
 8007744:	425b      	neglt	r3, r3
 8007746:	f042 0202 	orrlt.w	r2, r2, #2
 800774a:	9307      	strge	r3, [sp, #28]
 800774c:	9307      	strlt	r3, [sp, #28]
 800774e:	bfb8      	it	lt
 8007750:	9204      	strlt	r2, [sp, #16]
 8007752:	7823      	ldrb	r3, [r4, #0]
 8007754:	2b2e      	cmp	r3, #46	; 0x2e
 8007756:	d10c      	bne.n	8007772 <_vfiprintf_r+0x176>
 8007758:	7863      	ldrb	r3, [r4, #1]
 800775a:	2b2a      	cmp	r3, #42	; 0x2a
 800775c:	d135      	bne.n	80077ca <_vfiprintf_r+0x1ce>
 800775e:	9b03      	ldr	r3, [sp, #12]
 8007760:	1d1a      	adds	r2, r3, #4
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	9203      	str	r2, [sp, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	bfb8      	it	lt
 800776a:	f04f 33ff 	movlt.w	r3, #4294967295
 800776e:	3402      	adds	r4, #2
 8007770:	9305      	str	r3, [sp, #20]
 8007772:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007858 <_vfiprintf_r+0x25c>
 8007776:	7821      	ldrb	r1, [r4, #0]
 8007778:	2203      	movs	r2, #3
 800777a:	4650      	mov	r0, sl
 800777c:	f7f8 fd38 	bl	80001f0 <memchr>
 8007780:	b140      	cbz	r0, 8007794 <_vfiprintf_r+0x198>
 8007782:	2340      	movs	r3, #64	; 0x40
 8007784:	eba0 000a 	sub.w	r0, r0, sl
 8007788:	fa03 f000 	lsl.w	r0, r3, r0
 800778c:	9b04      	ldr	r3, [sp, #16]
 800778e:	4303      	orrs	r3, r0
 8007790:	3401      	adds	r4, #1
 8007792:	9304      	str	r3, [sp, #16]
 8007794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007798:	482c      	ldr	r0, [pc, #176]	; (800784c <_vfiprintf_r+0x250>)
 800779a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800779e:	2206      	movs	r2, #6
 80077a0:	f7f8 fd26 	bl	80001f0 <memchr>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d03f      	beq.n	8007828 <_vfiprintf_r+0x22c>
 80077a8:	4b29      	ldr	r3, [pc, #164]	; (8007850 <_vfiprintf_r+0x254>)
 80077aa:	bb1b      	cbnz	r3, 80077f4 <_vfiprintf_r+0x1f8>
 80077ac:	9b03      	ldr	r3, [sp, #12]
 80077ae:	3307      	adds	r3, #7
 80077b0:	f023 0307 	bic.w	r3, r3, #7
 80077b4:	3308      	adds	r3, #8
 80077b6:	9303      	str	r3, [sp, #12]
 80077b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ba:	443b      	add	r3, r7
 80077bc:	9309      	str	r3, [sp, #36]	; 0x24
 80077be:	e767      	b.n	8007690 <_vfiprintf_r+0x94>
 80077c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80077c4:	460c      	mov	r4, r1
 80077c6:	2001      	movs	r0, #1
 80077c8:	e7a5      	b.n	8007716 <_vfiprintf_r+0x11a>
 80077ca:	2300      	movs	r3, #0
 80077cc:	3401      	adds	r4, #1
 80077ce:	9305      	str	r3, [sp, #20]
 80077d0:	4619      	mov	r1, r3
 80077d2:	f04f 0c0a 	mov.w	ip, #10
 80077d6:	4620      	mov	r0, r4
 80077d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077dc:	3a30      	subs	r2, #48	; 0x30
 80077de:	2a09      	cmp	r2, #9
 80077e0:	d903      	bls.n	80077ea <_vfiprintf_r+0x1ee>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0c5      	beq.n	8007772 <_vfiprintf_r+0x176>
 80077e6:	9105      	str	r1, [sp, #20]
 80077e8:	e7c3      	b.n	8007772 <_vfiprintf_r+0x176>
 80077ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80077ee:	4604      	mov	r4, r0
 80077f0:	2301      	movs	r3, #1
 80077f2:	e7f0      	b.n	80077d6 <_vfiprintf_r+0x1da>
 80077f4:	ab03      	add	r3, sp, #12
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	462a      	mov	r2, r5
 80077fa:	4b16      	ldr	r3, [pc, #88]	; (8007854 <_vfiprintf_r+0x258>)
 80077fc:	a904      	add	r1, sp, #16
 80077fe:	4630      	mov	r0, r6
 8007800:	f7fc fa7a 	bl	8003cf8 <_printf_float>
 8007804:	4607      	mov	r7, r0
 8007806:	1c78      	adds	r0, r7, #1
 8007808:	d1d6      	bne.n	80077b8 <_vfiprintf_r+0x1bc>
 800780a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800780c:	07d9      	lsls	r1, r3, #31
 800780e:	d405      	bmi.n	800781c <_vfiprintf_r+0x220>
 8007810:	89ab      	ldrh	r3, [r5, #12]
 8007812:	059a      	lsls	r2, r3, #22
 8007814:	d402      	bmi.n	800781c <_vfiprintf_r+0x220>
 8007816:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007818:	f000 faa1 	bl	8007d5e <__retarget_lock_release_recursive>
 800781c:	89ab      	ldrh	r3, [r5, #12]
 800781e:	065b      	lsls	r3, r3, #25
 8007820:	f53f af12 	bmi.w	8007648 <_vfiprintf_r+0x4c>
 8007824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007826:	e711      	b.n	800764c <_vfiprintf_r+0x50>
 8007828:	ab03      	add	r3, sp, #12
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	462a      	mov	r2, r5
 800782e:	4b09      	ldr	r3, [pc, #36]	; (8007854 <_vfiprintf_r+0x258>)
 8007830:	a904      	add	r1, sp, #16
 8007832:	4630      	mov	r0, r6
 8007834:	f7fc fd04 	bl	8004240 <_printf_i>
 8007838:	e7e4      	b.n	8007804 <_vfiprintf_r+0x208>
 800783a:	bf00      	nop
 800783c:	0800853c 	.word	0x0800853c
 8007840:	0800855c 	.word	0x0800855c
 8007844:	0800851c 	.word	0x0800851c
 8007848:	080083cc 	.word	0x080083cc
 800784c:	080083d6 	.word	0x080083d6
 8007850:	08003cf9 	.word	0x08003cf9
 8007854:	080075d7 	.word	0x080075d7
 8007858:	080083d2 	.word	0x080083d2

0800785c <__swbuf_r>:
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	460e      	mov	r6, r1
 8007860:	4614      	mov	r4, r2
 8007862:	4605      	mov	r5, r0
 8007864:	b118      	cbz	r0, 800786e <__swbuf_r+0x12>
 8007866:	6983      	ldr	r3, [r0, #24]
 8007868:	b90b      	cbnz	r3, 800786e <__swbuf_r+0x12>
 800786a:	f000 f9d9 	bl	8007c20 <__sinit>
 800786e:	4b21      	ldr	r3, [pc, #132]	; (80078f4 <__swbuf_r+0x98>)
 8007870:	429c      	cmp	r4, r3
 8007872:	d12b      	bne.n	80078cc <__swbuf_r+0x70>
 8007874:	686c      	ldr	r4, [r5, #4]
 8007876:	69a3      	ldr	r3, [r4, #24]
 8007878:	60a3      	str	r3, [r4, #8]
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	071a      	lsls	r2, r3, #28
 800787e:	d52f      	bpl.n	80078e0 <__swbuf_r+0x84>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	b36b      	cbz	r3, 80078e0 <__swbuf_r+0x84>
 8007884:	6923      	ldr	r3, [r4, #16]
 8007886:	6820      	ldr	r0, [r4, #0]
 8007888:	1ac0      	subs	r0, r0, r3
 800788a:	6963      	ldr	r3, [r4, #20]
 800788c:	b2f6      	uxtb	r6, r6
 800788e:	4283      	cmp	r3, r0
 8007890:	4637      	mov	r7, r6
 8007892:	dc04      	bgt.n	800789e <__swbuf_r+0x42>
 8007894:	4621      	mov	r1, r4
 8007896:	4628      	mov	r0, r5
 8007898:	f000 f92e 	bl	8007af8 <_fflush_r>
 800789c:	bb30      	cbnz	r0, 80078ec <__swbuf_r+0x90>
 800789e:	68a3      	ldr	r3, [r4, #8]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	60a3      	str	r3, [r4, #8]
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	6022      	str	r2, [r4, #0]
 80078aa:	701e      	strb	r6, [r3, #0]
 80078ac:	6963      	ldr	r3, [r4, #20]
 80078ae:	3001      	adds	r0, #1
 80078b0:	4283      	cmp	r3, r0
 80078b2:	d004      	beq.n	80078be <__swbuf_r+0x62>
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	07db      	lsls	r3, r3, #31
 80078b8:	d506      	bpl.n	80078c8 <__swbuf_r+0x6c>
 80078ba:	2e0a      	cmp	r6, #10
 80078bc:	d104      	bne.n	80078c8 <__swbuf_r+0x6c>
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 f919 	bl	8007af8 <_fflush_r>
 80078c6:	b988      	cbnz	r0, 80078ec <__swbuf_r+0x90>
 80078c8:	4638      	mov	r0, r7
 80078ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078cc:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <__swbuf_r+0x9c>)
 80078ce:	429c      	cmp	r4, r3
 80078d0:	d101      	bne.n	80078d6 <__swbuf_r+0x7a>
 80078d2:	68ac      	ldr	r4, [r5, #8]
 80078d4:	e7cf      	b.n	8007876 <__swbuf_r+0x1a>
 80078d6:	4b09      	ldr	r3, [pc, #36]	; (80078fc <__swbuf_r+0xa0>)
 80078d8:	429c      	cmp	r4, r3
 80078da:	bf08      	it	eq
 80078dc:	68ec      	ldreq	r4, [r5, #12]
 80078de:	e7ca      	b.n	8007876 <__swbuf_r+0x1a>
 80078e0:	4621      	mov	r1, r4
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 f80c 	bl	8007900 <__swsetup_r>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d0cb      	beq.n	8007884 <__swbuf_r+0x28>
 80078ec:	f04f 37ff 	mov.w	r7, #4294967295
 80078f0:	e7ea      	b.n	80078c8 <__swbuf_r+0x6c>
 80078f2:	bf00      	nop
 80078f4:	0800853c 	.word	0x0800853c
 80078f8:	0800855c 	.word	0x0800855c
 80078fc:	0800851c 	.word	0x0800851c

08007900 <__swsetup_r>:
 8007900:	4b32      	ldr	r3, [pc, #200]	; (80079cc <__swsetup_r+0xcc>)
 8007902:	b570      	push	{r4, r5, r6, lr}
 8007904:	681d      	ldr	r5, [r3, #0]
 8007906:	4606      	mov	r6, r0
 8007908:	460c      	mov	r4, r1
 800790a:	b125      	cbz	r5, 8007916 <__swsetup_r+0x16>
 800790c:	69ab      	ldr	r3, [r5, #24]
 800790e:	b913      	cbnz	r3, 8007916 <__swsetup_r+0x16>
 8007910:	4628      	mov	r0, r5
 8007912:	f000 f985 	bl	8007c20 <__sinit>
 8007916:	4b2e      	ldr	r3, [pc, #184]	; (80079d0 <__swsetup_r+0xd0>)
 8007918:	429c      	cmp	r4, r3
 800791a:	d10f      	bne.n	800793c <__swsetup_r+0x3c>
 800791c:	686c      	ldr	r4, [r5, #4]
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007924:	0719      	lsls	r1, r3, #28
 8007926:	d42c      	bmi.n	8007982 <__swsetup_r+0x82>
 8007928:	06dd      	lsls	r5, r3, #27
 800792a:	d411      	bmi.n	8007950 <__swsetup_r+0x50>
 800792c:	2309      	movs	r3, #9
 800792e:	6033      	str	r3, [r6, #0]
 8007930:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007934:	81a3      	strh	r3, [r4, #12]
 8007936:	f04f 30ff 	mov.w	r0, #4294967295
 800793a:	e03e      	b.n	80079ba <__swsetup_r+0xba>
 800793c:	4b25      	ldr	r3, [pc, #148]	; (80079d4 <__swsetup_r+0xd4>)
 800793e:	429c      	cmp	r4, r3
 8007940:	d101      	bne.n	8007946 <__swsetup_r+0x46>
 8007942:	68ac      	ldr	r4, [r5, #8]
 8007944:	e7eb      	b.n	800791e <__swsetup_r+0x1e>
 8007946:	4b24      	ldr	r3, [pc, #144]	; (80079d8 <__swsetup_r+0xd8>)
 8007948:	429c      	cmp	r4, r3
 800794a:	bf08      	it	eq
 800794c:	68ec      	ldreq	r4, [r5, #12]
 800794e:	e7e6      	b.n	800791e <__swsetup_r+0x1e>
 8007950:	0758      	lsls	r0, r3, #29
 8007952:	d512      	bpl.n	800797a <__swsetup_r+0x7a>
 8007954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007956:	b141      	cbz	r1, 800796a <__swsetup_r+0x6a>
 8007958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800795c:	4299      	cmp	r1, r3
 800795e:	d002      	beq.n	8007966 <__swsetup_r+0x66>
 8007960:	4630      	mov	r0, r6
 8007962:	f7ff fb73 	bl	800704c <_free_r>
 8007966:	2300      	movs	r3, #0
 8007968:	6363      	str	r3, [r4, #52]	; 0x34
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007970:	81a3      	strh	r3, [r4, #12]
 8007972:	2300      	movs	r3, #0
 8007974:	6063      	str	r3, [r4, #4]
 8007976:	6923      	ldr	r3, [r4, #16]
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f043 0308 	orr.w	r3, r3, #8
 8007980:	81a3      	strh	r3, [r4, #12]
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	b94b      	cbnz	r3, 800799a <__swsetup_r+0x9a>
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800798c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007990:	d003      	beq.n	800799a <__swsetup_r+0x9a>
 8007992:	4621      	mov	r1, r4
 8007994:	4630      	mov	r0, r6
 8007996:	f000 fa07 	bl	8007da8 <__smakebuf_r>
 800799a:	89a0      	ldrh	r0, [r4, #12]
 800799c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079a0:	f010 0301 	ands.w	r3, r0, #1
 80079a4:	d00a      	beq.n	80079bc <__swsetup_r+0xbc>
 80079a6:	2300      	movs	r3, #0
 80079a8:	60a3      	str	r3, [r4, #8]
 80079aa:	6963      	ldr	r3, [r4, #20]
 80079ac:	425b      	negs	r3, r3
 80079ae:	61a3      	str	r3, [r4, #24]
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	b943      	cbnz	r3, 80079c6 <__swsetup_r+0xc6>
 80079b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079b8:	d1ba      	bne.n	8007930 <__swsetup_r+0x30>
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	0781      	lsls	r1, r0, #30
 80079be:	bf58      	it	pl
 80079c0:	6963      	ldrpl	r3, [r4, #20]
 80079c2:	60a3      	str	r3, [r4, #8]
 80079c4:	e7f4      	b.n	80079b0 <__swsetup_r+0xb0>
 80079c6:	2000      	movs	r0, #0
 80079c8:	e7f7      	b.n	80079ba <__swsetup_r+0xba>
 80079ca:	bf00      	nop
 80079cc:	20000054 	.word	0x20000054
 80079d0:	0800853c 	.word	0x0800853c
 80079d4:	0800855c 	.word	0x0800855c
 80079d8:	0800851c 	.word	0x0800851c

080079dc <abort>:
 80079dc:	b508      	push	{r3, lr}
 80079de:	2006      	movs	r0, #6
 80079e0:	f000 fa52 	bl	8007e88 <raise>
 80079e4:	2001      	movs	r0, #1
 80079e6:	f7fa f9c9 	bl	8001d7c <_exit>
	...

080079ec <__sflush_r>:
 80079ec:	898a      	ldrh	r2, [r1, #12]
 80079ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f2:	4605      	mov	r5, r0
 80079f4:	0710      	lsls	r0, r2, #28
 80079f6:	460c      	mov	r4, r1
 80079f8:	d458      	bmi.n	8007aac <__sflush_r+0xc0>
 80079fa:	684b      	ldr	r3, [r1, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dc05      	bgt.n	8007a0c <__sflush_r+0x20>
 8007a00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	dc02      	bgt.n	8007a0c <__sflush_r+0x20>
 8007a06:	2000      	movs	r0, #0
 8007a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a0e:	2e00      	cmp	r6, #0
 8007a10:	d0f9      	beq.n	8007a06 <__sflush_r+0x1a>
 8007a12:	2300      	movs	r3, #0
 8007a14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a18:	682f      	ldr	r7, [r5, #0]
 8007a1a:	602b      	str	r3, [r5, #0]
 8007a1c:	d032      	beq.n	8007a84 <__sflush_r+0x98>
 8007a1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	075a      	lsls	r2, r3, #29
 8007a24:	d505      	bpl.n	8007a32 <__sflush_r+0x46>
 8007a26:	6863      	ldr	r3, [r4, #4]
 8007a28:	1ac0      	subs	r0, r0, r3
 8007a2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a2c:	b10b      	cbz	r3, 8007a32 <__sflush_r+0x46>
 8007a2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a30:	1ac0      	subs	r0, r0, r3
 8007a32:	2300      	movs	r3, #0
 8007a34:	4602      	mov	r2, r0
 8007a36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a38:	6a21      	ldr	r1, [r4, #32]
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b0      	blx	r6
 8007a3e:	1c43      	adds	r3, r0, #1
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	d106      	bne.n	8007a52 <__sflush_r+0x66>
 8007a44:	6829      	ldr	r1, [r5, #0]
 8007a46:	291d      	cmp	r1, #29
 8007a48:	d82c      	bhi.n	8007aa4 <__sflush_r+0xb8>
 8007a4a:	4a2a      	ldr	r2, [pc, #168]	; (8007af4 <__sflush_r+0x108>)
 8007a4c:	40ca      	lsrs	r2, r1
 8007a4e:	07d6      	lsls	r6, r2, #31
 8007a50:	d528      	bpl.n	8007aa4 <__sflush_r+0xb8>
 8007a52:	2200      	movs	r2, #0
 8007a54:	6062      	str	r2, [r4, #4]
 8007a56:	04d9      	lsls	r1, r3, #19
 8007a58:	6922      	ldr	r2, [r4, #16]
 8007a5a:	6022      	str	r2, [r4, #0]
 8007a5c:	d504      	bpl.n	8007a68 <__sflush_r+0x7c>
 8007a5e:	1c42      	adds	r2, r0, #1
 8007a60:	d101      	bne.n	8007a66 <__sflush_r+0x7a>
 8007a62:	682b      	ldr	r3, [r5, #0]
 8007a64:	b903      	cbnz	r3, 8007a68 <__sflush_r+0x7c>
 8007a66:	6560      	str	r0, [r4, #84]	; 0x54
 8007a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a6a:	602f      	str	r7, [r5, #0]
 8007a6c:	2900      	cmp	r1, #0
 8007a6e:	d0ca      	beq.n	8007a06 <__sflush_r+0x1a>
 8007a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a74:	4299      	cmp	r1, r3
 8007a76:	d002      	beq.n	8007a7e <__sflush_r+0x92>
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f7ff fae7 	bl	800704c <_free_r>
 8007a7e:	2000      	movs	r0, #0
 8007a80:	6360      	str	r0, [r4, #52]	; 0x34
 8007a82:	e7c1      	b.n	8007a08 <__sflush_r+0x1c>
 8007a84:	6a21      	ldr	r1, [r4, #32]
 8007a86:	2301      	movs	r3, #1
 8007a88:	4628      	mov	r0, r5
 8007a8a:	47b0      	blx	r6
 8007a8c:	1c41      	adds	r1, r0, #1
 8007a8e:	d1c7      	bne.n	8007a20 <__sflush_r+0x34>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0c4      	beq.n	8007a20 <__sflush_r+0x34>
 8007a96:	2b1d      	cmp	r3, #29
 8007a98:	d001      	beq.n	8007a9e <__sflush_r+0xb2>
 8007a9a:	2b16      	cmp	r3, #22
 8007a9c:	d101      	bne.n	8007aa2 <__sflush_r+0xb6>
 8007a9e:	602f      	str	r7, [r5, #0]
 8007aa0:	e7b1      	b.n	8007a06 <__sflush_r+0x1a>
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	e7ad      	b.n	8007a08 <__sflush_r+0x1c>
 8007aac:	690f      	ldr	r7, [r1, #16]
 8007aae:	2f00      	cmp	r7, #0
 8007ab0:	d0a9      	beq.n	8007a06 <__sflush_r+0x1a>
 8007ab2:	0793      	lsls	r3, r2, #30
 8007ab4:	680e      	ldr	r6, [r1, #0]
 8007ab6:	bf08      	it	eq
 8007ab8:	694b      	ldreq	r3, [r1, #20]
 8007aba:	600f      	str	r7, [r1, #0]
 8007abc:	bf18      	it	ne
 8007abe:	2300      	movne	r3, #0
 8007ac0:	eba6 0807 	sub.w	r8, r6, r7
 8007ac4:	608b      	str	r3, [r1, #8]
 8007ac6:	f1b8 0f00 	cmp.w	r8, #0
 8007aca:	dd9c      	ble.n	8007a06 <__sflush_r+0x1a>
 8007acc:	6a21      	ldr	r1, [r4, #32]
 8007ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ad0:	4643      	mov	r3, r8
 8007ad2:	463a      	mov	r2, r7
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	47b0      	blx	r6
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	dc06      	bgt.n	8007aea <__sflush_r+0xfe>
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae2:	81a3      	strh	r3, [r4, #12]
 8007ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae8:	e78e      	b.n	8007a08 <__sflush_r+0x1c>
 8007aea:	4407      	add	r7, r0
 8007aec:	eba8 0800 	sub.w	r8, r8, r0
 8007af0:	e7e9      	b.n	8007ac6 <__sflush_r+0xda>
 8007af2:	bf00      	nop
 8007af4:	20400001 	.word	0x20400001

08007af8 <_fflush_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	690b      	ldr	r3, [r1, #16]
 8007afc:	4605      	mov	r5, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	b913      	cbnz	r3, 8007b08 <_fflush_r+0x10>
 8007b02:	2500      	movs	r5, #0
 8007b04:	4628      	mov	r0, r5
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	b118      	cbz	r0, 8007b12 <_fflush_r+0x1a>
 8007b0a:	6983      	ldr	r3, [r0, #24]
 8007b0c:	b90b      	cbnz	r3, 8007b12 <_fflush_r+0x1a>
 8007b0e:	f000 f887 	bl	8007c20 <__sinit>
 8007b12:	4b14      	ldr	r3, [pc, #80]	; (8007b64 <_fflush_r+0x6c>)
 8007b14:	429c      	cmp	r4, r3
 8007b16:	d11b      	bne.n	8007b50 <_fflush_r+0x58>
 8007b18:	686c      	ldr	r4, [r5, #4]
 8007b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0ef      	beq.n	8007b02 <_fflush_r+0xa>
 8007b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b24:	07d0      	lsls	r0, r2, #31
 8007b26:	d404      	bmi.n	8007b32 <_fflush_r+0x3a>
 8007b28:	0599      	lsls	r1, r3, #22
 8007b2a:	d402      	bmi.n	8007b32 <_fflush_r+0x3a>
 8007b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b2e:	f000 f915 	bl	8007d5c <__retarget_lock_acquire_recursive>
 8007b32:	4628      	mov	r0, r5
 8007b34:	4621      	mov	r1, r4
 8007b36:	f7ff ff59 	bl	80079ec <__sflush_r>
 8007b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b3c:	07da      	lsls	r2, r3, #31
 8007b3e:	4605      	mov	r5, r0
 8007b40:	d4e0      	bmi.n	8007b04 <_fflush_r+0xc>
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	059b      	lsls	r3, r3, #22
 8007b46:	d4dd      	bmi.n	8007b04 <_fflush_r+0xc>
 8007b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b4a:	f000 f908 	bl	8007d5e <__retarget_lock_release_recursive>
 8007b4e:	e7d9      	b.n	8007b04 <_fflush_r+0xc>
 8007b50:	4b05      	ldr	r3, [pc, #20]	; (8007b68 <_fflush_r+0x70>)
 8007b52:	429c      	cmp	r4, r3
 8007b54:	d101      	bne.n	8007b5a <_fflush_r+0x62>
 8007b56:	68ac      	ldr	r4, [r5, #8]
 8007b58:	e7df      	b.n	8007b1a <_fflush_r+0x22>
 8007b5a:	4b04      	ldr	r3, [pc, #16]	; (8007b6c <_fflush_r+0x74>)
 8007b5c:	429c      	cmp	r4, r3
 8007b5e:	bf08      	it	eq
 8007b60:	68ec      	ldreq	r4, [r5, #12]
 8007b62:	e7da      	b.n	8007b1a <_fflush_r+0x22>
 8007b64:	0800853c 	.word	0x0800853c
 8007b68:	0800855c 	.word	0x0800855c
 8007b6c:	0800851c 	.word	0x0800851c

08007b70 <std>:
 8007b70:	2300      	movs	r3, #0
 8007b72:	b510      	push	{r4, lr}
 8007b74:	4604      	mov	r4, r0
 8007b76:	e9c0 3300 	strd	r3, r3, [r0]
 8007b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b7e:	6083      	str	r3, [r0, #8]
 8007b80:	8181      	strh	r1, [r0, #12]
 8007b82:	6643      	str	r3, [r0, #100]	; 0x64
 8007b84:	81c2      	strh	r2, [r0, #14]
 8007b86:	6183      	str	r3, [r0, #24]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	2208      	movs	r2, #8
 8007b8c:	305c      	adds	r0, #92	; 0x5c
 8007b8e:	f7fc f80b 	bl	8003ba8 <memset>
 8007b92:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <std+0x38>)
 8007b94:	6263      	str	r3, [r4, #36]	; 0x24
 8007b96:	4b05      	ldr	r3, [pc, #20]	; (8007bac <std+0x3c>)
 8007b98:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b9a:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <std+0x40>)
 8007b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b9e:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <std+0x44>)
 8007ba0:	6224      	str	r4, [r4, #32]
 8007ba2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ba4:	bd10      	pop	{r4, pc}
 8007ba6:	bf00      	nop
 8007ba8:	08007ec1 	.word	0x08007ec1
 8007bac:	08007ee3 	.word	0x08007ee3
 8007bb0:	08007f1b 	.word	0x08007f1b
 8007bb4:	08007f3f 	.word	0x08007f3f

08007bb8 <_cleanup_r>:
 8007bb8:	4901      	ldr	r1, [pc, #4]	; (8007bc0 <_cleanup_r+0x8>)
 8007bba:	f000 b8af 	b.w	8007d1c <_fwalk_reent>
 8007bbe:	bf00      	nop
 8007bc0:	08007af9 	.word	0x08007af9

08007bc4 <__sfmoreglue>:
 8007bc4:	b570      	push	{r4, r5, r6, lr}
 8007bc6:	1e4a      	subs	r2, r1, #1
 8007bc8:	2568      	movs	r5, #104	; 0x68
 8007bca:	4355      	muls	r5, r2
 8007bcc:	460e      	mov	r6, r1
 8007bce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bd2:	f7ff fa8b 	bl	80070ec <_malloc_r>
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	b140      	cbz	r0, 8007bec <__sfmoreglue+0x28>
 8007bda:	2100      	movs	r1, #0
 8007bdc:	e9c0 1600 	strd	r1, r6, [r0]
 8007be0:	300c      	adds	r0, #12
 8007be2:	60a0      	str	r0, [r4, #8]
 8007be4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007be8:	f7fb ffde 	bl	8003ba8 <memset>
 8007bec:	4620      	mov	r0, r4
 8007bee:	bd70      	pop	{r4, r5, r6, pc}

08007bf0 <__sfp_lock_acquire>:
 8007bf0:	4801      	ldr	r0, [pc, #4]	; (8007bf8 <__sfp_lock_acquire+0x8>)
 8007bf2:	f000 b8b3 	b.w	8007d5c <__retarget_lock_acquire_recursive>
 8007bf6:	bf00      	nop
 8007bf8:	2000af08 	.word	0x2000af08

08007bfc <__sfp_lock_release>:
 8007bfc:	4801      	ldr	r0, [pc, #4]	; (8007c04 <__sfp_lock_release+0x8>)
 8007bfe:	f000 b8ae 	b.w	8007d5e <__retarget_lock_release_recursive>
 8007c02:	bf00      	nop
 8007c04:	2000af08 	.word	0x2000af08

08007c08 <__sinit_lock_acquire>:
 8007c08:	4801      	ldr	r0, [pc, #4]	; (8007c10 <__sinit_lock_acquire+0x8>)
 8007c0a:	f000 b8a7 	b.w	8007d5c <__retarget_lock_acquire_recursive>
 8007c0e:	bf00      	nop
 8007c10:	2000af03 	.word	0x2000af03

08007c14 <__sinit_lock_release>:
 8007c14:	4801      	ldr	r0, [pc, #4]	; (8007c1c <__sinit_lock_release+0x8>)
 8007c16:	f000 b8a2 	b.w	8007d5e <__retarget_lock_release_recursive>
 8007c1a:	bf00      	nop
 8007c1c:	2000af03 	.word	0x2000af03

08007c20 <__sinit>:
 8007c20:	b510      	push	{r4, lr}
 8007c22:	4604      	mov	r4, r0
 8007c24:	f7ff fff0 	bl	8007c08 <__sinit_lock_acquire>
 8007c28:	69a3      	ldr	r3, [r4, #24]
 8007c2a:	b11b      	cbz	r3, 8007c34 <__sinit+0x14>
 8007c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c30:	f7ff bff0 	b.w	8007c14 <__sinit_lock_release>
 8007c34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c38:	6523      	str	r3, [r4, #80]	; 0x50
 8007c3a:	4b13      	ldr	r3, [pc, #76]	; (8007c88 <__sinit+0x68>)
 8007c3c:	4a13      	ldr	r2, [pc, #76]	; (8007c8c <__sinit+0x6c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c42:	42a3      	cmp	r3, r4
 8007c44:	bf04      	itt	eq
 8007c46:	2301      	moveq	r3, #1
 8007c48:	61a3      	streq	r3, [r4, #24]
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f000 f820 	bl	8007c90 <__sfp>
 8007c50:	6060      	str	r0, [r4, #4]
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 f81c 	bl	8007c90 <__sfp>
 8007c58:	60a0      	str	r0, [r4, #8]
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f000 f818 	bl	8007c90 <__sfp>
 8007c60:	2200      	movs	r2, #0
 8007c62:	60e0      	str	r0, [r4, #12]
 8007c64:	2104      	movs	r1, #4
 8007c66:	6860      	ldr	r0, [r4, #4]
 8007c68:	f7ff ff82 	bl	8007b70 <std>
 8007c6c:	68a0      	ldr	r0, [r4, #8]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	2109      	movs	r1, #9
 8007c72:	f7ff ff7d 	bl	8007b70 <std>
 8007c76:	68e0      	ldr	r0, [r4, #12]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	2112      	movs	r1, #18
 8007c7c:	f7ff ff78 	bl	8007b70 <std>
 8007c80:	2301      	movs	r3, #1
 8007c82:	61a3      	str	r3, [r4, #24]
 8007c84:	e7d2      	b.n	8007c2c <__sinit+0xc>
 8007c86:	bf00      	nop
 8007c88:	080080cc 	.word	0x080080cc
 8007c8c:	08007bb9 	.word	0x08007bb9

08007c90 <__sfp>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	4607      	mov	r7, r0
 8007c94:	f7ff ffac 	bl	8007bf0 <__sfp_lock_acquire>
 8007c98:	4b1e      	ldr	r3, [pc, #120]	; (8007d14 <__sfp+0x84>)
 8007c9a:	681e      	ldr	r6, [r3, #0]
 8007c9c:	69b3      	ldr	r3, [r6, #24]
 8007c9e:	b913      	cbnz	r3, 8007ca6 <__sfp+0x16>
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	f7ff ffbd 	bl	8007c20 <__sinit>
 8007ca6:	3648      	adds	r6, #72	; 0x48
 8007ca8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	d503      	bpl.n	8007cb8 <__sfp+0x28>
 8007cb0:	6833      	ldr	r3, [r6, #0]
 8007cb2:	b30b      	cbz	r3, 8007cf8 <__sfp+0x68>
 8007cb4:	6836      	ldr	r6, [r6, #0]
 8007cb6:	e7f7      	b.n	8007ca8 <__sfp+0x18>
 8007cb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cbc:	b9d5      	cbnz	r5, 8007cf4 <__sfp+0x64>
 8007cbe:	4b16      	ldr	r3, [pc, #88]	; (8007d18 <__sfp+0x88>)
 8007cc0:	60e3      	str	r3, [r4, #12]
 8007cc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cc6:	6665      	str	r5, [r4, #100]	; 0x64
 8007cc8:	f000 f847 	bl	8007d5a <__retarget_lock_init_recursive>
 8007ccc:	f7ff ff96 	bl	8007bfc <__sfp_lock_release>
 8007cd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cd8:	6025      	str	r5, [r4, #0]
 8007cda:	61a5      	str	r5, [r4, #24]
 8007cdc:	2208      	movs	r2, #8
 8007cde:	4629      	mov	r1, r5
 8007ce0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ce4:	f7fb ff60 	bl	8003ba8 <memset>
 8007ce8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf4:	3468      	adds	r4, #104	; 0x68
 8007cf6:	e7d9      	b.n	8007cac <__sfp+0x1c>
 8007cf8:	2104      	movs	r1, #4
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	f7ff ff62 	bl	8007bc4 <__sfmoreglue>
 8007d00:	4604      	mov	r4, r0
 8007d02:	6030      	str	r0, [r6, #0]
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d1d5      	bne.n	8007cb4 <__sfp+0x24>
 8007d08:	f7ff ff78 	bl	8007bfc <__sfp_lock_release>
 8007d0c:	230c      	movs	r3, #12
 8007d0e:	603b      	str	r3, [r7, #0]
 8007d10:	e7ee      	b.n	8007cf0 <__sfp+0x60>
 8007d12:	bf00      	nop
 8007d14:	080080cc 	.word	0x080080cc
 8007d18:	ffff0001 	.word	0xffff0001

08007d1c <_fwalk_reent>:
 8007d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d20:	4606      	mov	r6, r0
 8007d22:	4688      	mov	r8, r1
 8007d24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d28:	2700      	movs	r7, #0
 8007d2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d2e:	f1b9 0901 	subs.w	r9, r9, #1
 8007d32:	d505      	bpl.n	8007d40 <_fwalk_reent+0x24>
 8007d34:	6824      	ldr	r4, [r4, #0]
 8007d36:	2c00      	cmp	r4, #0
 8007d38:	d1f7      	bne.n	8007d2a <_fwalk_reent+0xe>
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d40:	89ab      	ldrh	r3, [r5, #12]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d907      	bls.n	8007d56 <_fwalk_reent+0x3a>
 8007d46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	d003      	beq.n	8007d56 <_fwalk_reent+0x3a>
 8007d4e:	4629      	mov	r1, r5
 8007d50:	4630      	mov	r0, r6
 8007d52:	47c0      	blx	r8
 8007d54:	4307      	orrs	r7, r0
 8007d56:	3568      	adds	r5, #104	; 0x68
 8007d58:	e7e9      	b.n	8007d2e <_fwalk_reent+0x12>

08007d5a <__retarget_lock_init_recursive>:
 8007d5a:	4770      	bx	lr

08007d5c <__retarget_lock_acquire_recursive>:
 8007d5c:	4770      	bx	lr

08007d5e <__retarget_lock_release_recursive>:
 8007d5e:	4770      	bx	lr

08007d60 <__swhatbuf_r>:
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	460e      	mov	r6, r1
 8007d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d68:	2900      	cmp	r1, #0
 8007d6a:	b096      	sub	sp, #88	; 0x58
 8007d6c:	4614      	mov	r4, r2
 8007d6e:	461d      	mov	r5, r3
 8007d70:	da07      	bge.n	8007d82 <__swhatbuf_r+0x22>
 8007d72:	2300      	movs	r3, #0
 8007d74:	602b      	str	r3, [r5, #0]
 8007d76:	89b3      	ldrh	r3, [r6, #12]
 8007d78:	061a      	lsls	r2, r3, #24
 8007d7a:	d410      	bmi.n	8007d9e <__swhatbuf_r+0x3e>
 8007d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d80:	e00e      	b.n	8007da0 <__swhatbuf_r+0x40>
 8007d82:	466a      	mov	r2, sp
 8007d84:	f000 f902 	bl	8007f8c <_fstat_r>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	dbf2      	blt.n	8007d72 <__swhatbuf_r+0x12>
 8007d8c:	9a01      	ldr	r2, [sp, #4]
 8007d8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d96:	425a      	negs	r2, r3
 8007d98:	415a      	adcs	r2, r3
 8007d9a:	602a      	str	r2, [r5, #0]
 8007d9c:	e7ee      	b.n	8007d7c <__swhatbuf_r+0x1c>
 8007d9e:	2340      	movs	r3, #64	; 0x40
 8007da0:	2000      	movs	r0, #0
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	b016      	add	sp, #88	; 0x58
 8007da6:	bd70      	pop	{r4, r5, r6, pc}

08007da8 <__smakebuf_r>:
 8007da8:	898b      	ldrh	r3, [r1, #12]
 8007daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dac:	079d      	lsls	r5, r3, #30
 8007dae:	4606      	mov	r6, r0
 8007db0:	460c      	mov	r4, r1
 8007db2:	d507      	bpl.n	8007dc4 <__smakebuf_r+0x1c>
 8007db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	6123      	str	r3, [r4, #16]
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	6163      	str	r3, [r4, #20]
 8007dc0:	b002      	add	sp, #8
 8007dc2:	bd70      	pop	{r4, r5, r6, pc}
 8007dc4:	ab01      	add	r3, sp, #4
 8007dc6:	466a      	mov	r2, sp
 8007dc8:	f7ff ffca 	bl	8007d60 <__swhatbuf_r>
 8007dcc:	9900      	ldr	r1, [sp, #0]
 8007dce:	4605      	mov	r5, r0
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f7ff f98b 	bl	80070ec <_malloc_r>
 8007dd6:	b948      	cbnz	r0, 8007dec <__smakebuf_r+0x44>
 8007dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ddc:	059a      	lsls	r2, r3, #22
 8007dde:	d4ef      	bmi.n	8007dc0 <__smakebuf_r+0x18>
 8007de0:	f023 0303 	bic.w	r3, r3, #3
 8007de4:	f043 0302 	orr.w	r3, r3, #2
 8007de8:	81a3      	strh	r3, [r4, #12]
 8007dea:	e7e3      	b.n	8007db4 <__smakebuf_r+0xc>
 8007dec:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <__smakebuf_r+0x7c>)
 8007dee:	62b3      	str	r3, [r6, #40]	; 0x28
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	6020      	str	r0, [r4, #0]
 8007df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df8:	81a3      	strh	r3, [r4, #12]
 8007dfa:	9b00      	ldr	r3, [sp, #0]
 8007dfc:	6163      	str	r3, [r4, #20]
 8007dfe:	9b01      	ldr	r3, [sp, #4]
 8007e00:	6120      	str	r0, [r4, #16]
 8007e02:	b15b      	cbz	r3, 8007e1c <__smakebuf_r+0x74>
 8007e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 f8d1 	bl	8007fb0 <_isatty_r>
 8007e0e:	b128      	cbz	r0, 8007e1c <__smakebuf_r+0x74>
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	f023 0303 	bic.w	r3, r3, #3
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	81a3      	strh	r3, [r4, #12]
 8007e1c:	89a0      	ldrh	r0, [r4, #12]
 8007e1e:	4305      	orrs	r5, r0
 8007e20:	81a5      	strh	r5, [r4, #12]
 8007e22:	e7cd      	b.n	8007dc0 <__smakebuf_r+0x18>
 8007e24:	08007bb9 	.word	0x08007bb9

08007e28 <_malloc_usable_size_r>:
 8007e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e2c:	1f18      	subs	r0, r3, #4
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	bfbc      	itt	lt
 8007e32:	580b      	ldrlt	r3, [r1, r0]
 8007e34:	18c0      	addlt	r0, r0, r3
 8007e36:	4770      	bx	lr

08007e38 <_raise_r>:
 8007e38:	291f      	cmp	r1, #31
 8007e3a:	b538      	push	{r3, r4, r5, lr}
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	460d      	mov	r5, r1
 8007e40:	d904      	bls.n	8007e4c <_raise_r+0x14>
 8007e42:	2316      	movs	r3, #22
 8007e44:	6003      	str	r3, [r0, #0]
 8007e46:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e4e:	b112      	cbz	r2, 8007e56 <_raise_r+0x1e>
 8007e50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e54:	b94b      	cbnz	r3, 8007e6a <_raise_r+0x32>
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 f830 	bl	8007ebc <_getpid_r>
 8007e5c:	462a      	mov	r2, r5
 8007e5e:	4601      	mov	r1, r0
 8007e60:	4620      	mov	r0, r4
 8007e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e66:	f000 b817 	b.w	8007e98 <_kill_r>
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d00a      	beq.n	8007e84 <_raise_r+0x4c>
 8007e6e:	1c59      	adds	r1, r3, #1
 8007e70:	d103      	bne.n	8007e7a <_raise_r+0x42>
 8007e72:	2316      	movs	r3, #22
 8007e74:	6003      	str	r3, [r0, #0]
 8007e76:	2001      	movs	r0, #1
 8007e78:	e7e7      	b.n	8007e4a <_raise_r+0x12>
 8007e7a:	2400      	movs	r4, #0
 8007e7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e80:	4628      	mov	r0, r5
 8007e82:	4798      	blx	r3
 8007e84:	2000      	movs	r0, #0
 8007e86:	e7e0      	b.n	8007e4a <_raise_r+0x12>

08007e88 <raise>:
 8007e88:	4b02      	ldr	r3, [pc, #8]	; (8007e94 <raise+0xc>)
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	6818      	ldr	r0, [r3, #0]
 8007e8e:	f7ff bfd3 	b.w	8007e38 <_raise_r>
 8007e92:	bf00      	nop
 8007e94:	20000054 	.word	0x20000054

08007e98 <_kill_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4d07      	ldr	r5, [pc, #28]	; (8007eb8 <_kill_r+0x20>)
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	4608      	mov	r0, r1
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	602b      	str	r3, [r5, #0]
 8007ea6:	f7f9 ff59 	bl	8001d5c <_kill>
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	d102      	bne.n	8007eb4 <_kill_r+0x1c>
 8007eae:	682b      	ldr	r3, [r5, #0]
 8007eb0:	b103      	cbz	r3, 8007eb4 <_kill_r+0x1c>
 8007eb2:	6023      	str	r3, [r4, #0]
 8007eb4:	bd38      	pop	{r3, r4, r5, pc}
 8007eb6:	bf00      	nop
 8007eb8:	2000aefc 	.word	0x2000aefc

08007ebc <_getpid_r>:
 8007ebc:	f7f9 bf46 	b.w	8001d4c <_getpid>

08007ec0 <__sread>:
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec8:	f000 f894 	bl	8007ff4 <_read_r>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	bfab      	itete	ge
 8007ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ed4:	181b      	addge	r3, r3, r0
 8007ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eda:	bfac      	ite	ge
 8007edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ede:	81a3      	strhlt	r3, [r4, #12]
 8007ee0:	bd10      	pop	{r4, pc}

08007ee2 <__swrite>:
 8007ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee6:	461f      	mov	r7, r3
 8007ee8:	898b      	ldrh	r3, [r1, #12]
 8007eea:	05db      	lsls	r3, r3, #23
 8007eec:	4605      	mov	r5, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	4616      	mov	r6, r2
 8007ef2:	d505      	bpl.n	8007f00 <__swrite+0x1e>
 8007ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef8:	2302      	movs	r3, #2
 8007efa:	2200      	movs	r2, #0
 8007efc:	f000 f868 	bl	8007fd0 <_lseek_r>
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f0a:	81a3      	strh	r3, [r4, #12]
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	463b      	mov	r3, r7
 8007f10:	4628      	mov	r0, r5
 8007f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f16:	f000 b817 	b.w	8007f48 <_write_r>

08007f1a <__sseek>:
 8007f1a:	b510      	push	{r4, lr}
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f22:	f000 f855 	bl	8007fd0 <_lseek_r>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	bf15      	itete	ne
 8007f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f36:	81a3      	strheq	r3, [r4, #12]
 8007f38:	bf18      	it	ne
 8007f3a:	81a3      	strhne	r3, [r4, #12]
 8007f3c:	bd10      	pop	{r4, pc}

08007f3e <__sclose>:
 8007f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f42:	f000 b813 	b.w	8007f6c <_close_r>
	...

08007f48 <_write_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	4d07      	ldr	r5, [pc, #28]	; (8007f68 <_write_r+0x20>)
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	4608      	mov	r0, r1
 8007f50:	4611      	mov	r1, r2
 8007f52:	2200      	movs	r2, #0
 8007f54:	602a      	str	r2, [r5, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	f7f9 ff37 	bl	8001dca <_write>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	d102      	bne.n	8007f66 <_write_r+0x1e>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	b103      	cbz	r3, 8007f66 <_write_r+0x1e>
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	2000aefc 	.word	0x2000aefc

08007f6c <_close_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4d06      	ldr	r5, [pc, #24]	; (8007f88 <_close_r+0x1c>)
 8007f70:	2300      	movs	r3, #0
 8007f72:	4604      	mov	r4, r0
 8007f74:	4608      	mov	r0, r1
 8007f76:	602b      	str	r3, [r5, #0]
 8007f78:	f7f9 ff43 	bl	8001e02 <_close>
 8007f7c:	1c43      	adds	r3, r0, #1
 8007f7e:	d102      	bne.n	8007f86 <_close_r+0x1a>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	b103      	cbz	r3, 8007f86 <_close_r+0x1a>
 8007f84:	6023      	str	r3, [r4, #0]
 8007f86:	bd38      	pop	{r3, r4, r5, pc}
 8007f88:	2000aefc 	.word	0x2000aefc

08007f8c <_fstat_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4d07      	ldr	r5, [pc, #28]	; (8007fac <_fstat_r+0x20>)
 8007f90:	2300      	movs	r3, #0
 8007f92:	4604      	mov	r4, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	602b      	str	r3, [r5, #0]
 8007f9a:	f7f9 ff3e 	bl	8001e1a <_fstat>
 8007f9e:	1c43      	adds	r3, r0, #1
 8007fa0:	d102      	bne.n	8007fa8 <_fstat_r+0x1c>
 8007fa2:	682b      	ldr	r3, [r5, #0]
 8007fa4:	b103      	cbz	r3, 8007fa8 <_fstat_r+0x1c>
 8007fa6:	6023      	str	r3, [r4, #0]
 8007fa8:	bd38      	pop	{r3, r4, r5, pc}
 8007faa:	bf00      	nop
 8007fac:	2000aefc 	.word	0x2000aefc

08007fb0 <_isatty_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d06      	ldr	r5, [pc, #24]	; (8007fcc <_isatty_r+0x1c>)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	602b      	str	r3, [r5, #0]
 8007fbc:	f7f9 ff3d 	bl	8001e3a <_isatty>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_isatty_r+0x1a>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_isatty_r+0x1a>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	2000aefc 	.word	0x2000aefc

08007fd0 <_lseek_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4d07      	ldr	r5, [pc, #28]	; (8007ff0 <_lseek_r+0x20>)
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	4608      	mov	r0, r1
 8007fd8:	4611      	mov	r1, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	602a      	str	r2, [r5, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f7f9 ff36 	bl	8001e50 <_lseek>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d102      	bne.n	8007fee <_lseek_r+0x1e>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	b103      	cbz	r3, 8007fee <_lseek_r+0x1e>
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	2000aefc 	.word	0x2000aefc

08007ff4 <_read_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d07      	ldr	r5, [pc, #28]	; (8008014 <_read_r+0x20>)
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	4608      	mov	r0, r1
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	602a      	str	r2, [r5, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	f7f9 fec4 	bl	8001d90 <_read>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_read_r+0x1e>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	b103      	cbz	r3, 8008012 <_read_r+0x1e>
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	2000aefc 	.word	0x2000aefc

08008018 <_init>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	bf00      	nop
 800801c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801e:	bc08      	pop	{r3}
 8008020:	469e      	mov	lr, r3
 8008022:	4770      	bx	lr

08008024 <_fini>:
 8008024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008026:	bf00      	nop
 8008028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802a:	bc08      	pop	{r3}
 800802c:	469e      	mov	lr, r3
 800802e:	4770      	bx	lr
