
vsipmF3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800abe0  0800abe0  0001abe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b154  0800b154  00020234  2**0
                  CONTENTS
  4 .ARM          00000000  0800b154  0800b154  00020234  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b154  0800b154  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b154  0800b154  0001b154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b158  0800b158  0001b158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800b15c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f4  20000234  0800b390  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001628  0800b390  00021628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001309b  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc0  00000000  00000000  000332ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000360c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00036e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002024d  00000000  00000000  00037a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013151  00000000  00000000  00057c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9ba2  00000000  00000000  0006ade6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00124988  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac0  00000000  00000000  001249dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000234 	.word	0x20000234
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abc8 	.word	0x0800abc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000238 	.word	0x20000238
 80001cc:	0800abc8 	.word	0x0800abc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <noop>:
extern float* outVoltagePointer;

extern uint8_t vSection;
extern uint32_t vDACChannels[2];

void noop(void){}
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <idnCMD>:

void idnCMD(void){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
    snprintf((char*)uartResp,UARTRESSIZE,"%s\r\n",ADDR);
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <idnCMD+0x20>)
 8000d0a:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <idnCMD+0x24>)
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	4807      	ldr	r0, [pc, #28]	; (8000d2c <idnCMD+0x28>)
 8000d10:	f006 f994 	bl	800703c <sniprintf>
    HAL_UART_Transmit_IT(&huart1,uartResp,UARTRESSIZE);
 8000d14:	220f      	movs	r2, #15
 8000d16:	4905      	ldr	r1, [pc, #20]	; (8000d2c <idnCMD+0x28>)
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <idnCMD+0x2c>)
 8000d1a:	f004 fcc9 	bl	80056b0 <HAL_UART_Transmit_IT>
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	0800abe0 	.word	0x0800abe0
 8000d28:	0800abec 	.word	0x0800abec
 8000d2c:	200004b0 	.word	0x200004b0
 8000d30:	20000510 	.word	0x20000510
 8000d34:	00000000 	.word	0x00000000

08000d38 <voltageCMD>:

/*
 * REALIZZARE UN BUFFER PER IL TX!!!!
 */

void voltageCMD(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af02      	add	r7, sp, #8
    char* err;
    float outVal = strtof(argument,&err);
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	482d      	ldr	r0, [pc, #180]	; (8000df8 <voltageCMD+0xc0>)
 8000d44:	f007 f822 	bl	8007d8c <strtof>
 8000d48:	ed87 0a03 	vstr	s0, [r7, #12]

    if(err != argument){
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a2a      	ldr	r2, [pc, #168]	; (8000df8 <voltageCMD+0xc0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d041      	beq.n	8000dd8 <voltageCMD+0xa0>
        *outVoltagePointer = outVal;
 8000d54:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <voltageCMD+0xc4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	601a      	str	r2, [r3, #0]

        float voltDACVal = 4096*outVal/2.9;
 8000d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d60:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000e00 <voltageCMD+0xc8>
 8000d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d68:	ee17 0a90 	vmov	r0, s15
 8000d6c:	f7ff fbec 	bl	8000548 <__aeabi_f2d>
 8000d70:	a31f      	add	r3, pc, #124	; (adr r3, 8000df0 <voltageCMD+0xb8>)
 8000d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d76:	f7ff fd69 	bl	800084c <__aeabi_ddiv>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4610      	mov	r0, r2
 8000d80:	4619      	mov	r1, r3
 8000d82:	f7ff ff31 	bl	8000be8 <__aeabi_d2f>
 8000d86:	4603      	mov	r3, r0
 8000d88:	60bb      	str	r3, [r7, #8]

        HAL_DAC_SetValue(&hdac, vDACChannels[vSection], DAC_ALIGN_12B_R, voltDACVal);
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <voltageCMD+0xcc>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <voltageCMD+0xd0>)
 8000d92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d9e:	ee17 3a90 	vmov	r3, s15
 8000da2:	2200      	movs	r2, #0
 8000da4:	4819      	ldr	r0, [pc, #100]	; (8000e0c <voltageCMD+0xd4>)
 8000da6:	f002 fd72 	bl	800388e <HAL_DAC_SetValue>

        memset(uartResp,0,UARTRESSIZE);
 8000daa:	220f      	movs	r2, #15
 8000dac:	2100      	movs	r1, #0
 8000dae:	4818      	ldr	r0, [pc, #96]	; (8000e10 <voltageCMD+0xd8>)
 8000db0:	f005 fcd2 	bl	8006758 <memset>

        snprintf((char*)uartResp,UARTRESSIZE,"%.2f\r\n",outVal);
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f7ff fbc7 	bl	8000548 <__aeabi_f2d>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	e9cd 2300 	strd	r2, r3, [sp]
 8000dc2:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <voltageCMD+0xdc>)
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	4812      	ldr	r0, [pc, #72]	; (8000e10 <voltageCMD+0xd8>)
 8000dc8:	f006 f938 	bl	800703c <sniprintf>

        HAL_UART_Transmit_IT(&huart1,uartResp,UARTRESSIZE);
 8000dcc:	220f      	movs	r2, #15
 8000dce:	4910      	ldr	r1, [pc, #64]	; (8000e10 <voltageCMD+0xd8>)
 8000dd0:	4811      	ldr	r0, [pc, #68]	; (8000e18 <voltageCMD+0xe0>)
 8000dd2:	f004 fc6d 	bl	80056b0 <HAL_UART_Transmit_IT>
    }else{
        HAL_UART_Transmit_IT(&huart1, (uint8_t*)"ERR: NaN     \r\n", UARTRESSIZE);
    }
}
 8000dd6:	e004      	b.n	8000de2 <voltageCMD+0xaa>
        HAL_UART_Transmit_IT(&huart1, (uint8_t*)"ERR: NaN     \r\n", UARTRESSIZE);
 8000dd8:	220f      	movs	r2, #15
 8000dda:	4910      	ldr	r1, [pc, #64]	; (8000e1c <voltageCMD+0xe4>)
 8000ddc:	480e      	ldr	r0, [pc, #56]	; (8000e18 <voltageCMD+0xe0>)
 8000dde:	f004 fc67 	bl	80056b0 <HAL_UART_Transmit_IT>
}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	f3af 8000 	nop.w
 8000df0:	33333333 	.word	0x33333333
 8000df4:	40073333 	.word	0x40073333
 8000df8:	2000040c 	.word	0x2000040c
 8000dfc:	20000268 	.word	0x20000268
 8000e00:	45800000 	.word	0x45800000
 8000e04:	20000250 	.word	0x20000250
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000594 	.word	0x20000594
 8000e10:	200004b0 	.word	0x200004b0
 8000e14:	0800abf4 	.word	0x0800abf4
 8000e18:	20000510 	.word	0x20000510
 8000e1c:	0800abfc 	.word	0x0800abfc

08000e20 <execute>:
const commands_t commandExecute[] = {(commands_t)noop,
                                     (commands_t)idnCMD,
                                     (commands_t)voltageCMD};


void execute(void){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    if(command){
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <execute+0x28>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00b      	beq.n	8000e44 <execute+0x24>
        *(endPacketPointer-1) = 0; // Azzero il carattere terminatore perchè altrimenti si ripete la lettura del pacchetto
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <execute+0x2c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
        (*(commandExecute[command]))();
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <execute+0x28>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <execute+0x30>)
 8000e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e42:	4798      	blx	r3
    }
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000265 	.word	0x20000265
 8000e4c:	2000000c 	.word	0x2000000c
 8000e50:	0800ac60 	.word	0x0800ac60

08000e54 <initFSM>:
 *                ...
 *        }
 *
 */

fsm_t initFSM(state_function_t initialState, void** inputs, void** outputs){
 8000e54:	b490      	push	{r4, r7}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]

    fsm_t retFSM;

    retFSM.state = initialState;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	617b      	str	r3, [r7, #20]
    retFSM.input_var = inputs;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	61bb      	str	r3, [r7, #24]
    retFSM.output_var = outputs;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	61fb      	str	r3, [r7, #28]

    return retFSM;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	461c      	mov	r4, r3
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

}
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc90      	pop	{r4, r7}
 8000e86:	4770      	bx	lr

08000e88 <packetCtrlIDLE>:
/*
 * AGGIUNGERE UNO STATO DI WAIT CHE ASPETTI CHE LA parseFSM SI LIBERI!!! ALTRIMENTI SE NELLA SERIALE CI SONO
 * DATI NUOVI CHE SUBITO ARRIVANO AL TERMINATORE (*IDN?\N AD ESEMPIO) MI VA A CAMBIARE IL PACCHETTO DURANTE L'ESECUZIONE
 * (TRA L'ALTRO DEVI AGGIUNGERE FRA GLI INGRESSI IL SEGNALE DI BUSY DELLA parseFSM)
 */
void packetCtrlIDLE(fsm_t* s){
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,process,uint8_t) = 0;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
//    FSM_OUT(s,packetIndex,uint8_t) = 0;

    uint8_t* lastCh = FSM_IN(s,endPacketPointer,uint8_t*)-1;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]

    if(*lastCh == '\r' || *lastCh == '\n'){
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b0d      	cmp	r3, #13
 8000eac:	d003      	beq.n	8000eb6 <packetCtrlIDLE+0x2e>
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b0a      	cmp	r3, #10
 8000eb4:	d103      	bne.n	8000ebe <packetCtrlIDLE+0x36>
        FSM_STATE(s) = packetCtrlSelect;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <packetCtrlIDLE+0x4c>)
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e003      	b.n	8000ec6 <packetCtrlIDLE+0x3e>
    }else{
        FSM_STATE(s) = packetCtrlIDLE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <packetCtrlIDLE+0x50>)
 8000ec2:	601a      	str	r2, [r3, #0]
    }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	08000edd 	.word	0x08000edd
 8000ed8:	08000e89 	.word	0x08000e89

08000edc <packetCtrlSelect>:

void packetCtrlSelect(fsm_t* s){
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,process,uint8_t) = 1;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]

    FSM_STATE(s) = packetCtrlWaitProcessed;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <packetCtrlSelect+0x24>)
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	08000f05 	.word	0x08000f05

08000f04 <packetCtrlWaitProcessed>:

void packetCtrlWaitProcessed(fsm_t* s){
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,process,uint8_t) = 0;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]

    if(FSM_IN(s,packetProcessed,uint8_t) == 1){
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	3308      	adds	r3, #8
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d103      	bne.n	8000f2c <packetCtrlWaitProcessed+0x28>
        FSM_STATE(s) = packetCtrlNext;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <packetCtrlWaitProcessed+0x3c>)
 8000f28:	601a      	str	r2, [r3, #0]
    }else{
        FSM_STATE(s) = packetCtrlWaitProcessed;
    }
}
 8000f2a:	e002      	b.n	8000f32 <packetCtrlWaitProcessed+0x2e>
        FSM_STATE(s) = packetCtrlWaitProcessed;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <packetCtrlWaitProcessed+0x40>)
 8000f30:	601a      	str	r2, [r3, #0]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	08000f49 	.word	0x08000f49
 8000f44:	08000f05 	.word	0x08000f05

08000f48 <packetCtrlNext>:

void packetCtrlNext(fsm_t* s){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,process,uint8_t) = 0;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetIndex,uint8_t) = FSM_OUT(s,packetIndex,uint8_t)+1;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3201      	adds	r2, #1
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	701a      	strb	r2, [r3, #0]

    if(FSM_OUT(s,packetIndex,uint8_t) < FSM_IN(s,packetsNum,uint8_t)){
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	3304      	adds	r3, #4
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	3304      	adds	r3, #4
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d203      	bcs.n	8000f92 <packetCtrlNext+0x4a>
        FSM_STATE(s) = packetCtrlSelect;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <packetCtrlNext+0x5c>)
 8000f8e:	601a      	str	r2, [r3, #0]
    }else{
        FSM_STATE(s) = packetCtrlIDLE;
    }
}
 8000f90:	e002      	b.n	8000f98 <packetCtrlNext+0x50>
        FSM_STATE(s) = packetCtrlIDLE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <packetCtrlNext+0x60>)
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	08000edd 	.word	0x08000edd
 8000fa8:	08000e89 	.word	0x08000e89

08000fac <selectCmd>:
#define MAXLEN sizeof(MAXCMD)
#define STATELEN sizeof(STATECMD)


// Funzioni di supporto
state_function_t selectCmd(const char* arg){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    char* argEnd = strpbrk(arg," ?");
 8000fb4:	492a      	ldr	r1, [pc, #168]	; (8001060 <selectCmd+0xb4>)
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f006 f8a6 	bl	8007108 <strpbrk>
 8000fbc:	60f8      	str	r0, [r7, #12]

    size_t argL = (argEnd > 0) ? argEnd-arg : sizeof(argEnd)-1;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <selectCmd+0x20>
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	e000      	b.n	8000fce <selectCmd+0x22>
 8000fcc:	2303      	movs	r3, #3
 8000fce:	60bb      	str	r3, [r7, #8]

    if(strncmp(arg,VOLTCMDSTR,argL) == 0){
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	4924      	ldr	r1, [pc, #144]	; (8001064 <selectCmd+0xb8>)
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f006 f872 	bl	80070be <strncmp>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10d      	bne.n	8000ffc <selectCmd+0x50>
        if(*argEnd == ' ')
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b20      	cmp	r3, #32
 8000fe6:	d101      	bne.n	8000fec <selectCmd+0x40>
            return parseVoltageCmd;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <selectCmd+0xbc>)
 8000fea:	e034      	b.n	8001056 <selectCmd+0xaa>
        else if(*argEnd == '?')
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ff2:	d101      	bne.n	8000ff8 <selectCmd+0x4c>
            return parseVoltageQuery;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <selectCmd+0xc0>)
 8000ff6:	e02e      	b.n	8001056 <selectCmd+0xaa>
        else
            return parseErrCmd;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <selectCmd+0xc4>)
 8000ffa:	e02c      	b.n	8001056 <selectCmd+0xaa>
    }else if(strncmp(arg,MAXCMDSTR,argL) == 0){
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	491d      	ldr	r1, [pc, #116]	; (8001074 <selectCmd+0xc8>)
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f006 f85c 	bl	80070be <strncmp>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10d      	bne.n	8001028 <selectCmd+0x7c>
        if(*argEnd == ' ')
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b20      	cmp	r3, #32
 8001012:	d101      	bne.n	8001018 <selectCmd+0x6c>
            return parseMaxCmd;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <selectCmd+0xcc>)
 8001016:	e01e      	b.n	8001056 <selectCmd+0xaa>
        else if(*argEnd == '?')
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b3f      	cmp	r3, #63	; 0x3f
 800101e:	d101      	bne.n	8001024 <selectCmd+0x78>
            return parseMaxQuery;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <selectCmd+0xd0>)
 8001022:	e018      	b.n	8001056 <selectCmd+0xaa>
        else
            return parseErrCmd;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <selectCmd+0xc4>)
 8001026:	e016      	b.n	8001056 <selectCmd+0xaa>
    }else if(strncmp(arg,STATECMDSTR,argL) == 0){
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	4915      	ldr	r1, [pc, #84]	; (8001080 <selectCmd+0xd4>)
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f006 f846 	bl	80070be <strncmp>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10d      	bne.n	8001054 <selectCmd+0xa8>
        if(*argEnd == ' ')
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b20      	cmp	r3, #32
 800103e:	d101      	bne.n	8001044 <selectCmd+0x98>
            return parseStateCmd;
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <selectCmd+0xd8>)
 8001042:	e008      	b.n	8001056 <selectCmd+0xaa>
        else if(*argEnd == '?')
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b3f      	cmp	r3, #63	; 0x3f
 800104a:	d101      	bne.n	8001050 <selectCmd+0xa4>
            return parseStateQuery;
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <selectCmd+0xdc>)
 800104e:	e002      	b.n	8001056 <selectCmd+0xaa>
        else
            return parseErrCmd;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <selectCmd+0xc4>)
 8001052:	e000      	b.n	8001056 <selectCmd+0xaa>
    }
    return parseErrCmd;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <selectCmd+0xc4>)
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	0800ac0c 	.word	0x0800ac0c
 8001064:	0800ac10 	.word	0x0800ac10
 8001068:	080013fd 	.word	0x080013fd
 800106c:	080014f9 	.word	0x080014f9
 8001070:	080015b5 	.word	0x080015b5
 8001074:	0800ac18 	.word	0x0800ac18
 8001078:	080014d1 	.word	0x080014d1
 800107c:	0800150d 	.word	0x0800150d
 8001080:	0800ac1c 	.word	0x0800ac1c
 8001084:	080014e5 	.word	0x080014e5
 8001088:	08001521 	.word	0x08001521

0800108c <parseIDLE>:


// Macchina a stati
void parseIDLE(fsm_t* s){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 0;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	3304      	adds	r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	330c      	adds	r3, #12
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]

    if(FSM_IN(s,process,uint8_t))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	3304      	adds	r3, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <parseIDLE+0x40>
        FSM_STATE(s) = parseNode;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <parseIDLE+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
    else
        FSM_STATE(s) = parseIDLE;
}
 80010ca:	e002      	b.n	80010d2 <parseIDLE+0x46>
        FSM_STATE(s) = parseIDLE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <parseIDLE+0x58>)
 80010d0:	601a      	str	r2, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	080010e9 	.word	0x080010e9
 80010e4:	0800108d 	.word	0x0800108d

080010e8 <parseNode>:

void parseNode(fsm_t* s){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	3304      	adds	r3, #4
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	330c      	adds	r3, #12
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]

    uint8_t* pack = FSM_IN(s,currPacket,uint8_t*);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	60fb      	str	r3, [r7, #12]

    if(strncmp((const char*)pack,NODESECT,NODELEN) == 0){
 800111c:	2205      	movs	r2, #5
 800111e:	490f      	ldr	r1, [pc, #60]	; (800115c <parseNode+0x74>)
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f005 ffcc 	bl	80070be <strncmp>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d103      	bne.n	8001134 <parseNode+0x4c>
        FSM_STATE(s) = parseAddr;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <parseNode+0x78>)
 8001130:	601a      	str	r2, [r3, #0]
    }else if(strncmp((const char*)pack,IDNSECT,IDNLEN) == 0){
        FSM_STATE(s) = parseCmdIDN;
    }else{
        FSM_STATE(s) = parseErrNode;
    }
}
 8001132:	e00e      	b.n	8001152 <parseNode+0x6a>
    }else if(strncmp((const char*)pack,IDNSECT,IDNLEN) == 0){
 8001134:	2205      	movs	r2, #5
 8001136:	490b      	ldr	r1, [pc, #44]	; (8001164 <parseNode+0x7c>)
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f005 ffc0 	bl	80070be <strncmp>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d103      	bne.n	800114c <parseNode+0x64>
        FSM_STATE(s) = parseCmdIDN;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <parseNode+0x80>)
 8001148:	601a      	str	r2, [r3, #0]
}
 800114a:	e002      	b.n	8001152 <parseNode+0x6a>
        FSM_STATE(s) = parseErrNode;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <parseNode+0x84>)
 8001150:	601a      	str	r2, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	0800ac24 	.word	0x0800ac24
 8001160:	08001171 	.word	0x08001171
 8001164:	0800ac2c 	.word	0x0800ac2c
 8001168:	080012b5 	.word	0x080012b5
 800116c:	08001535 	.word	0x08001535

08001170 <parseAddr>:

void parseAddr(fsm_t* s){
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	3304      	adds	r3, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 0;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	330c      	adds	r3, #12
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]

    uint8_t* pack = FSM_IN(s,currPacket,uint8_t*);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	60fb      	str	r3, [r7, #12]

    const char* addrStr = (const char*)pack+NODELEN;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3305      	adds	r3, #5
 80011a8:	60bb      	str	r3, [r7, #8]

    if(strncmp(addrStr,ADDR,ADDRLEN) == 0){
 80011aa:	2208      	movs	r2, #8
 80011ac:	4908      	ldr	r1, [pc, #32]	; (80011d0 <parseAddr+0x60>)
 80011ae:	68b8      	ldr	r0, [r7, #8]
 80011b0:	f005 ff85 	bl	80070be <strncmp>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <parseAddr+0x52>
        FSM_STATE(s) = parseSection;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <parseAddr+0x64>)
 80011be:	601a      	str	r2, [r3, #0]
    }else{
        FSM_STATE(s) = parseSendToAddr;
    }
}
 80011c0:	e002      	b.n	80011c8 <parseAddr+0x58>
        FSM_STATE(s) = parseSendToAddr;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <parseAddr+0x68>)
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	0800ac34 	.word	0x0800ac34
 80011d4:	080011dd 	.word	0x080011dd
 80011d8:	080013bd 	.word	0x080013bd

080011dc <parseSection>:

void parseSection(fsm_t* s){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	3304      	adds	r3, #4
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 0;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	330c      	adds	r3, #12
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]

    uint8_t* pack = FSM_IN(s,currPacket,uint8_t*);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	617b      	str	r3, [r7, #20]

    const char* sectStr = (const char*)pack+NODELEN+ADDRLEN+1;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	330e      	adds	r3, #14
 8001214:	613b      	str	r3, [r7, #16]

    char* endSect = strpbrk(sectStr,":");
 8001216:	213a      	movs	r1, #58	; 0x3a
 8001218:	6938      	ldr	r0, [r7, #16]
 800121a:	f005 ff43 	bl	80070a4 <strchr>
 800121e:	60f8      	str	r0, [r7, #12]

    uint8_t secL = endSect-sectStr;
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	72fb      	strb	r3, [r7, #11]

    if(secL > 0 && strncmp(sectStr,BIASSECT,secL) == 0){
 8001228:	7afb      	ldrb	r3, [r7, #11]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00c      	beq.n	8001248 <parseSection+0x6c>
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	461a      	mov	r2, r3
 8001232:	4919      	ldr	r1, [pc, #100]	; (8001298 <parseSection+0xbc>)
 8001234:	6938      	ldr	r0, [r7, #16]
 8001236:	f005 ff42 	bl	80070be <strncmp>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d103      	bne.n	8001248 <parseSection+0x6c>
        FSM_STATE(s) = parseCmdBIAS;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a16      	ldr	r2, [pc, #88]	; (800129c <parseSection+0xc0>)
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	e023      	b.n	8001290 <parseSection+0xb4>
    }else if(secL > 0 && strncmp(sectStr,KATODESECT,secL) == 0){
 8001248:	7afb      	ldrb	r3, [r7, #11]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00c      	beq.n	8001268 <parseSection+0x8c>
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	461a      	mov	r2, r3
 8001252:	4913      	ldr	r1, [pc, #76]	; (80012a0 <parseSection+0xc4>)
 8001254:	6938      	ldr	r0, [r7, #16]
 8001256:	f005 ff32 	bl	80070be <strncmp>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d103      	bne.n	8001268 <parseSection+0x8c>
        FSM_STATE(s) = parseCmdKAT;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <parseSection+0xc8>)
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e013      	b.n	8001290 <parseSection+0xb4>
    }else if(secL > 0 && strncmp(sectStr,MONITORSECT,secL) == 0){
 8001268:	7afb      	ldrb	r3, [r7, #11]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00c      	beq.n	8001288 <parseSection+0xac>
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	461a      	mov	r2, r3
 8001272:	490d      	ldr	r1, [pc, #52]	; (80012a8 <parseSection+0xcc>)
 8001274:	6938      	ldr	r0, [r7, #16]
 8001276:	f005 ff22 	bl	80070be <strncmp>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d103      	bne.n	8001288 <parseSection+0xac>
        FSM_STATE(s) = parseCmdMON;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <parseSection+0xd0>)
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e003      	b.n	8001290 <parseSection+0xb4>
    }else{
        FSM_STATE(s) = parseErrSection;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <parseSection+0xd4>)
 800128c:	601a      	str	r2, [r3, #0]
    }
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	0800ac40 	.word	0x0800ac40
 800129c:	080012f5 	.word	0x080012f5
 80012a0:	0800ac48 	.word	0x0800ac48
 80012a4:	0800134f 	.word	0x0800134f
 80012a8:	0800ac50 	.word	0x0800ac50
 80012ac:	080013a9 	.word	0x080013a9
 80012b0:	08001575 	.word	0x08001575

080012b4 <parseCmdIDN>:

void parseCmdIDN(fsm_t* s){
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = IDNCMD;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	3304      	adds	r3, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 1;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	330c      	adds	r3, #12
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]

    FSM_STATE(s) = parseIDLE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <parseCmdIDN+0x3c>)
 80012e2:	601a      	str	r2, [r3, #0]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	0800108d 	.word	0x0800108d

080012f4 <parseCmdBIAS>:

void parseCmdBIAS(fsm_t* s){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	3304      	adds	r3, #4
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 0;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	330c      	adds	r3, #12
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,vSection,uint8_t) = BIAS;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	3314      	adds	r3, #20
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]

    uint8_t* pack = FSM_IN(s,currPacket,uint8_t*);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	60fb      	str	r3, [r7, #12]

    const char* biasArg = (const char*)pack+NODELEN+ADDRLEN+BIASLEN+2;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3313      	adds	r3, #19
 8001338:	60bb      	str	r3, [r7, #8]

    FSM_STATE(s) = selectCmd(biasArg);
 800133a:	68b8      	ldr	r0, [r7, #8]
 800133c:	f7ff fe36 	bl	8000fac <selectCmd>
 8001340:	4602      	mov	r2, r0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	601a      	str	r2, [r3, #0]

}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <parseCmdKAT>:

void parseCmdKAT(fsm_t* s){
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	3304      	adds	r3, #4
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 0;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	330c      	adds	r3, #12
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,vSection,uint8_t) = KATODE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	3314      	adds	r3, #20
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]

    uint8_t* pack = FSM_IN(s,currPacket,uint8_t*);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]

    const char* katArg = (const char*)pack+NODELEN+ADDRLEN+KATODELEN+2;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3315      	adds	r3, #21
 8001392:	60bb      	str	r3, [r7, #8]

    FSM_STATE(s) = selectCmd(katArg);
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7ff fe09 	bl	8000fac <selectCmd>
 800139a:	4602      	mov	r2, r0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	601a      	str	r2, [r3, #0]

}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <parseCmdMON>:

void parseCmdMON(fsm_t* s){
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
    return;
 80013b0:	bf00      	nop
}
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <parseSendToAddr>:

void parseSendToAddr(fsm_t* s){
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;//SENDTOADDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	3304      	adds	r3, #4
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 1;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	330c      	adds	r3, #12
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]

    FSM_STATE(s) = parseIDLE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <parseSendToAddr+0x3c>)
 80013ea:	601a      	str	r2, [r3, #0]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	0800108d 	.word	0x0800108d

080013fc <parseVoltageCmd>:

void parseVoltageCmd(fsm_t* s){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = VOLTCMD;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2202      	movs	r2, #2
 800140c:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	3304      	adds	r3, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 1;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	330c      	adds	r3, #12
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]

    uint8_t vSect = FSM_OUT(s,vSection,uint8_t);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	3314      	adds	r3, #20
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	77fb      	strb	r3, [r7, #31]
    uint8_t sectLen = BIASLEN*(1-vSect)+KATODELEN*vSect;
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	f1c3 0301 	rsb	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	b2da      	uxtb	r2, r3
 800143e:	7ffb      	ldrb	r3, [r7, #31]
 8001440:	4619      	mov	r1, r3
 8001442:	0049      	lsls	r1, r1, #1
 8001444:	440b      	add	r3, r1
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4413      	add	r3, r2
 800144c:	77bb      	strb	r3, [r7, #30]

    FSM_OUT(s,outVoltagePointer,float*) = (vSect == BIAS) ?
 800144e:	7ffb      	ldrb	r3, [r7, #31]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d103      	bne.n	800145c <parseVoltageCmd+0x60>
                                           FSM_INP(s,biasVoltage) : FSM_INP(s,katodeVoltage);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
    FSM_OUT(s,outVoltagePointer,float*) = (vSect == BIAS) ?
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	e002      	b.n	8001462 <parseVoltageCmd+0x66>
                                           FSM_INP(s,biasVoltage) : FSM_INP(s,katodeVoltage);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
    FSM_OUT(s,outVoltagePointer,float*) = (vSect == BIAS) ?
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6892      	ldr	r2, [r2, #8]
 8001466:	3210      	adds	r2, #16
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	6013      	str	r3, [r2, #0]

    char* argOut = FSM_OUTP(s,argument);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
    memset(argOut,0,CMDARGSIZE);
 8001474:	220f      	movs	r2, #15
 8001476:	2100      	movs	r1, #0
 8001478:	69b8      	ldr	r0, [r7, #24]
 800147a:	f005 f96d 	bl	8006758 <memset>

    uint8_t* pack = FSM_IN(s,currPacket,uint8_t*);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	617b      	str	r3, [r7, #20]

    const char* voltArg = (const char*)pack+NODELEN+ADDRLEN+sectLen+VOLTLEN+3;
 8001488:	7fbb      	ldrb	r3, [r7, #30]
 800148a:	3314      	adds	r3, #20
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	4413      	add	r3, r2
 8001490:	613b      	str	r3, [r7, #16]

    char* argEnd = strpbrk(voltArg,":;\n\r");
 8001492:	490d      	ldr	r1, [pc, #52]	; (80014c8 <parseVoltageCmd+0xcc>)
 8001494:	6938      	ldr	r0, [r7, #16]
 8001496:	f005 fe37 	bl	8007108 <strpbrk>
 800149a:	60f8      	str	r0, [r7, #12]

    size_t argL = (argEnd > 0) ? argEnd-voltArg : sizeof(argEnd)-1;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <parseVoltageCmd+0xae>
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	e000      	b.n	80014ac <parseVoltageCmd+0xb0>
 80014aa:	2303      	movs	r3, #3
 80014ac:	60bb      	str	r3, [r7, #8]

    strncpy(argOut,voltArg,argL);
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	6939      	ldr	r1, [r7, #16]
 80014b2:	69b8      	ldr	r0, [r7, #24]
 80014b4:	f005 fe15 	bl	80070e2 <strncpy>

    FSM_STATE(s) = parseIDLE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <parseVoltageCmd+0xd0>)
 80014bc:	601a      	str	r2, [r3, #0]

}
 80014be:	bf00      	nop
 80014c0:	3720      	adds	r7, #32
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	0800ac58 	.word	0x0800ac58
 80014cc:	0800108d 	.word	0x0800108d

080014d0 <parseMaxCmd>:

void parseMaxCmd(fsm_t* s){
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    return;
 80014d8:	bf00      	nop
}
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <parseStateCmd>:

void parseStateCmd(fsm_t* s){
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
    return;
 80014ec:	bf00      	nop
}
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <parseVoltageQuery>:

void parseVoltageQuery(fsm_t* s){
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    return;
 8001500:	bf00      	nop
}
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <parseMaxQuery>:

void parseMaxQuery(fsm_t* s){
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    return;
 8001514:	bf00      	nop
}
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <parseStateQuery>:

void parseStateQuery(fsm_t* s){
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    return;
 8001528:	bf00      	nop
}
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <parseErrNode>:

void parseExecute(fsm_t* s){
    return;
}

void parseErrNode(fsm_t* s){
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	3304      	adds	r3, #4
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 1;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	330c      	adds	r3, #12
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]

    FSM_STATE(s) = parseIDLE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a03      	ldr	r2, [pc, #12]	; (8001570 <parseErrNode+0x3c>)
 8001562:	601a      	str	r2, [r3, #0]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	0800108d 	.word	0x0800108d

08001574 <parseErrSection>:

void parseErrSection(fsm_t* s){
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	3304      	adds	r3, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 1;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	330c      	adds	r3, #12
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]

    FSM_STATE(s) = parseIDLE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a03      	ldr	r2, [pc, #12]	; (80015b0 <parseErrSection+0x3c>)
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	0800108d 	.word	0x0800108d

080015b4 <parseErrCmd>:

void parseErrCmd(fsm_t* s){
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    FSM_OUT(s,command,uint8_t) = NOOP;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,busy,uint8_t) = 1;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	3304      	adds	r3, #4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
    FSM_OUT(s,packetProcessed,uint8_t) = 1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	330c      	adds	r3, #12
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]

    FSM_STATE(s) = parseIDLE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <parseErrCmd+0x3c>)
 80015e2:	601a      	str	r2, [r3, #0]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	0800108d 	.word	0x0800108d

080015f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fa:	f000 fe3f 	bl	800227c <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(dataBuffer,0,BUFSIZE);
 80015fe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001602:	2100      	movs	r1, #0
 8001604:	482a      	ldr	r0, [pc, #168]	; (80016b0 <main+0xbc>)
 8001606:	f005 f8a7 	bl	8006758 <memset>
  memset(uartResp,0,UARTRESSIZE);
 800160a:	220f      	movs	r2, #15
 800160c:	2100      	movs	r1, #0
 800160e:	4829      	ldr	r0, [pc, #164]	; (80016b4 <main+0xc0>)
 8001610:	f005 f8a2 	bl	8006758 <memset>
  currPacket = packetToProcess[0];
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <main+0xc4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a28      	ldr	r2, [pc, #160]	; (80016bc <main+0xc8>)
 800161a:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161c:	f000 f862 	bl	80016e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001620:	f000 fa68 	bl	8001af4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001624:	f000 fa34 	bl	8001a90 <MX_DMA_Init>
  MX_ADC1_Init();
 8001628:	f000 f8bc 	bl	80017a4 <MX_ADC1_Init>
  MX_DAC_Init();
 800162c:	f000 f99a 	bl	8001964 <MX_DAC_Init>
  MX_USART1_UART_Init();
 8001630:	f000 f9ce 	bl	80019d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001634:	f000 f9fc 	bl	8001a30 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8001638:	f000 f924 	bl	8001884 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, dataBuffer, 1);
 800163c:	2201      	movs	r2, #1
 800163e:	491c      	ldr	r1, [pc, #112]	; (80016b0 <main+0xbc>)
 8001640:	481f      	ldr	r0, [pc, #124]	; (80016c0 <main+0xcc>)
 8001642:	f004 f891 	bl	8005768 <HAL_UART_Receive_IT>

  packetCtrlFSM = initFSM(packetCtrlIDLE,
 8001646:	4638      	mov	r0, r7
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <main+0xd0>)
 800164a:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <main+0xd4>)
 800164c:	491f      	ldr	r1, [pc, #124]	; (80016cc <main+0xd8>)
 800164e:	f7ff fc01 	bl	8000e54 <initFSM>
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	463a      	mov	r2, r7
 8001658:	ca07      	ldmia	r2, {r0, r1, r2}
 800165a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                          packetCtrlInputs,
                          packetCtrlOutputs);

  parseFSM = initFSM(parseIDLE,
 800165e:	4638      	mov	r0, r7
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <main+0xdc>)
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <main+0xe0>)
 8001664:	491c      	ldr	r1, [pc, #112]	; (80016d8 <main+0xe4>)
 8001666:	f7ff fbf5 	bl	8000e54 <initFSM>
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	463a      	mov	r2, r7
 8001670:	ca07      	ldmia	r2, {r0, r1, r2}
 8001672:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                     parseFsmInputs,
                     parseFsmOutputs);

  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8001676:	2100      	movs	r1, #0
 8001678:	4818      	ldr	r0, [pc, #96]	; (80016dc <main+0xe8>)
 800167a:	f002 f92d 	bl	80038d8 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_2);
 800167e:	2110      	movs	r1, #16
 8001680:	4816      	ldr	r0, [pc, #88]	; (80016dc <main+0xe8>)
 8001682:	f002 f929 	bl	80038d8 <HAL_DAC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      runFSM(&packetCtrlFSM);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f107 0210 	add.w	r2, r7, #16
 800168c:	4610      	mov	r0, r2
 800168e:	4798      	blx	r3

      currPacket = packetToProcess[packetIndex];
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <main+0xec>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <main+0xc4>)
 8001698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169c:	4a07      	ldr	r2, [pc, #28]	; (80016bc <main+0xc8>)
 800169e:	6013      	str	r3, [r2, #0]

      runFSM(&parseFSM);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f107 021c 	add.w	r2, r7, #28
 80016a6:	4610      	mov	r0, r2
 80016a8:	4798      	blx	r3

      execute();
 80016aa:	f7ff fbb9 	bl	8000e20 <execute>
      runFSM(&packetCtrlFSM);
 80016ae:	e7ea      	b.n	8001686 <main+0x92>
 80016b0:	200005a8 	.word	0x200005a8
 80016b4:	200004b0 	.word	0x200004b0
 80016b8:	2000027c 	.word	0x2000027c
 80016bc:	20001610 	.word	0x20001610
 80016c0:	20000510 	.word	0x20000510
 80016c4:	2000004c 	.word	0x2000004c
 80016c8:	20000040 	.word	0x20000040
 80016cc:	08000e89 	.word	0x08000e89
 80016d0:	20000028 	.word	0x20000028
 80016d4:	20000010 	.word	0x20000010
 80016d8:	0800108d 	.word	0x0800108d
 80016dc:	20000594 	.word	0x20000594
 80016e0:	2000026d 	.word	0x2000026d

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b09e      	sub	sp, #120	; 0x78
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016ee:	2228      	movs	r2, #40	; 0x28
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f005 f830 	bl	8006758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001708:	463b      	mov	r3, r7
 800170a:	223c      	movs	r2, #60	; 0x3c
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f005 f822 	bl	8006758 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001714:	2302      	movs	r3, #2
 8001716:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001718:	2301      	movs	r3, #1
 800171a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800171c:	2310      	movs	r3, #16
 800171e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001720:	2302      	movs	r3, #2
 8001722:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001724:	2300      	movs	r3, #0
 8001726:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001728:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800172c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001732:	4618      	mov	r0, r3
 8001734:	f002 fc80 	bl	8004038 <HAL_RCC_OscConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800173e:	f000 fa09 	bl	8001b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001742:	230f      	movs	r3, #15
 8001744:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001746:	2302      	movs	r3, #2
 8001748:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800174e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001758:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800175c:	2102      	movs	r1, #2
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fb72 	bl	8004e48 <HAL_RCC_ClockConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800176a:	f000 f9f3 	bl	8001b54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800176e:	f240 1383 	movw	r3, #387	; 0x183
 8001772:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800177c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800177e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178a:	463b      	mov	r3, r7
 800178c:	4618      	mov	r0, r3
 800178e:	f003 fd91 	bl	80052b4 <HAL_RCCEx_PeriphCLKConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001798:	f000 f9dc 	bl	8001b54 <Error_Handler>
  }
}
 800179c:	bf00      	nop
 800179e:	3778      	adds	r7, #120	; 0x78
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
 80017c4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017c6:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <MX_ADC1_Init+0xdc>)
 80017c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <MX_ADC1_Init+0xdc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <MX_ADC1_Init+0xdc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017da:	4b29      	ldr	r3, [pc, #164]	; (8001880 <MX_ADC1_Init+0xdc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <MX_ADC1_Init+0xdc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <MX_ADC1_Init+0xdc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ee:	4b24      	ldr	r3, [pc, #144]	; (8001880 <MX_ADC1_Init+0xdc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <MX_ADC1_Init+0xdc>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <MX_ADC1_Init+0xdc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <MX_ADC1_Init+0xdc>)
 8001802:	2201      	movs	r2, #1
 8001804:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001806:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <MX_ADC1_Init+0xdc>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <MX_ADC1_Init+0xdc>)
 8001810:	2204      	movs	r2, #4
 8001812:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_ADC1_Init+0xdc>)
 8001816:	2200      	movs	r2, #0
 8001818:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <MX_ADC1_Init+0xdc>)
 800181c:	2200      	movs	r2, #0
 800181e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001820:	4817      	ldr	r0, [pc, #92]	; (8001880 <MX_ADC1_Init+0xdc>)
 8001822:	f000 fdaf 	bl	8002384 <HAL_ADC_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800182c:	f000 f992 	bl	8001b54 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	4811      	ldr	r0, [pc, #68]	; (8001880 <MX_ADC1_Init+0xdc>)
 800183c:	f001 fda2 	bl	8003384 <HAL_ADCEx_MultiModeConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001846:	f000 f985 	bl	8001b54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800184a:	2301      	movs	r3, #1
 800184c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800184e:	2301      	movs	r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	4619      	mov	r1, r3
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <MX_ADC1_Init+0xdc>)
 8001868:	f001 faa0 	bl	8002dac <HAL_ADC_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001872:	f000 f96f 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000460 	.word	0x20000460

08001884 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <MX_ADC3_Init+0xd8>)
 80018a8:	4a2d      	ldr	r2, [pc, #180]	; (8001960 <MX_ADC3_Init+0xdc>)
 80018aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <MX_ADC3_Init+0xd8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <MX_ADC3_Init+0xd8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <MX_ADC3_Init+0xd8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <MX_ADC3_Init+0xd8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <MX_ADC3_Init+0xd8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <MX_ADC3_Init+0xd8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <MX_ADC3_Init+0xd8>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <MX_ADC3_Init+0xd8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018de:	4b1f      	ldr	r3, [pc, #124]	; (800195c <MX_ADC3_Init+0xd8>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_ADC3_Init+0xd8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <MX_ADC3_Init+0xd8>)
 80018ee:	2204      	movs	r2, #4
 80018f0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_ADC3_Init+0xd8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <MX_ADC3_Init+0xd8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018fe:	4817      	ldr	r0, [pc, #92]	; (800195c <MX_ADC3_Init+0xd8>)
 8001900:	f000 fd40 	bl	8002384 <HAL_ADC_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800190a:	f000 f923 	bl	8001b54 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	4810      	ldr	r0, [pc, #64]	; (800195c <MX_ADC3_Init+0xd8>)
 800191a:	f001 fd33 	bl	8003384 <HAL_ADCEx_MultiModeConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8001924:	f000 f916 	bl	8001b54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001928:	2301      	movs	r3, #1
 800192a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800192c:	2301      	movs	r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_ADC3_Init+0xd8>)
 8001946:	f001 fa31 	bl	8002dac <HAL_ADC_ConfigChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001950:	f000 f900 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	; 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200004c0 	.word	0x200004c0
 8001960:	50000400 	.word	0x50000400

08001964 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_DAC_Init+0x64>)
 8001976:	4a15      	ldr	r2, [pc, #84]	; (80019cc <MX_DAC_Init+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800197a:	4813      	ldr	r0, [pc, #76]	; (80019c8 <MX_DAC_Init+0x64>)
 800197c:	f001 ff65 	bl	800384a <HAL_DAC_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8001986:	f000 f8e5 	bl	8001b54 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2200      	movs	r2, #0
 8001996:	4619      	mov	r1, r3
 8001998:	480b      	ldr	r0, [pc, #44]	; (80019c8 <MX_DAC_Init+0x64>)
 800199a:	f001 ffe8 	bl	800396e <HAL_DAC_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80019a4:	f000 f8d6 	bl	8001b54 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2210      	movs	r2, #16
 80019ac:	4619      	mov	r1, r3
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <MX_DAC_Init+0x64>)
 80019b0:	f001 ffdd 	bl	800396e <HAL_DAC_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_DAC_Init+0x5a>
  {
    Error_Handler();
 80019ba:	f000 f8cb 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000594 	.word	0x20000594
 80019cc:	40007400 	.word	0x40007400

080019d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_USART1_UART_Init+0x58>)
 80019d6:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <MX_USART1_UART_Init+0x5c>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <MX_USART1_UART_Init+0x58>)
 80019dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_USART1_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_USART1_UART_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_USART1_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_USART1_UART_Init+0x58>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <MX_USART1_UART_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_USART1_UART_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <MX_USART1_UART_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MX_USART1_UART_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_USART1_UART_Init+0x58>)
 8001a14:	f003 fdfe 	bl	8005614 <HAL_UART_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a1e:	f000 f899 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000510 	.word	0x20000510
 8001a2c:	40013800 	.word	0x40013800

08001a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <MX_USART2_UART_Init+0x5c>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_USART2_UART_Init+0x58>)
 8001a74:	f003 fdce 	bl	8005614 <HAL_UART_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a7e:	f000 f869 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000158c 	.word	0x2000158c
 8001a8c:	40004400 	.word	0x40004400

08001a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <MX_DMA_Init+0x60>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <MX_DMA_Init+0x60>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6153      	str	r3, [r2, #20]
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <MX_DMA_Init+0x60>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <MX_DMA_Init+0x60>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <MX_DMA_Init+0x60>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6153      	str	r3, [r2, #20]
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <MX_DMA_Init+0x60>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	200b      	movs	r0, #11
 8001acc:	f001 fe87 	bl	80037de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ad0:	200b      	movs	r0, #11
 8001ad2:	f001 fea0 	bl	8003816 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	203c      	movs	r0, #60	; 0x3c
 8001adc:	f001 fe7f 	bl	80037de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001ae0:	203c      	movs	r0, #60	; 0x3c
 8001ae2:	f001 fe98 	bl	8003816 <HAL_NVIC_EnableIRQ>

}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <MX_GPIO_Init+0x5c>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <MX_GPIO_Init+0x5c>)
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	6153      	str	r3, [r2, #20]
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <MX_GPIO_Init+0x5c>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_GPIO_Init+0x5c>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <MX_GPIO_Init+0x5c>)
 8001b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b1c:	6153      	str	r3, [r2, #20]
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_GPIO_Init+0x5c>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_GPIO_Init+0x5c>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <MX_GPIO_Init+0x5c>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b34:	6153      	str	r3, [r2, #20]
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_GPIO_Init+0x5c>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <Error_Handler+0x8>
	...

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6193      	str	r3, [r2, #24]
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b96:	2007      	movs	r0, #7
 8001b98:	f001 fe16 	bl	80037c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc8:	d155      	bne.n	8001c76 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001bca:	4b59      	ldr	r3, [pc, #356]	; (8001d30 <HAL_ADC_MspInit+0x188>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	4a58      	ldr	r2, [pc, #352]	; (8001d30 <HAL_ADC_MspInit+0x188>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	6153      	str	r3, [r2, #20]
 8001bd6:	4b56      	ldr	r3, [pc, #344]	; (8001d30 <HAL_ADC_MspInit+0x188>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_ADC_MspInit+0x188>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <HAL_ADC_MspInit+0x188>)
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	6153      	str	r3, [r2, #20]
 8001bee:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_ADC_MspInit+0x188>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c10:	f002 f898 	bl	8003d44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c14:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <HAL_ADC_MspInit+0x18c>)
 8001c16:	4a48      	ldr	r2, [pc, #288]	; (8001d38 <HAL_ADC_MspInit+0x190>)
 8001c18:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <HAL_ADC_MspInit+0x18c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c20:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <HAL_ADC_MspInit+0x18c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c26:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <HAL_ADC_MspInit+0x18c>)
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c2c:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <HAL_ADC_MspInit+0x18c>)
 8001c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c32:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c34:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <HAL_ADC_MspInit+0x18c>)
 8001c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c3a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c3c:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_ADC_MspInit+0x18c>)
 8001c3e:	2220      	movs	r2, #32
 8001c40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c42:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <HAL_ADC_MspInit+0x18c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c48:	483a      	ldr	r0, [pc, #232]	; (8001d34 <HAL_ADC_MspInit+0x18c>)
 8001c4a:	f001 fedd 	bl	8003a08 <HAL_DMA_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001c54:	f7ff ff7e 	bl	8001b54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a36      	ldr	r2, [pc, #216]	; (8001d34 <HAL_ADC_MspInit+0x18c>)
 8001c5c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c5e:	4a35      	ldr	r2, [pc, #212]	; (8001d34 <HAL_ADC_MspInit+0x18c>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2100      	movs	r1, #0
 8001c68:	2012      	movs	r0, #18
 8001c6a:	f001 fdb8 	bl	80037de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c6e:	2012      	movs	r0, #18
 8001c70:	f001 fdd1 	bl	8003816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c74:	e058      	b.n	8001d28 <HAL_ADC_MspInit+0x180>
  else if(hadc->Instance==ADC3)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a30      	ldr	r2, [pc, #192]	; (8001d3c <HAL_ADC_MspInit+0x194>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d153      	bne.n	8001d28 <HAL_ADC_MspInit+0x180>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_ADC_MspInit+0x188>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <HAL_ADC_MspInit+0x188>)
 8001c86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c8a:	6153      	str	r3, [r2, #20]
 8001c8c:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_ADC_MspInit+0x188>)
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_ADC_MspInit+0x188>)
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	4a24      	ldr	r2, [pc, #144]	; (8001d30 <HAL_ADC_MspInit+0x188>)
 8001c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca2:	6153      	str	r3, [r2, #20]
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_ADC_MspInit+0x188>)
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	481f      	ldr	r0, [pc, #124]	; (8001d40 <HAL_ADC_MspInit+0x198>)
 8001cc4:	f002 f83e 	bl	8003d44 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_ADC_MspInit+0x19c>)
 8001cca:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_ADC_MspInit+0x1a0>)
 8001ccc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_ADC_MspInit+0x19c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_ADC_MspInit+0x19c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_ADC_MspInit+0x19c>)
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_ADC_MspInit+0x19c>)
 8001ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ce8:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <HAL_ADC_MspInit+0x19c>)
 8001cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cee:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_ADC_MspInit+0x19c>)
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_ADC_MspInit+0x19c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001cfc:	4811      	ldr	r0, [pc, #68]	; (8001d44 <HAL_ADC_MspInit+0x19c>)
 8001cfe:	f001 fe83 	bl	8003a08 <HAL_DMA_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_ADC_MspInit+0x164>
      Error_Handler();
 8001d08:	f7ff ff24 	bl	8001b54 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <HAL_ADC_MspInit+0x19c>)
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
 8001d12:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <HAL_ADC_MspInit+0x19c>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	202f      	movs	r0, #47	; 0x2f
 8001d1e:	f001 fd5e 	bl	80037de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001d22:	202f      	movs	r0, #47	; 0x2f
 8001d24:	f001 fd77 	bl	8003816 <HAL_NVIC_EnableIRQ>
}
 8001d28:	bf00      	nop
 8001d2a:	3730      	adds	r7, #48	; 0x30
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	20001548 	.word	0x20001548
 8001d38:	40020008 	.word	0x40020008
 8001d3c:	50000400 	.word	0x50000400
 8001d40:	48000400 	.word	0x48000400
 8001d44:	2000041c 	.word	0x2000041c
 8001d48:	40020458 	.word	0x40020458

08001d4c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <HAL_DAC_MspInit+0x74>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d124      	bne.n	8001db8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_DAC_MspInit+0x78>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <HAL_DAC_MspInit+0x78>)
 8001d74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d78:	61d3      	str	r3, [r2, #28]
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_DAC_MspInit+0x78>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_DAC_MspInit+0x78>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_DAC_MspInit+0x78>)
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d90:	6153      	str	r3, [r2, #20]
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_DAC_MspInit+0x78>)
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d9e:	2330      	movs	r3, #48	; 0x30
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da2:	2303      	movs	r3, #3
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db4:	f001 ffc6 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40007400 	.word	0x40007400
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	; 0x30
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a36      	ldr	r2, [pc, #216]	; (8001ec0 <HAL_UART_MspInit+0xf8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d130      	bne.n	8001e4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dea:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	4a35      	ldr	r2, [pc, #212]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df4:	6193      	str	r3, [r2, #24]
 8001df6:	4b33      	ldr	r3, [pc, #204]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001e08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e0c:	6153      	str	r3, [r2, #20]
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e1a:	2330      	movs	r3, #48	; 0x30
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	4619      	mov	r1, r3
 8001e34:	4824      	ldr	r0, [pc, #144]	; (8001ec8 <HAL_UART_MspInit+0x100>)
 8001e36:	f001 ff85 	bl	8003d44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2025      	movs	r0, #37	; 0x25
 8001e40:	f001 fccd 	bl	80037de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e44:	2025      	movs	r0, #37	; 0x25
 8001e46:	f001 fce6 	bl	8003816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e4a:	e035      	b.n	8001eb8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <HAL_UART_MspInit+0x104>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d130      	bne.n	8001eb8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e78:	6153      	str	r3, [r2, #20]
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_UART_MspInit+0xfc>)
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e86:	230c      	movs	r3, #12
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e96:	2307      	movs	r3, #7
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea4:	f001 ff4e 	bl	8003d44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2026      	movs	r0, #38	; 0x26
 8001eae:	f001 fc96 	bl	80037de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eb2:	2026      	movs	r0, #38	; 0x26
 8001eb4:	f001 fcaf 	bl	8003816 <HAL_NVIC_EnableIRQ>
}
 8001eb8:	bf00      	nop
 8001eba:	3730      	adds	r7, #48	; 0x30
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40013800 	.word	0x40013800
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	48000800 	.word	0x48000800
 8001ecc:	40004400 	.word	0x40004400

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <BusFault_Handler+0x4>

08001ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <UsageFault_Handler+0x4>

08001eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1c:	f000 f9f4 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <DMA1_Channel1_IRQHandler+0x10>)
 8001f2a:	f001 fe2b 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20001548 	.word	0x20001548

08001f38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <ADC1_2_IRQHandler+0x10>)
 8001f3e:	f000 fc01 	bl	8002744 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000460 	.word	0x20000460

08001f4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    uint8_t isRx = huart1.Instance->ISR & USART_ISR_RXNE;
 8001f52:	4b32      	ldr	r3, [pc, #200]	; (800201c <USART1_IRQHandler+0xd0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f60:	482e      	ldr	r0, [pc, #184]	; (800201c <USART1_IRQHandler+0xd0>)
 8001f62:	f003 fc3f 	bl	80057e4 <HAL_UART_IRQHandler>
   * nel caso in cui l'indirizzo successivo sia tale che aggiungendo un pacchetto della MASSIMA
   * larghezza si arriva alla fine del buffer, allora punto all'inizio del buffer.
   * Altrimenti continuo a riempire il buffer normalmente, tanto i pacchetti saranno di dimensioni
   * inferiori a MAXPACKETSIZE e quindi non arriverò alla fine!
   */
  if(isRx){
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d052      	beq.n	8002012 <USART1_IRQHandler+0xc6>
        if(*endPacketPointer == ';' || *endPacketPointer == '\r' || *endPacketPointer == '\n'){
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <USART1_IRQHandler+0xd4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b3b      	cmp	r3, #59	; 0x3b
 8001f74:	d009      	beq.n	8001f8a <USART1_IRQHandler+0x3e>
 8001f76:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <USART1_IRQHandler+0xd4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b0d      	cmp	r3, #13
 8001f7e:	d004      	beq.n	8001f8a <USART1_IRQHandler+0x3e>
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <USART1_IRQHandler+0xd4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b0a      	cmp	r3, #10
 8001f88:	d12c      	bne.n	8001fe4 <USART1_IRQHandler+0x98>

          packetToProcess[packetsNum] = dataPointer;
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <USART1_IRQHandler+0xd8>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <USART1_IRQHandler+0xdc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a25      	ldr	r2, [pc, #148]	; (800202c <USART1_IRQHandler+0xe0>)
 8001f96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

          packetsNum = (++packetsNum < PACKETSINBUF) ?
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <USART1_IRQHandler+0xd8>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <USART1_IRQHandler+0xd8>)
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <USART1_IRQHandler+0xd8>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b63      	cmp	r3, #99	; 0x63
 8001fac:	d802      	bhi.n	8001fb4 <USART1_IRQHandler+0x68>
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <USART1_IRQHandler+0xd8>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	e000      	b.n	8001fb6 <USART1_IRQHandler+0x6a>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	4a1b      	ldr	r2, [pc, #108]	; (8002024 <USART1_IRQHandler+0xd8>)
 8001fb8:	7013      	strb	r3, [r2, #0]
                        packetsNum : 0;

          dataPointer = (++endPacketPointer < &dataBuffer[BUFSIZE-MAXPACKETSIZE]) ?
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <USART1_IRQHandler+0xd4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
                         endPacketPointer : dataBuffer;
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <USART1_IRQHandler+0xd4>)
 8001fc2:	6013      	str	r3, [r2, #0]
          dataPointer = (++endPacketPointer < &dataBuffer[BUFSIZE-MAXPACKETSIZE]) ?
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <USART1_IRQHandler+0xd4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
                         endPacketPointer : dataBuffer;
 8001fc8:	4a19      	ldr	r2, [pc, #100]	; (8002030 <USART1_IRQHandler+0xe4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d202      	bcs.n	8001fd4 <USART1_IRQHandler+0x88>
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <USART1_IRQHandler+0xd4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	e000      	b.n	8001fd6 <USART1_IRQHandler+0x8a>
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <USART1_IRQHandler+0xe8>)
          dataPointer = (++endPacketPointer < &dataBuffer[BUFSIZE-MAXPACKETSIZE]) ?
 8001fd6:	4a14      	ldr	r2, [pc, #80]	; (8002028 <USART1_IRQHandler+0xdc>)
 8001fd8:	6013      	str	r3, [r2, #0]

          endPacketPointer = dataPointer;
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <USART1_IRQHandler+0xdc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a10      	ldr	r2, [pc, #64]	; (8002020 <USART1_IRQHandler+0xd4>)
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e00f      	b.n	8002004 <USART1_IRQHandler+0xb8>
        }else{
          endPacketPointer = (++endPacketPointer < &dataBuffer[BUFSIZE]) ?
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <USART1_IRQHandler+0xd4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3301      	adds	r3, #1
                              endPacketPointer : dataBuffer;
 8001fea:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <USART1_IRQHandler+0xd4>)
 8001fec:	6013      	str	r3, [r2, #0]
          endPacketPointer = (++endPacketPointer < &dataBuffer[BUFSIZE]) ?
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <USART1_IRQHandler+0xd4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
                              endPacketPointer : dataBuffer;
 8001ff2:	4a11      	ldr	r2, [pc, #68]	; (8002038 <USART1_IRQHandler+0xec>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d202      	bcs.n	8001ffe <USART1_IRQHandler+0xb2>
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <USART1_IRQHandler+0xd4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	e000      	b.n	8002000 <USART1_IRQHandler+0xb4>
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <USART1_IRQHandler+0xe8>)
          endPacketPointer = (++endPacketPointer < &dataBuffer[BUFSIZE]) ?
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <USART1_IRQHandler+0xd4>)
 8002002:	6013      	str	r3, [r2, #0]
        }

        HAL_UART_Receive_IT(&huart1, endPacketPointer, 1);
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <USART1_IRQHandler+0xd4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4619      	mov	r1, r3
 800200c:	4803      	ldr	r0, [pc, #12]	; (800201c <USART1_IRQHandler+0xd0>)
 800200e:	f003 fbab 	bl	8005768 <HAL_UART_Receive_IT>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000510 	.word	0x20000510
 8002020:	2000000c 	.word	0x2000000c
 8002024:	20000264 	.word	0x20000264
 8002028:	20000008 	.word	0x20000008
 800202c:	2000027c 	.word	0x2000027c
 8002030:	20001520 	.word	0x20001520
 8002034:	200005a8 	.word	0x200005a8
 8002038:	20001548 	.word	0x20001548

0800203c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <USART2_IRQHandler+0x10>)
 8002042:	f003 fbcf 	bl	80057e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000158c 	.word	0x2000158c

08002050 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <ADC3_IRQHandler+0x10>)
 8002056:	f000 fb75 	bl	8002744 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200004c0 	.word	0x200004c0

08002064 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <DMA2_Channel5_IRQHandler+0x10>)
 800206a:	f001 fd8b 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000041c 	.word	0x2000041c

08002078 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
	return 1;
 800207c:	2301      	movs	r3, #1
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_kill>:

int _kill(int pid, int sig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002092:	f004 fb37 	bl	8006704 <__errno>
 8002096:	4603      	mov	r3, r0
 8002098:	2216      	movs	r2, #22
 800209a:	601a      	str	r2, [r3, #0]
	return -1;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_exit>:

void _exit (int status)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ffe7 	bl	8002088 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020ba:	e7fe      	b.n	80020ba <_exit+0x12>

080020bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	e00a      	b.n	80020e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ce:	f3af 8000 	nop.w
 80020d2:	4601      	mov	r1, r0
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60ba      	str	r2, [r7, #8]
 80020da:	b2ca      	uxtb	r2, r1
 80020dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dbf0      	blt.n	80020ce <_read+0x12>
	}

return len;
 80020ec:	687b      	ldr	r3, [r7, #4]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e009      	b.n	800211c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf1      	blt.n	8002108 <_write+0x12>
	}
	return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_close>:

int _close(int file)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
	return -1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002156:	605a      	str	r2, [r3, #4]
	return 0;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_isatty>:

int _isatty(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
	return 1;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
	return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f004 fa9c 	bl	8006704 <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <_sbrk+0x64>)
 80021e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	2000a000 	.word	0x2000a000
 80021f8:	00000400 	.word	0x00000400
 80021fc:	20000270 	.word	0x20000270
 8002200:	20001628 	.word	0x20001628

08002204 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <SystemInit+0x20>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	4a05      	ldr	r2, [pc, #20]	; (8002224 <SystemInit+0x20>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002260 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <LoopForever+0x6>)
  ldr r1, =_edata
 800222e:	490e      	ldr	r1, [pc, #56]	; (8002268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <LoopForever+0xe>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002244:	4c0b      	ldr	r4, [pc, #44]	; (8002274 <LoopForever+0x16>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002252:	f7ff ffd7 	bl	8002204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002256:	f004 fa5b 	bl	8006710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800225a:	f7ff f9cb 	bl	80015f4 <main>

0800225e <LoopForever>:

LoopForever:
    b LoopForever
 800225e:	e7fe      	b.n	800225e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002260:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 800226c:	0800b15c 	.word	0x0800b15c
  ldr r2, =_sbss
 8002270:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002274:	20001628 	.word	0x20001628

08002278 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC4_IRQHandler>
	...

0800227c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_Init+0x28>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_Init+0x28>)
 8002286:	f043 0310 	orr.w	r3, r3, #16
 800228a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228c:	2003      	movs	r0, #3
 800228e:	f001 fa9b 	bl	80037c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002292:	2000      	movs	r0, #0
 8002294:	f000 f808 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002298:	f7ff fc62 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000

080022a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_InitTick+0x54>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_InitTick+0x58>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f001 fab3 	bl	8003832 <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00e      	b.n	80022f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	d80a      	bhi.n	80022f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	2200      	movs	r2, #0
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f001 fa7b 	bl	80037de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <HAL_InitTick+0x5c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000054 	.word	0x20000054
 8002300:	2000005c 	.word	0x2000005c
 8002304:	20000058 	.word	0x20000058

08002308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	2000005c 	.word	0x2000005c
 800232c:	20001614 	.word	0x20001614

08002330 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;  
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20001614 	.word	0x20001614

08002348 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b09a      	sub	sp, #104	; 0x68
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e1c9      	b.n	8002738 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d176      	bne.n	80024a4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d152      	bne.n	8002464 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff fbe5 	bl	8001ba8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d13b      	bne.n	8002464 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f001 f8bb 	bl	8003568 <ADC_Disable>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d12f      	bne.n	8002464 <HAL_ADC_Init+0xe0>
 8002404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002408:	2b00      	cmp	r3, #0
 800240a:	d12b      	bne.n	8002464 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002414:	f023 0302 	bic.w	r3, r3, #2
 8002418:	f043 0202 	orr.w	r2, r3, #2
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800242e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800243e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002440:	4b86      	ldr	r3, [pc, #536]	; (800265c <HAL_ADC_Init+0x2d8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a86      	ldr	r2, [pc, #536]	; (8002660 <HAL_ADC_Init+0x2dc>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0c9a      	lsrs	r2, r3, #18
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002456:	e002      	b.n	800245e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3b01      	subs	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f9      	bne.n	8002458 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800247c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002480:	d110      	bne.n	80024a4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f023 0312 	bic.w	r3, r3, #18
 800248a:	f043 0210 	orr.w	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 8136 	bne.w	800271e <HAL_ADC_Init+0x39a>
 80024b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 8131 	bne.w	800271e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 8129 	bne.w	800271e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024d4:	f043 0202 	orr.w	r2, r3, #2
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e4:	d004      	beq.n	80024f0 <HAL_ADC_Init+0x16c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a5e      	ldr	r2, [pc, #376]	; (8002664 <HAL_ADC_Init+0x2e0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_Init+0x170>
 80024f0:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <HAL_ADC_Init+0x2e4>)
 80024f2:	e000      	b.n	80024f6 <HAL_ADC_Init+0x172>
 80024f4:	4b5d      	ldr	r3, [pc, #372]	; (800266c <HAL_ADC_Init+0x2e8>)
 80024f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002500:	d102      	bne.n	8002508 <HAL_ADC_Init+0x184>
 8002502:	4b58      	ldr	r3, [pc, #352]	; (8002664 <HAL_ADC_Init+0x2e0>)
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	e01a      	b.n	800253e <HAL_ADC_Init+0x1ba>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a55      	ldr	r2, [pc, #340]	; (8002664 <HAL_ADC_Init+0x2e0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d103      	bne.n	800251a <HAL_ADC_Init+0x196>
 8002512:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e011      	b.n	800253e <HAL_ADC_Init+0x1ba>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a54      	ldr	r2, [pc, #336]	; (8002670 <HAL_ADC_Init+0x2ec>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d102      	bne.n	800252a <HAL_ADC_Init+0x1a6>
 8002524:	4b53      	ldr	r3, [pc, #332]	; (8002674 <HAL_ADC_Init+0x2f0>)
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	e009      	b.n	800253e <HAL_ADC_Init+0x1ba>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a51      	ldr	r2, [pc, #324]	; (8002674 <HAL_ADC_Init+0x2f0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d102      	bne.n	800253a <HAL_ADC_Init+0x1b6>
 8002534:	4b4e      	ldr	r3, [pc, #312]	; (8002670 <HAL_ADC_Init+0x2ec>)
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e001      	b.n	800253e <HAL_ADC_Init+0x1ba>
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d108      	bne.n	800255e <HAL_ADC_Init+0x1da>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_ADC_Init+0x1da>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_ADC_Init+0x1dc>
 800255e:	2300      	movs	r3, #0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d11c      	bne.n	800259e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002564:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d107      	bne.n	8002586 <HAL_ADC_Init+0x202>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_ADC_Init+0x202>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_ADC_Init+0x204>
 8002586:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002588:	2b00      	cmp	r3, #0
 800258a:	d108      	bne.n	800259e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800258c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	431a      	orrs	r2, r3
 800259a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7e5b      	ldrb	r3, [r3, #25]
 80025a2:	035b      	lsls	r3, r3, #13
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025a8:	2a01      	cmp	r2, #1
 80025aa:	d002      	beq.n	80025b2 <HAL_ADC_Init+0x22e>
 80025ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b0:	e000      	b.n	80025b4 <HAL_ADC_Init+0x230>
 80025b2:	2200      	movs	r2, #0
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025c4:	4313      	orrs	r3, r2
 80025c6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d11b      	bne.n	800260a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7e5b      	ldrb	r3, [r3, #25]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	3b01      	subs	r3, #1
 80025e0:	045a      	lsls	r2, r3, #17
 80025e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ea:	663b      	str	r3, [r7, #96]	; 0x60
 80025ec:	e00d      	b.n	800260a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80025f6:	f043 0220 	orr.w	r2, r3, #32
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f043 0201 	orr.w	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	2b01      	cmp	r3, #1
 8002610:	d03a      	beq.n	8002688 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a16      	ldr	r2, [pc, #88]	; (8002670 <HAL_ADC_Init+0x2ec>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d004      	beq.n	8002626 <HAL_ADC_Init+0x2a2>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <HAL_ADC_Init+0x2f0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d128      	bne.n	8002678 <HAL_ADC_Init+0x2f4>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800262e:	d012      	beq.n	8002656 <HAL_ADC_Init+0x2d2>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002638:	d00a      	beq.n	8002650 <HAL_ADC_Init+0x2cc>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002642:	d002      	beq.n	800264a <HAL_ADC_Init+0x2c6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	e018      	b.n	800267c <HAL_ADC_Init+0x2f8>
 800264a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800264e:	e015      	b.n	800267c <HAL_ADC_Init+0x2f8>
 8002650:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002654:	e012      	b.n	800267c <HAL_ADC_Init+0x2f8>
 8002656:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800265a:	e00f      	b.n	800267c <HAL_ADC_Init+0x2f8>
 800265c:	20000054 	.word	0x20000054
 8002660:	431bde83 	.word	0x431bde83
 8002664:	50000100 	.word	0x50000100
 8002668:	50000300 	.word	0x50000300
 800266c:	50000700 	.word	0x50000700
 8002670:	50000400 	.word	0x50000400
 8002674:	50000500 	.word	0x50000500
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002680:	4313      	orrs	r3, r2
 8002682:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002684:	4313      	orrs	r3, r2
 8002686:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b00      	cmp	r3, #0
 8002694:	d114      	bne.n	80026c0 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a4:	f023 0302 	bic.w	r3, r3, #2
 80026a8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7e1b      	ldrb	r3, [r3, #24]
 80026ae:	039a      	lsls	r2, r3, #14
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4313      	orrs	r3, r2
 80026ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026bc:	4313      	orrs	r3, r2
 80026be:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_ADC_Init+0x3bc>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80026d0:	430b      	orrs	r3, r1
 80026d2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d10c      	bne.n	80026f6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f023 010f 	bic.w	r1, r3, #15
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	1e5a      	subs	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
 80026f4:	e007      	b.n	8002706 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 020f 	bic.w	r2, r2, #15
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f023 0303 	bic.w	r3, r3, #3
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
 800271c:	e00a      	b.n	8002734 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f023 0312 	bic.w	r3, r3, #18
 8002726:	f043 0210 	orr.w	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800272e:	2301      	movs	r3, #1
 8002730:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002734:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002738:	4618      	mov	r0, r3
 800273a:	3768      	adds	r7, #104	; 0x68
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	fff0c007 	.word	0xfff0c007

08002744 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b04      	cmp	r3, #4
 8002764:	d106      	bne.n	8002774 <HAL_ADC_IRQHandler+0x30>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b04      	cmp	r3, #4
 8002772:	d00f      	beq.n	8002794 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800277e:	2b08      	cmp	r3, #8
 8002780:	f040 80c0 	bne.w	8002904 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b08      	cmp	r3, #8
 8002790:	f040 80b8 	bne.w	8002904 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b4:	d004      	beq.n	80027c0 <HAL_ADC_IRQHandler+0x7c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a95      	ldr	r2, [pc, #596]	; (8002a10 <HAL_ADC_IRQHandler+0x2cc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d106      	bne.n	80027ce <HAL_ADC_IRQHandler+0x8a>
 80027c0:	4b94      	ldr	r3, [pc, #592]	; (8002a14 <HAL_ADC_IRQHandler+0x2d0>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d03e      	beq.n	800284a <HAL_ADC_IRQHandler+0x106>
 80027cc:	e005      	b.n	80027da <HAL_ADC_IRQHandler+0x96>
 80027ce:	4b92      	ldr	r3, [pc, #584]	; (8002a18 <HAL_ADC_IRQHandler+0x2d4>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d037      	beq.n	800284a <HAL_ADC_IRQHandler+0x106>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027e2:	d004      	beq.n	80027ee <HAL_ADC_IRQHandler+0xaa>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a89      	ldr	r2, [pc, #548]	; (8002a10 <HAL_ADC_IRQHandler+0x2cc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d106      	bne.n	80027fc <HAL_ADC_IRQHandler+0xb8>
 80027ee:	4b89      	ldr	r3, [pc, #548]	; (8002a14 <HAL_ADC_IRQHandler+0x2d0>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	d027      	beq.n	800284a <HAL_ADC_IRQHandler+0x106>
 80027fa:	e005      	b.n	8002808 <HAL_ADC_IRQHandler+0xc4>
 80027fc:	4b86      	ldr	r3, [pc, #536]	; (8002a18 <HAL_ADC_IRQHandler+0x2d4>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2b05      	cmp	r3, #5
 8002806:	d020      	beq.n	800284a <HAL_ADC_IRQHandler+0x106>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002810:	d004      	beq.n	800281c <HAL_ADC_IRQHandler+0xd8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7e      	ldr	r2, [pc, #504]	; (8002a10 <HAL_ADC_IRQHandler+0x2cc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d106      	bne.n	800282a <HAL_ADC_IRQHandler+0xe6>
 800281c:	4b7d      	ldr	r3, [pc, #500]	; (8002a14 <HAL_ADC_IRQHandler+0x2d0>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	2b09      	cmp	r3, #9
 8002826:	d010      	beq.n	800284a <HAL_ADC_IRQHandler+0x106>
 8002828:	e005      	b.n	8002836 <HAL_ADC_IRQHandler+0xf2>
 800282a:	4b7b      	ldr	r3, [pc, #492]	; (8002a18 <HAL_ADC_IRQHandler+0x2d4>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2b09      	cmp	r3, #9
 8002834:	d009      	beq.n	800284a <HAL_ADC_IRQHandler+0x106>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800283e:	d004      	beq.n	800284a <HAL_ADC_IRQHandler+0x106>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a75      	ldr	r2, [pc, #468]	; (8002a1c <HAL_ADC_IRQHandler+0x2d8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d104      	bne.n	8002854 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	e00f      	b.n	8002874 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800285c:	d004      	beq.n	8002868 <HAL_ADC_IRQHandler+0x124>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6b      	ldr	r2, [pc, #428]	; (8002a10 <HAL_ADC_IRQHandler+0x2cc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d102      	bne.n	800286e <HAL_ADC_IRQHandler+0x12a>
 8002868:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800286c:	e000      	b.n	8002870 <HAL_ADC_IRQHandler+0x12c>
 800286e:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <HAL_ADC_IRQHandler+0x2d8>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800287e:	2b00      	cmp	r3, #0
 8002880:	d139      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002888:	2b00      	cmp	r3, #0
 800288a:	d134      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b08      	cmp	r3, #8
 8002898:	d12d      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d11a      	bne.n	80028de <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 020c 	bic.w	r2, r2, #12
 80028b6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d112      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f043 0201 	orr.w	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
 80028dc:	e00b      	b.n	80028f6 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f043 0210 	orr.w	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fd26 	bl	8002348 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	220c      	movs	r2, #12
 8002902:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b20      	cmp	r3, #32
 8002910:	d106      	bne.n	8002920 <HAL_ADC_IRQHandler+0x1dc>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b20      	cmp	r3, #32
 800291e:	d00f      	beq.n	8002940 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800292a:	2b40      	cmp	r3, #64	; 0x40
 800292c:	f040 813c 	bne.w	8002ba8 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	f040 8134 	bne.w	8002ba8 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002954:	d004      	beq.n	8002960 <HAL_ADC_IRQHandler+0x21c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2d      	ldr	r2, [pc, #180]	; (8002a10 <HAL_ADC_IRQHandler+0x2cc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d106      	bne.n	800296e <HAL_ADC_IRQHandler+0x22a>
 8002960:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <HAL_ADC_IRQHandler+0x2d0>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	2b00      	cmp	r3, #0
 800296a:	d03e      	beq.n	80029ea <HAL_ADC_IRQHandler+0x2a6>
 800296c:	e005      	b.n	800297a <HAL_ADC_IRQHandler+0x236>
 800296e:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_ADC_IRQHandler+0x2d4>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2b00      	cmp	r3, #0
 8002978:	d037      	beq.n	80029ea <HAL_ADC_IRQHandler+0x2a6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002982:	d004      	beq.n	800298e <HAL_ADC_IRQHandler+0x24a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <HAL_ADC_IRQHandler+0x2cc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d106      	bne.n	800299c <HAL_ADC_IRQHandler+0x258>
 800298e:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <HAL_ADC_IRQHandler+0x2d0>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	2b05      	cmp	r3, #5
 8002998:	d027      	beq.n	80029ea <HAL_ADC_IRQHandler+0x2a6>
 800299a:	e005      	b.n	80029a8 <HAL_ADC_IRQHandler+0x264>
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_ADC_IRQHandler+0x2d4>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d020      	beq.n	80029ea <HAL_ADC_IRQHandler+0x2a6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029b0:	d004      	beq.n	80029bc <HAL_ADC_IRQHandler+0x278>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <HAL_ADC_IRQHandler+0x2cc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d106      	bne.n	80029ca <HAL_ADC_IRQHandler+0x286>
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <HAL_ADC_IRQHandler+0x2d0>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2b09      	cmp	r3, #9
 80029c6:	d010      	beq.n	80029ea <HAL_ADC_IRQHandler+0x2a6>
 80029c8:	e005      	b.n	80029d6 <HAL_ADC_IRQHandler+0x292>
 80029ca:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <HAL_ADC_IRQHandler+0x2d4>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	2b09      	cmp	r3, #9
 80029d4:	d009      	beq.n	80029ea <HAL_ADC_IRQHandler+0x2a6>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029de:	d004      	beq.n	80029ea <HAL_ADC_IRQHandler+0x2a6>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <HAL_ADC_IRQHandler+0x2d8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d104      	bne.n	80029f4 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	e018      	b.n	8002a26 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029fc:	d004      	beq.n	8002a08 <HAL_ADC_IRQHandler+0x2c4>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <HAL_ADC_IRQHandler+0x2cc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10b      	bne.n	8002a20 <HAL_ADC_IRQHandler+0x2dc>
 8002a08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a0c:	e009      	b.n	8002a22 <HAL_ADC_IRQHandler+0x2de>
 8002a0e:	bf00      	nop
 8002a10:	50000100 	.word	0x50000100
 8002a14:	50000300 	.word	0x50000300
 8002a18:	50000700 	.word	0x50000700
 8002a1c:	50000400 	.word	0x50000400
 8002a20:	4b9d      	ldr	r3, [pc, #628]	; (8002c98 <HAL_ADC_IRQHandler+0x554>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f040 80b2 	bne.w	8002b9a <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00d      	beq.n	8002a5c <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 80a5 	bne.w	8002b9a <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 809f 	bne.w	8002b9a <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b40      	cmp	r3, #64	; 0x40
 8002a68:	f040 8097 	bne.w	8002b9a <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a74:	d004      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x33c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a88      	ldr	r2, [pc, #544]	; (8002c9c <HAL_ADC_IRQHandler+0x558>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d106      	bne.n	8002a8e <HAL_ADC_IRQHandler+0x34a>
 8002a80:	4b87      	ldr	r3, [pc, #540]	; (8002ca0 <HAL_ADC_IRQHandler+0x55c>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d03e      	beq.n	8002b0a <HAL_ADC_IRQHandler+0x3c6>
 8002a8c:	e005      	b.n	8002a9a <HAL_ADC_IRQHandler+0x356>
 8002a8e:	4b85      	ldr	r3, [pc, #532]	; (8002ca4 <HAL_ADC_IRQHandler+0x560>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d037      	beq.n	8002b0a <HAL_ADC_IRQHandler+0x3c6>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa2:	d004      	beq.n	8002aae <HAL_ADC_IRQHandler+0x36a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a7c      	ldr	r2, [pc, #496]	; (8002c9c <HAL_ADC_IRQHandler+0x558>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d106      	bne.n	8002abc <HAL_ADC_IRQHandler+0x378>
 8002aae:	4b7c      	ldr	r3, [pc, #496]	; (8002ca0 <HAL_ADC_IRQHandler+0x55c>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d027      	beq.n	8002b0a <HAL_ADC_IRQHandler+0x3c6>
 8002aba:	e005      	b.n	8002ac8 <HAL_ADC_IRQHandler+0x384>
 8002abc:	4b79      	ldr	r3, [pc, #484]	; (8002ca4 <HAL_ADC_IRQHandler+0x560>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	2b06      	cmp	r3, #6
 8002ac6:	d020      	beq.n	8002b0a <HAL_ADC_IRQHandler+0x3c6>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad0:	d004      	beq.n	8002adc <HAL_ADC_IRQHandler+0x398>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a71      	ldr	r2, [pc, #452]	; (8002c9c <HAL_ADC_IRQHandler+0x558>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d106      	bne.n	8002aea <HAL_ADC_IRQHandler+0x3a6>
 8002adc:	4b70      	ldr	r3, [pc, #448]	; (8002ca0 <HAL_ADC_IRQHandler+0x55c>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	d010      	beq.n	8002b0a <HAL_ADC_IRQHandler+0x3c6>
 8002ae8:	e005      	b.n	8002af6 <HAL_ADC_IRQHandler+0x3b2>
 8002aea:	4b6e      	ldr	r3, [pc, #440]	; (8002ca4 <HAL_ADC_IRQHandler+0x560>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2b07      	cmp	r3, #7
 8002af4:	d009      	beq.n	8002b0a <HAL_ADC_IRQHandler+0x3c6>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002afe:	d004      	beq.n	8002b0a <HAL_ADC_IRQHandler+0x3c6>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a64      	ldr	r2, [pc, #400]	; (8002c98 <HAL_ADC_IRQHandler+0x554>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d104      	bne.n	8002b14 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	e00f      	b.n	8002b34 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b1c:	d004      	beq.n	8002b28 <HAL_ADC_IRQHandler+0x3e4>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a5e      	ldr	r2, [pc, #376]	; (8002c9c <HAL_ADC_IRQHandler+0x558>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d102      	bne.n	8002b2e <HAL_ADC_IRQHandler+0x3ea>
 8002b28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b2c:	e000      	b.n	8002b30 <HAL_ADC_IRQHandler+0x3ec>
 8002b2e:	4b5a      	ldr	r3, [pc, #360]	; (8002c98 <HAL_ADC_IRQHandler+0x554>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d12d      	bne.n	8002b9a <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d11a      	bne.n	8002b82 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b5a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d112      	bne.n	8002b9a <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f043 0201 	orr.w	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b80:	e00b      	b.n	8002b9a <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f043 0210 	orr.w	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8de 	bl	8002d5c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2260      	movs	r2, #96	; 0x60
 8002ba6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b80      	cmp	r3, #128	; 0x80
 8002bb4:	d113      	bne.n	8002bde <HAL_ADC_IRQHandler+0x49a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d10c      	bne.n	8002bde <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff fbc3 	bl	800235c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bec:	d115      	bne.n	8002c1a <HAL_ADC_IRQHandler+0x4d6>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfc:	d10d      	bne.n	8002c1a <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f8ba 	bl	8002d84 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c18:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c28:	d115      	bne.n	8002c56 <HAL_ADC_IRQHandler+0x512>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c38:	d10d      	bne.n	8002c56 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f8a6 	bl	8002d98 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c54:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d151      	bne.n	8002d08 <HAL_ADC_IRQHandler+0x5c4>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d14a      	bne.n	8002d08 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d102      	bne.n	8002c80 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	e02d      	b.n	8002cdc <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c88:	d004      	beq.n	8002c94 <HAL_ADC_IRQHandler+0x550>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a03      	ldr	r2, [pc, #12]	; (8002c9c <HAL_ADC_IRQHandler+0x558>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d109      	bne.n	8002ca8 <HAL_ADC_IRQHandler+0x564>
 8002c94:	4b02      	ldr	r3, [pc, #8]	; (8002ca0 <HAL_ADC_IRQHandler+0x55c>)
 8002c96:	e008      	b.n	8002caa <HAL_ADC_IRQHandler+0x566>
 8002c98:	50000400 	.word	0x50000400
 8002c9c:	50000100 	.word	0x50000100
 8002ca0:	50000300 	.word	0x50000300
 8002ca4:	50000700 	.word	0x50000700
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_ADC_IRQHandler+0x614>)
 8002caa:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10a      	bne.n	8002cdc <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	e007      	b.n	8002cdc <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002cd8:	2301      	movs	r3, #1
 8002cda:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10e      	bne.n	8002d00 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f043 0202 	orr.w	r2, r3, #2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff fb38 	bl	8002370 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2210      	movs	r2, #16
 8002d06:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d16:	d11b      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x60c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d26:	d113      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	f043 0208 	orr.w	r2, r3, #8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d48:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f810 	bl	8002d70 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002d50:	bf00      	nop
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	50000700 	.word	0x50000700

08002d5c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b09b      	sub	sp, #108	; 0x6c
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x22>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e2cb      	b.n	8003366 <HAL_ADC_ConfigChannel+0x5ba>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f040 82af 	bne.w	8003344 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d81c      	bhi.n	8002e28 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	461a      	mov	r2, r3
 8002e02:	231f      	movs	r3, #31
 8002e04:	4093      	lsls	r3, r2
 8002e06:	43db      	mvns	r3, r3
 8002e08:	4019      	ands	r1, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
 8002e26:	e063      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b09      	cmp	r3, #9
 8002e2e:	d81e      	bhi.n	8002e6e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	3b1e      	subs	r3, #30
 8002e44:	221f      	movs	r2, #31
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	4019      	ands	r1, r3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	3b1e      	subs	r3, #30
 8002e60:	fa00 f203 	lsl.w	r2, r0, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e6c:	e040      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b0e      	cmp	r3, #14
 8002e74:	d81e      	bhi.n	8002eb4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	3b3c      	subs	r3, #60	; 0x3c
 8002e8a:	221f      	movs	r2, #31
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4019      	ands	r1, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	3b3c      	subs	r3, #60	; 0x3c
 8002ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8002eb2:	e01d      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	3b5a      	subs	r3, #90	; 0x5a
 8002ec8:	221f      	movs	r2, #31
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	4019      	ands	r1, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	3b5a      	subs	r3, #90	; 0x5a
 8002ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 80e5 	bne.w	80030ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d91c      	bls.n	8002f42 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6999      	ldr	r1, [r3, #24]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	3b1e      	subs	r3, #30
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4019      	ands	r1, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6898      	ldr	r0, [r3, #8]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	3b1e      	subs	r3, #30
 8002f34:	fa00 f203 	lsl.w	r2, r0, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	619a      	str	r2, [r3, #24]
 8002f40:	e019      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6959      	ldr	r1, [r3, #20]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	2207      	movs	r2, #7
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	4019      	ands	r1, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6898      	ldr	r0, [r3, #8]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	08db      	lsrs	r3, r3, #3
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d84f      	bhi.n	8003038 <HAL_ADC_ConfigChannel+0x28c>
 8002f98:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <HAL_ADC_ConfigChannel+0x1f4>)
 8002f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9e:	bf00      	nop
 8002fa0:	08002fb1 	.word	0x08002fb1
 8002fa4:	08002fd3 	.word	0x08002fd3
 8002fa8:	08002ff5 	.word	0x08002ff5
 8002fac:	08003017 	.word	0x08003017
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fb6:	4b9f      	ldr	r3, [pc, #636]	; (8003234 <HAL_ADC_ConfigChannel+0x488>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	0691      	lsls	r1, r2, #26
 8002fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002fce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002fd0:	e07e      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fd8:	4b96      	ldr	r3, [pc, #600]	; (8003234 <HAL_ADC_ConfigChannel+0x488>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	0691      	lsls	r1, r2, #26
 8002fe2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ff0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ff2:	e06d      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ffa:	4b8e      	ldr	r3, [pc, #568]	; (8003234 <HAL_ADC_ConfigChannel+0x488>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	0691      	lsls	r1, r2, #26
 8003004:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003006:	430a      	orrs	r2, r1
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003012:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003014:	e05c      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800301c:	4b85      	ldr	r3, [pc, #532]	; (8003234 <HAL_ADC_ConfigChannel+0x488>)
 800301e:	4013      	ands	r3, r2
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	0691      	lsls	r1, r2, #26
 8003026:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003028:	430a      	orrs	r2, r1
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003034:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003036:	e04b      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	069b      	lsls	r3, r3, #26
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800305a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	069b      	lsls	r3, r3, #26
 800306c:	429a      	cmp	r2, r3
 800306e:	d107      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800307e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003086:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	069b      	lsls	r3, r3, #26
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030a2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	069b      	lsls	r3, r3, #26
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d10a      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80030c8:	e001      	b.n	80030ce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80030ce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d108      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x344>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x344>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x346>
 80030f0:	2300      	movs	r3, #0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f040 8131 	bne.w	800335a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d00f      	beq.n	8003120 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2201      	movs	r2, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	400a      	ands	r2, r1
 800311a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800311e:	e049      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b09      	cmp	r3, #9
 8003140:	d91c      	bls.n	800317c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6999      	ldr	r1, [r3, #24]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	3b1b      	subs	r3, #27
 8003154:	2207      	movs	r2, #7
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	4019      	ands	r1, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6898      	ldr	r0, [r3, #8]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	3b1b      	subs	r3, #27
 800316e:	fa00 f203 	lsl.w	r2, r0, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	619a      	str	r2, [r3, #24]
 800317a:	e01b      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6959      	ldr	r1, [r3, #20]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	4613      	mov	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4413      	add	r3, r2
 800318e:	2207      	movs	r2, #7
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	4019      	ands	r1, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6898      	ldr	r0, [r3, #8]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	fa00 f203 	lsl.w	r2, r0, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031bc:	d004      	beq.n	80031c8 <HAL_ADC_ConfigChannel+0x41c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <HAL_ADC_ConfigChannel+0x48c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x420>
 80031c8:	4b1c      	ldr	r3, [pc, #112]	; (800323c <HAL_ADC_ConfigChannel+0x490>)
 80031ca:	e000      	b.n	80031ce <HAL_ADC_ConfigChannel+0x422>
 80031cc:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <HAL_ADC_ConfigChannel+0x494>)
 80031ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d105      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80031e8:	2b11      	cmp	r3, #17
 80031ea:	d105      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80031ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80031fc:	2b12      	cmp	r3, #18
 80031fe:	f040 80ac 	bne.w	800335a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 80a5 	bne.w	800335a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003218:	d102      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x474>
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <HAL_ADC_ConfigChannel+0x48c>)
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	e023      	b.n	8003268 <HAL_ADC_ConfigChannel+0x4bc>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a04      	ldr	r2, [pc, #16]	; (8003238 <HAL_ADC_ConfigChannel+0x48c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d10c      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x498>
 800322a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e01a      	b.n	8003268 <HAL_ADC_ConfigChannel+0x4bc>
 8003232:	bf00      	nop
 8003234:	83fff000 	.word	0x83fff000
 8003238:	50000100 	.word	0x50000100
 800323c:	50000300 	.word	0x50000300
 8003240:	50000700 	.word	0x50000700
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a4a      	ldr	r2, [pc, #296]	; (8003374 <HAL_ADC_ConfigChannel+0x5c8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d102      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x4a8>
 800324e:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_ADC_ConfigChannel+0x5cc>)
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	e009      	b.n	8003268 <HAL_ADC_ConfigChannel+0x4bc>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a47      	ldr	r2, [pc, #284]	; (8003378 <HAL_ADC_ConfigChannel+0x5cc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d102      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x4b8>
 800325e:	4b45      	ldr	r3, [pc, #276]	; (8003374 <HAL_ADC_ConfigChannel+0x5c8>)
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e001      	b.n	8003268 <HAL_ADC_ConfigChannel+0x4bc>
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d108      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x4dc>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x4dc>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_ADC_ConfigChannel+0x4de>
 8003288:	2300      	movs	r3, #0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d150      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800328e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003290:	2b00      	cmp	r3, #0
 8003292:	d010      	beq.n	80032b6 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d107      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x504>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x504>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x506>
 80032b0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d13c      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d11d      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x54e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c6:	d118      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80032c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032d4:	4b29      	ldr	r3, [pc, #164]	; (800337c <HAL_ADC_ConfigChannel+0x5d0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a29      	ldr	r2, [pc, #164]	; (8003380 <HAL_ADC_ConfigChannel+0x5d4>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0c9a      	lsrs	r2, r3, #18
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032ea:	e002      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f9      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032f8:	e02e      	b.n	8003358 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b11      	cmp	r3, #17
 8003300:	d10b      	bne.n	800331a <HAL_ADC_ConfigChannel+0x56e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800330a:	d106      	bne.n	800331a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800330c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003316:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003318:	e01e      	b.n	8003358 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b12      	cmp	r3, #18
 8003320:	d11a      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800332a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800332e:	e013      	b.n	8003358 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	f043 0220 	orr.w	r2, r3, #32
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003342:	e00a      	b.n	800335a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	f043 0220 	orr.w	r2, r3, #32
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003356:	e000      	b.n	800335a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003358:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003362:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003366:	4618      	mov	r0, r3
 8003368:	376c      	adds	r7, #108	; 0x6c
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	50000400 	.word	0x50000400
 8003378:	50000500 	.word	0x50000500
 800337c:	20000054 	.word	0x20000054
 8003380:	431bde83 	.word	0x431bde83

08003384 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003384:	b480      	push	{r7}
 8003386:	b099      	sub	sp, #100	; 0x64
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339c:	d102      	bne.n	80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800339e:	4b6d      	ldr	r3, [pc, #436]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	e01a      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a6a      	ldr	r2, [pc, #424]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d103      	bne.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80033ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	e011      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a67      	ldr	r2, [pc, #412]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d102      	bne.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033c0:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	e009      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a64      	ldr	r2, [pc, #400]	; (800355c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d102      	bne.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80033d0:	4b61      	ldr	r3, [pc, #388]	; (8003558 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	e001      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0b0      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e0a9      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 808d 	bne.w	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 8086 	bne.w	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003420:	d004      	beq.n	800342c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a4b      	ldr	r2, [pc, #300]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800342c:	4b4c      	ldr	r3, [pc, #304]	; (8003560 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800342e:	e000      	b.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003430:	4b4c      	ldr	r3, [pc, #304]	; (8003564 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003432:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d040      	beq.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800343c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6859      	ldr	r1, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800344e:	035b      	lsls	r3, r3, #13
 8003450:	430b      	orrs	r3, r1
 8003452:	431a      	orrs	r2, r3
 8003454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003456:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d108      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003478:	2300      	movs	r3, #0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d15c      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800349a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800349c:	2b00      	cmp	r3, #0
 800349e:	d14b      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80034a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034a8:	f023 030f 	bic.w	r3, r3, #15
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	6811      	ldr	r1, [r2, #0]
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	6892      	ldr	r2, [r2, #8]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	431a      	orrs	r2, r3
 80034b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ba:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80034bc:	e03c      	b.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034c8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d108      	bne.n	80034ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d123      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d107      	bne.n	800350c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800350c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800350e:	2b00      	cmp	r3, #0
 8003510:	d112      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800351a:	f023 030f 	bic.w	r3, r3, #15
 800351e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003520:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003522:	e009      	b.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003536:	e000      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003538:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003546:	4618      	mov	r0, r3
 8003548:	3764      	adds	r7, #100	; 0x64
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	50000100 	.word	0x50000100
 8003558:	50000400 	.word	0x50000400
 800355c:	50000500 	.word	0x50000500
 8003560:	50000300 	.word	0x50000300
 8003564:	50000700 	.word	0x50000700

08003568 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b01      	cmp	r3, #1
 8003580:	d108      	bne.n	8003594 <ADC_Disable+0x2c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <ADC_Disable+0x2c>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <ADC_Disable+0x2e>
 8003594:	2300      	movs	r3, #0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d040      	beq.n	800361c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 030d 	and.w	r3, r3, #13
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d10f      	bne.n	80035c8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0202 	orr.w	r2, r2, #2
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2203      	movs	r2, #3
 80035be:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80035c0:	f7fe feb6 	bl	8002330 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035c6:	e022      	b.n	800360e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f043 0210 	orr.w	r2, r3, #16
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d8:	f043 0201 	orr.w	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e01c      	b.n	800361e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035e4:	f7fe fea4 	bl	8002330 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d90d      	bls.n	800360e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f043 0210 	orr.w	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e007      	b.n	800361e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b01      	cmp	r3, #1
 800361a:	d0e3      	beq.n	80035e4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <__NVIC_SetPriorityGrouping+0x44>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003644:	4013      	ands	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800365a:	4a04      	ldr	r2, [pc, #16]	; (800366c <__NVIC_SetPriorityGrouping+0x44>)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	60d3      	str	r3, [r2, #12]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003674:	4b04      	ldr	r3, [pc, #16]	; (8003688 <__NVIC_GetPriorityGrouping+0x18>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	0a1b      	lsrs	r3, r3, #8
 800367a:	f003 0307 	and.w	r3, r3, #7
}
 800367e:	4618      	mov	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	2b00      	cmp	r3, #0
 800369c:	db0b      	blt.n	80036b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	f003 021f 	and.w	r2, r3, #31
 80036a4:	4907      	ldr	r1, [pc, #28]	; (80036c4 <__NVIC_EnableIRQ+0x38>)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	2001      	movs	r0, #1
 80036ae:	fa00 f202 	lsl.w	r2, r0, r2
 80036b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	e000e100 	.word	0xe000e100

080036c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	6039      	str	r1, [r7, #0]
 80036d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	db0a      	blt.n	80036f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	490c      	ldr	r1, [pc, #48]	; (8003714 <__NVIC_SetPriority+0x4c>)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	440b      	add	r3, r1
 80036ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f0:	e00a      	b.n	8003708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4908      	ldr	r1, [pc, #32]	; (8003718 <__NVIC_SetPriority+0x50>)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	3b04      	subs	r3, #4
 8003700:	0112      	lsls	r2, r2, #4
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	440b      	add	r3, r1
 8003706:	761a      	strb	r2, [r3, #24]
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000e100 	.word	0xe000e100
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800371c:	b480      	push	{r7}
 800371e:	b089      	sub	sp, #36	; 0x24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f1c3 0307 	rsb	r3, r3, #7
 8003736:	2b04      	cmp	r3, #4
 8003738:	bf28      	it	cs
 800373a:	2304      	movcs	r3, #4
 800373c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3304      	adds	r3, #4
 8003742:	2b06      	cmp	r3, #6
 8003744:	d902      	bls.n	800374c <NVIC_EncodePriority+0x30>
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3b03      	subs	r3, #3
 800374a:	e000      	b.n	800374e <NVIC_EncodePriority+0x32>
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003750:	f04f 32ff 	mov.w	r2, #4294967295
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	401a      	ands	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003764:	f04f 31ff 	mov.w	r1, #4294967295
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	43d9      	mvns	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	4313      	orrs	r3, r2
         );
}
 8003776:	4618      	mov	r0, r3
 8003778:	3724      	adds	r7, #36	; 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3b01      	subs	r3, #1
 8003790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003794:	d301      	bcc.n	800379a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003796:	2301      	movs	r3, #1
 8003798:	e00f      	b.n	80037ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <SysTick_Config+0x40>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037a2:	210f      	movs	r1, #15
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	f7ff ff8e 	bl	80036c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <SysTick_Config+0x40>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037b2:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <SysTick_Config+0x40>)
 80037b4:	2207      	movs	r2, #7
 80037b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	e000e010 	.word	0xe000e010

080037c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff29 	bl	8003628 <__NVIC_SetPriorityGrouping>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	4603      	mov	r3, r0
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037f0:	f7ff ff3e 	bl	8003670 <__NVIC_GetPriorityGrouping>
 80037f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	6978      	ldr	r0, [r7, #20]
 80037fc:	f7ff ff8e 	bl	800371c <NVIC_EncodePriority>
 8003800:	4602      	mov	r2, r0
 8003802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff5d 	bl	80036c8 <__NVIC_SetPriority>
}
 800380e:	bf00      	nop
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	4603      	mov	r3, r0
 800381e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff31 	bl	800368c <__NVIC_EnableIRQ>
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ffa2 	bl	8003784 <SysTick_Config>
 8003840:	4603      	mov	r3, r0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e014      	b.n	8003886 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	791b      	ldrb	r3, [r3, #4]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d105      	bne.n	8003872 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fe fa6d 	bl	8001d4c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800388e:	b480      	push	{r7}
 8003890:	b087      	sub	sp, #28
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d105      	bne.n	80038b8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	3308      	adds	r3, #8
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e004      	b.n	80038c2 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	3314      	adds	r3, #20
 80038c0:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	461a      	mov	r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	795b      	ldrb	r3, [r3, #5]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_DAC_Start+0x16>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e039      	b.n	8003962 <HAL_DAC_Start+0x8a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6819      	ldr	r1, [r3, #0]
 8003900:	2201      	movs	r2, #1
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	409a      	lsls	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10f      	bne.n	8003934 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800391e:	2b3c      	cmp	r3, #60	; 0x3c
 8003920:	d118      	bne.n	8003954 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	e00f      	b.n	8003954 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800393e:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8003942:	d107      	bne.n	8003954 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0202 	orr.w	r2, r2, #2
 8003952:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800396e:	b480      	push	{r7}
 8003970:	b087      	sub	sp, #28
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	795b      	ldrb	r3, [r3, #5]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_DAC_ConfigChannel+0x20>
 800398a:	2302      	movs	r3, #2
 800398c:	e036      	b.n	80039fc <HAL_DAC_ConfigChannel+0x8e>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2202      	movs	r2, #2
 8003998:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80039a2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4013      	ands	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6819      	ldr	r1, [r3, #0]
 80039dc:	22c0      	movs	r2, #192	; 0xc0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43da      	mvns	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	400a      	ands	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e037      	b.n	8003a8e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a34:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a38:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f92b 	bl	8003ccc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}  
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d008      	beq.n	8003aba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e020      	b.n	8003afc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 020e 	bic.w	r2, r2, #14
 8003ac8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d005      	beq.n	8003b2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2204      	movs	r2, #4
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
 8003b28:	e027      	b.n	8003b7a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 020e 	bic.w	r2, r2, #14
 8003b38:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0201 	bic.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	2101      	movs	r1, #1
 8003b54:	fa01 f202 	lsl.w	r2, r1, r2
 8003b58:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	4798      	blx	r3
    } 
  }
  return status;
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	2204      	movs	r2, #4
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d024      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x72>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01f      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d107      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0204 	bic.w	r2, r2, #4
 8003bd2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	2104      	movs	r1, #4
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d06a      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003bf4:	e065      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d02c      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xdc>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d027      	beq.n	8003c60 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10b      	bne.n	8003c36 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 020a 	bic.w	r2, r2, #10
 8003c2c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3e:	2102      	movs	r1, #2
 8003c40:	fa01 f202 	lsl.w	r2, r1, r2
 8003c44:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d035      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003c5e:	e030      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	2208      	movs	r2, #8
 8003c66:	409a      	lsls	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d028      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x13e>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d023      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 020e 	bic.w	r2, r2, #14
 8003c88:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	2101      	movs	r1, #1
 8003c94:	fa01 f202 	lsl.w	r2, r1, r2
 8003c98:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4798      	blx	r3
    }
  }
}  
 8003cc0:	e7ff      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x13e>
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <DMA_CalcBaseAndBitshift+0x60>)
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d80f      	bhi.n	8003d00 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <DMA_CalcBaseAndBitshift+0x64>)
 8003ce8:	4413      	add	r3, r2
 8003cea:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <DMA_CalcBaseAndBitshift+0x68>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	009a      	lsls	r2, r3, #2
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a0f      	ldr	r2, [pc, #60]	; (8003d38 <DMA_CalcBaseAndBitshift+0x6c>)
 8003cfc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003cfe:	e00e      	b.n	8003d1e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <DMA_CalcBaseAndBitshift+0x70>)
 8003d08:	4413      	add	r3, r2
 8003d0a:	4a0a      	ldr	r2, [pc, #40]	; (8003d34 <DMA_CalcBaseAndBitshift+0x68>)
 8003d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	009a      	lsls	r2, r3, #2
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <DMA_CalcBaseAndBitshift+0x74>)
 8003d1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40020407 	.word	0x40020407
 8003d30:	bffdfff8 	.word	0xbffdfff8
 8003d34:	cccccccd 	.word	0xcccccccd
 8003d38:	40020000 	.word	0x40020000
 8003d3c:	bffdfbf8 	.word	0xbffdfbf8
 8003d40:	40020400 	.word	0x40020400

08003d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d52:	e154      	b.n	8003ffe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2101      	movs	r1, #1
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	4013      	ands	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8146 	beq.w	8003ff8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d00b      	beq.n	8003d8c <HAL_GPIO_Init+0x48>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d007      	beq.n	8003d8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d80:	2b11      	cmp	r3, #17
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b12      	cmp	r3, #18
 8003d8a:	d130      	bne.n	8003dee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	f003 0201 	and.w	r2, r3, #1
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0xea>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b12      	cmp	r3, #18
 8003e2c:	d123      	bne.n	8003e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	08da      	lsrs	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3208      	adds	r2, #8
 8003e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	220f      	movs	r2, #15
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	08da      	lsrs	r2, r3, #3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3208      	adds	r2, #8
 8003e70:	6939      	ldr	r1, [r7, #16]
 8003e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	2203      	movs	r2, #3
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 0203 	and.w	r2, r3, #3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80a0 	beq.w	8003ff8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb8:	4b58      	ldr	r3, [pc, #352]	; (800401c <HAL_GPIO_Init+0x2d8>)
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	4a57      	ldr	r2, [pc, #348]	; (800401c <HAL_GPIO_Init+0x2d8>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6193      	str	r3, [r2, #24]
 8003ec4:	4b55      	ldr	r3, [pc, #340]	; (800401c <HAL_GPIO_Init+0x2d8>)
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ed0:	4a53      	ldr	r2, [pc, #332]	; (8004020 <HAL_GPIO_Init+0x2dc>)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	089b      	lsrs	r3, r3, #2
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003efa:	d019      	beq.n	8003f30 <HAL_GPIO_Init+0x1ec>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a49      	ldr	r2, [pc, #292]	; (8004024 <HAL_GPIO_Init+0x2e0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <HAL_GPIO_Init+0x1e8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a48      	ldr	r2, [pc, #288]	; (8004028 <HAL_GPIO_Init+0x2e4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00d      	beq.n	8003f28 <HAL_GPIO_Init+0x1e4>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a47      	ldr	r2, [pc, #284]	; (800402c <HAL_GPIO_Init+0x2e8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <HAL_GPIO_Init+0x1e0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a46      	ldr	r2, [pc, #280]	; (8004030 <HAL_GPIO_Init+0x2ec>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <HAL_GPIO_Init+0x1dc>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	e008      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f20:	2305      	movs	r3, #5
 8003f22:	e006      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f24:	2303      	movs	r3, #3
 8003f26:	e004      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e002      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f30:	2300      	movs	r3, #0
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	f002 0203 	and.w	r2, r2, #3
 8003f38:	0092      	lsls	r2, r2, #2
 8003f3a:	4093      	lsls	r3, r2
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f42:	4937      	ldr	r1, [pc, #220]	; (8004020 <HAL_GPIO_Init+0x2dc>)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	3302      	adds	r3, #2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f50:	4b38      	ldr	r3, [pc, #224]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f74:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f7a:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f9e:	4a25      	ldr	r2, [pc, #148]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fa4:	4b23      	ldr	r3, [pc, #140]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003fc8:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ff2:	4a10      	ldr	r2, [pc, #64]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	f47f aea3 	bne.w	8003d54 <HAL_GPIO_Init+0x10>
  }
}
 800400e:	bf00      	nop
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40021000 	.word	0x40021000
 8004020:	40010000 	.word	0x40010000
 8004024:	48000400 	.word	0x48000400
 8004028:	48000800 	.word	0x48000800
 800402c:	48000c00 	.word	0x48000c00
 8004030:	48001000 	.word	0x48001000
 8004034:	40010400 	.word	0x40010400

08004038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800403e:	af00      	add	r7, sp, #0
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d102      	bne.n	8004052 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f000 bef4 	b.w	8004e3a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 816a 	beq.w	8004336 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004062:	4bb3      	ldr	r3, [pc, #716]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b04      	cmp	r3, #4
 800406c:	d00c      	beq.n	8004088 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800406e:	4bb0      	ldr	r3, [pc, #704]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b08      	cmp	r3, #8
 8004078:	d159      	bne.n	800412e <HAL_RCC_OscConfig+0xf6>
 800407a:	4bad      	ldr	r3, [pc, #692]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004086:	d152      	bne.n	800412e <HAL_RCC_OscConfig+0xf6>
 8004088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800408c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800409c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d102      	bne.n	80040ba <HAL_RCC_OscConfig+0x82>
 80040b4:	4b9e      	ldr	r3, [pc, #632]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	e015      	b.n	80040e6 <HAL_RCC_OscConfig+0xae>
 80040ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040be:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80040ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80040d6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80040e2:	4b93      	ldr	r3, [pc, #588]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040ea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80040ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80040f2:	fa92 f2a2 	rbit	r2, r2
 80040f6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80040fa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80040fe:	fab2 f282 	clz	r2, r2
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	f042 0220 	orr.w	r2, r2, #32
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	f002 021f 	and.w	r2, r2, #31
 800410e:	2101      	movs	r1, #1
 8004110:	fa01 f202 	lsl.w	r2, r1, r2
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 810c 	beq.w	8004334 <HAL_RCC_OscConfig+0x2fc>
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 8106 	bne.w	8004334 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f000 be86 	b.w	8004e3a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412e:	1d3b      	adds	r3, r7, #4
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004138:	d106      	bne.n	8004148 <HAL_RCC_OscConfig+0x110>
 800413a:	4b7d      	ldr	r3, [pc, #500]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7c      	ldr	r2, [pc, #496]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e030      	b.n	80041aa <HAL_RCC_OscConfig+0x172>
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0x134>
 8004152:	4b77      	ldr	r3, [pc, #476]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a76      	ldr	r2, [pc, #472]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 8004158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4b74      	ldr	r3, [pc, #464]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a73      	ldr	r2, [pc, #460]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 8004164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e01e      	b.n	80041aa <HAL_RCC_OscConfig+0x172>
 800416c:	1d3b      	adds	r3, r7, #4
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004176:	d10c      	bne.n	8004192 <HAL_RCC_OscConfig+0x15a>
 8004178:	4b6d      	ldr	r3, [pc, #436]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a6c      	ldr	r2, [pc, #432]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 800417e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	4b6a      	ldr	r3, [pc, #424]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a69      	ldr	r2, [pc, #420]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 800418a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	e00b      	b.n	80041aa <HAL_RCC_OscConfig+0x172>
 8004192:	4b67      	ldr	r3, [pc, #412]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a66      	ldr	r2, [pc, #408]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 8004198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4b64      	ldr	r3, [pc, #400]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a63      	ldr	r2, [pc, #396]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 80041a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041aa:	4b61      	ldr	r3, [pc, #388]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	f023 020f 	bic.w	r2, r3, #15
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	495d      	ldr	r1, [pc, #372]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041be:	1d3b      	adds	r3, r7, #4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d059      	beq.n	800427c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c8:	f7fe f8b2 	bl	8002330 <HAL_GetTick>
 80041cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d0:	e00a      	b.n	80041e8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d2:	f7fe f8ad 	bl	8002330 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d902      	bls.n	80041e8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	f000 be29 	b.w	8004e3a <HAL_RCC_OscConfig+0xe02>
 80041e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80041fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	d102      	bne.n	800421a <HAL_RCC_OscConfig+0x1e2>
 8004214:	4b46      	ldr	r3, [pc, #280]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	e015      	b.n	8004246 <HAL_RCC_OscConfig+0x20e>
 800421a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800421e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004226:	fa93 f3a3 	rbit	r3, r3
 800422a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800422e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004232:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004236:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004242:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800424a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800424e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004252:	fa92 f2a2 	rbit	r2, r2
 8004256:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800425a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800425e:	fab2 f282 	clz	r2, r2
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	f042 0220 	orr.w	r2, r2, #32
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	f002 021f 	and.w	r2, r2, #31
 800426e:	2101      	movs	r1, #1
 8004270:	fa01 f202 	lsl.w	r2, r1, r2
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ab      	beq.n	80041d2 <HAL_RCC_OscConfig+0x19a>
 800427a:	e05c      	b.n	8004336 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fe f858 	bl	8002330 <HAL_GetTick>
 8004280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004284:	e00a      	b.n	800429c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004286:	f7fe f853 	bl	8002330 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d902      	bls.n	800429c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	f000 bdcf 	b.w	8004e3a <HAL_RCC_OscConfig+0xe02>
 800429c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80042b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b4:	fab3 f383 	clz	r3, r3
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d102      	bne.n	80042ce <HAL_RCC_OscConfig+0x296>
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	e015      	b.n	80042fa <HAL_RCC_OscConfig+0x2c2>
 80042ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80042e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80042ea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80042f6:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <HAL_RCC_OscConfig+0x2f8>)
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042fe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004302:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004306:	fa92 f2a2 	rbit	r2, r2
 800430a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800430e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004312:	fab2 f282 	clz	r2, r2
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	f042 0220 	orr.w	r2, r2, #32
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	f002 021f 	and.w	r2, r2, #31
 8004322:	2101      	movs	r1, #1
 8004324:	fa01 f202 	lsl.w	r2, r1, r2
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1ab      	bne.n	8004286 <HAL_RCC_OscConfig+0x24e>
 800432e:	e002      	b.n	8004336 <HAL_RCC_OscConfig+0x2fe>
 8004330:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004336:	1d3b      	adds	r3, r7, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 816f 	beq.w	8004624 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004346:	4bd0      	ldr	r3, [pc, #832]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004352:	4bcd      	ldr	r3, [pc, #820]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b08      	cmp	r3, #8
 800435c:	d16c      	bne.n	8004438 <HAL_RCC_OscConfig+0x400>
 800435e:	4bca      	ldr	r3, [pc, #808]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d166      	bne.n	8004438 <HAL_RCC_OscConfig+0x400>
 800436a:	2302      	movs	r3, #2
 800436c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004374:	fa93 f3a3 	rbit	r3, r3
 8004378:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800437c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004380:	fab3 f383 	clz	r3, r3
 8004384:	b2db      	uxtb	r3, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	d102      	bne.n	800439a <HAL_RCC_OscConfig+0x362>
 8004394:	4bbc      	ldr	r3, [pc, #752]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	e013      	b.n	80043c2 <HAL_RCC_OscConfig+0x38a>
 800439a:	2302      	movs	r3, #2
 800439c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80043ac:	2302      	movs	r3, #2
 80043ae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80043b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80043be:	4bb2      	ldr	r3, [pc, #712]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	2202      	movs	r2, #2
 80043c4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80043c8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80043cc:	fa92 f2a2 	rbit	r2, r2
 80043d0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80043d4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80043d8:	fab2 f282 	clz	r2, r2
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	f042 0220 	orr.w	r2, r2, #32
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	f002 021f 	and.w	r2, r2, #31
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f202 	lsl.w	r2, r1, r2
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d007      	beq.n	8004404 <HAL_RCC_OscConfig+0x3cc>
 80043f4:	1d3b      	adds	r3, r7, #4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d002      	beq.n	8004404 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f000 bd1b 	b.w	8004e3a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004404:	4ba0      	ldr	r3, [pc, #640]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800440c:	1d3b      	adds	r3, r7, #4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	21f8      	movs	r1, #248	; 0xf8
 8004414:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004418:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800441c:	fa91 f1a1 	rbit	r1, r1
 8004420:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004424:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004428:	fab1 f181 	clz	r1, r1
 800442c:	b2c9      	uxtb	r1, r1
 800442e:	408b      	lsls	r3, r1
 8004430:	4995      	ldr	r1, [pc, #596]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 8004432:	4313      	orrs	r3, r2
 8004434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004436:	e0f5      	b.n	8004624 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004438:	1d3b      	adds	r3, r7, #4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8085 	beq.w	800454e <HAL_RCC_OscConfig+0x516>
 8004444:	2301      	movs	r3, #1
 8004446:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004456:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004464:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	461a      	mov	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7fd ff5e 	bl	8002330 <HAL_GetTick>
 8004474:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004478:	e00a      	b.n	8004490 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447a:	f7fd ff59 	bl	8002330 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d902      	bls.n	8004490 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	f000 bcd5 	b.w	8004e3a <HAL_RCC_OscConfig+0xe02>
 8004490:	2302      	movs	r3, #2
 8004492:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80044a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a6:	fab3 f383 	clz	r3, r3
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d102      	bne.n	80044c0 <HAL_RCC_OscConfig+0x488>
 80044ba:	4b73      	ldr	r3, [pc, #460]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	e013      	b.n	80044e8 <HAL_RCC_OscConfig+0x4b0>
 80044c0:	2302      	movs	r3, #2
 80044c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80044ca:	fa93 f3a3 	rbit	r3, r3
 80044ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80044d2:	2302      	movs	r3, #2
 80044d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80044d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80044dc:	fa93 f3a3 	rbit	r3, r3
 80044e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80044e4:	4b68      	ldr	r3, [pc, #416]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	2202      	movs	r2, #2
 80044ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80044ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80044f2:	fa92 f2a2 	rbit	r2, r2
 80044f6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80044fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80044fe:	fab2 f282 	clz	r2, r2
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	f042 0220 	orr.w	r2, r2, #32
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	f002 021f 	and.w	r2, r2, #31
 800450e:	2101      	movs	r1, #1
 8004510:	fa01 f202 	lsl.w	r2, r1, r2
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0af      	beq.n	800447a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451a:	4b5b      	ldr	r3, [pc, #364]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004522:	1d3b      	adds	r3, r7, #4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	21f8      	movs	r1, #248	; 0xf8
 800452a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004532:	fa91 f1a1 	rbit	r1, r1
 8004536:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800453a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800453e:	fab1 f181 	clz	r1, r1
 8004542:	b2c9      	uxtb	r1, r1
 8004544:	408b      	lsls	r3, r1
 8004546:	4950      	ldr	r1, [pc, #320]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 8004548:	4313      	orrs	r3, r2
 800454a:	600b      	str	r3, [r1, #0]
 800454c:	e06a      	b.n	8004624 <HAL_RCC_OscConfig+0x5ec>
 800454e:	2301      	movs	r3, #1
 8004550:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004560:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004564:	fab3 f383 	clz	r3, r3
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800456e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	461a      	mov	r2, r3
 8004576:	2300      	movs	r3, #0
 8004578:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fd fed9 	bl	8002330 <HAL_GetTick>
 800457e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004582:	e00a      	b.n	800459a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004584:	f7fd fed4 	bl	8002330 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d902      	bls.n	800459a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	f000 bc50 	b.w	8004e3a <HAL_RCC_OscConfig+0xe02>
 800459a:	2302      	movs	r3, #2
 800459c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80045ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b0:	fab3 f383 	clz	r3, r3
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d102      	bne.n	80045ca <HAL_RCC_OscConfig+0x592>
 80045c4:	4b30      	ldr	r3, [pc, #192]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	e013      	b.n	80045f2 <HAL_RCC_OscConfig+0x5ba>
 80045ca:	2302      	movs	r3, #2
 80045cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80045dc:	2302      	movs	r3, #2
 80045de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80045e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80045e6:	fa93 f3a3 	rbit	r3, r3
 80045ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80045ee:	4b26      	ldr	r3, [pc, #152]	; (8004688 <HAL_RCC_OscConfig+0x650>)
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2202      	movs	r2, #2
 80045f4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80045f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80045fc:	fa92 f2a2 	rbit	r2, r2
 8004600:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004604:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004608:	fab2 f282 	clz	r2, r2
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	f042 0220 	orr.w	r2, r2, #32
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	f002 021f 	and.w	r2, r2, #31
 8004618:	2101      	movs	r1, #1
 800461a:	fa01 f202 	lsl.w	r2, r1, r2
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1af      	bne.n	8004584 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004624:	1d3b      	adds	r3, r7, #4
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80da 	beq.w	80047e8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004634:	1d3b      	adds	r3, r7, #4
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d069      	beq.n	8004712 <HAL_RCC_OscConfig+0x6da>
 800463e:	2301      	movs	r3, #1
 8004640:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004644:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004648:	fa93 f3a3 	rbit	r3, r3
 800464c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004654:	fab3 f383 	clz	r3, r3
 8004658:	b2db      	uxtb	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_OscConfig+0x654>)
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	461a      	mov	r2, r3
 8004664:	2301      	movs	r3, #1
 8004666:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004668:	f7fd fe62 	bl	8002330 <HAL_GetTick>
 800466c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004670:	e00e      	b.n	8004690 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004672:	f7fd fe5d 	bl	8002330 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d906      	bls.n	8004690 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e3d9      	b.n	8004e3a <HAL_RCC_OscConfig+0xe02>
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
 800468c:	10908120 	.word	0x10908120
 8004690:	2302      	movs	r3, #2
 8004692:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80046a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80046a6:	2202      	movs	r2, #2
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	fa93 f2a3 	rbit	r2, r3
 80046b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80046be:	2202      	movs	r2, #2
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	fa93 f2a3 	rbit	r2, r3
 80046cc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80046d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	4ba5      	ldr	r3, [pc, #660]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 80046d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80046da:	2102      	movs	r1, #2
 80046dc:	6019      	str	r1, [r3, #0]
 80046de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	fa93 f1a3 	rbit	r1, r3
 80046e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80046ec:	6019      	str	r1, [r3, #0]
  return result;
 80046ee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	fab3 f383 	clz	r3, r3
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0b0      	beq.n	8004672 <HAL_RCC_OscConfig+0x63a>
 8004710:	e06a      	b.n	80047e8 <HAL_RCC_OscConfig+0x7b0>
 8004712:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	fa93 f2a3 	rbit	r2, r3
 8004724:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004728:	601a      	str	r2, [r3, #0]
  return result;
 800472a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800472e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004730:	fab3 f383 	clz	r3, r3
 8004734:	b2db      	uxtb	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	4b8c      	ldr	r3, [pc, #560]	; (800496c <HAL_RCC_OscConfig+0x934>)
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	461a      	mov	r2, r3
 8004740:	2300      	movs	r3, #0
 8004742:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004744:	f7fd fdf4 	bl	8002330 <HAL_GetTick>
 8004748:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800474c:	e009      	b.n	8004762 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800474e:	f7fd fdef 	bl	8002330 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e36b      	b.n	8004e3a <HAL_RCC_OscConfig+0xe02>
 8004762:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004766:	2202      	movs	r2, #2
 8004768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	fa93 f2a3 	rbit	r2, r3
 8004774:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800477e:	2202      	movs	r2, #2
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	fa93 f2a3 	rbit	r2, r3
 800478c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004796:	2202      	movs	r2, #2
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	fa93 f2a3 	rbit	r2, r3
 80047a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80047a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047aa:	4b6f      	ldr	r3, [pc, #444]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 80047ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80047b2:	2102      	movs	r1, #2
 80047b4:	6019      	str	r1, [r3, #0]
 80047b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	fa93 f1a3 	rbit	r1, r3
 80047c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80047c4:	6019      	str	r1, [r3, #0]
  return result;
 80047c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	2101      	movs	r1, #1
 80047de:	fa01 f303 	lsl.w	r3, r1, r3
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1b2      	bne.n	800474e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e8:	1d3b      	adds	r3, r7, #4
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8158 	beq.w	8004aa8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f8:	2300      	movs	r3, #0
 80047fa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047fe:	4b5a      	ldr	r3, [pc, #360]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d112      	bne.n	8004830 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800480a:	4b57      	ldr	r3, [pc, #348]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	4a56      	ldr	r2, [pc, #344]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 8004810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004814:	61d3      	str	r3, [r2, #28]
 8004816:	4b54      	ldr	r3, [pc, #336]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800481e:	f107 0308 	add.w	r3, r7, #8
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f107 0308 	add.w	r3, r7, #8
 8004828:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004830:	4b4f      	ldr	r3, [pc, #316]	; (8004970 <HAL_RCC_OscConfig+0x938>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004838:	2b00      	cmp	r3, #0
 800483a:	d11a      	bne.n	8004872 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483c:	4b4c      	ldr	r3, [pc, #304]	; (8004970 <HAL_RCC_OscConfig+0x938>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a4b      	ldr	r2, [pc, #300]	; (8004970 <HAL_RCC_OscConfig+0x938>)
 8004842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004846:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004848:	f7fd fd72 	bl	8002330 <HAL_GetTick>
 800484c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004850:	e009      	b.n	8004866 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004852:	f7fd fd6d 	bl	8002330 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	; 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e2e9      	b.n	8004e3a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004866:	4b42      	ldr	r3, [pc, #264]	; (8004970 <HAL_RCC_OscConfig+0x938>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0ef      	beq.n	8004852 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004872:	1d3b      	adds	r3, r7, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d106      	bne.n	800488a <HAL_RCC_OscConfig+0x852>
 800487c:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	4a39      	ldr	r2, [pc, #228]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	6213      	str	r3, [r2, #32]
 8004888:	e02f      	b.n	80048ea <HAL_RCC_OscConfig+0x8b2>
 800488a:	1d3b      	adds	r3, r7, #4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10c      	bne.n	80048ae <HAL_RCC_OscConfig+0x876>
 8004894:	4b34      	ldr	r3, [pc, #208]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	4a33      	ldr	r2, [pc, #204]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	6213      	str	r3, [r2, #32]
 80048a0:	4b31      	ldr	r3, [pc, #196]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	4a30      	ldr	r2, [pc, #192]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 80048a6:	f023 0304 	bic.w	r3, r3, #4
 80048aa:	6213      	str	r3, [r2, #32]
 80048ac:	e01d      	b.n	80048ea <HAL_RCC_OscConfig+0x8b2>
 80048ae:	1d3b      	adds	r3, r7, #4
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d10c      	bne.n	80048d2 <HAL_RCC_OscConfig+0x89a>
 80048b8:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	4a2a      	ldr	r2, [pc, #168]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 80048be:	f043 0304 	orr.w	r3, r3, #4
 80048c2:	6213      	str	r3, [r2, #32]
 80048c4:	4b28      	ldr	r3, [pc, #160]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	4a27      	ldr	r2, [pc, #156]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	6213      	str	r3, [r2, #32]
 80048d0:	e00b      	b.n	80048ea <HAL_RCC_OscConfig+0x8b2>
 80048d2:	4b25      	ldr	r3, [pc, #148]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	4a24      	ldr	r2, [pc, #144]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	6213      	str	r3, [r2, #32]
 80048de:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4a21      	ldr	r2, [pc, #132]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 80048e4:	f023 0304 	bic.w	r3, r3, #4
 80048e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d06b      	beq.n	80049cc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f4:	f7fd fd1c 	bl	8002330 <HAL_GetTick>
 80048f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fc:	e00b      	b.n	8004916 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048fe:	f7fd fd17 	bl	8002330 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	; 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e291      	b.n	8004e3a <HAL_RCC_OscConfig+0xe02>
 8004916:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800491a:	2202      	movs	r2, #2
 800491c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	fa93 f2a3 	rbit	r2, r3
 8004928:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004932:	2202      	movs	r2, #2
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	fa93 f2a3 	rbit	r2, r3
 8004940:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004944:	601a      	str	r2, [r3, #0]
  return result;
 8004946:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800494a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494c:	fab3 f383 	clz	r3, r3
 8004950:	b2db      	uxtb	r3, r3
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f043 0302 	orr.w	r3, r3, #2
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d109      	bne.n	8004974 <HAL_RCC_OscConfig+0x93c>
 8004960:	4b01      	ldr	r3, [pc, #4]	; (8004968 <HAL_RCC_OscConfig+0x930>)
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	e014      	b.n	8004990 <HAL_RCC_OscConfig+0x958>
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
 800496c:	10908120 	.word	0x10908120
 8004970:	40007000 	.word	0x40007000
 8004974:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004978:	2202      	movs	r2, #2
 800497a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	fa93 f2a3 	rbit	r2, r3
 8004986:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	4bbb      	ldr	r3, [pc, #748]	; (8004c7c <HAL_RCC_OscConfig+0xc44>)
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004994:	2102      	movs	r1, #2
 8004996:	6011      	str	r1, [r2, #0]
 8004998:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	fa92 f1a2 	rbit	r1, r2
 80049a2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80049a6:	6011      	str	r1, [r2, #0]
  return result;
 80049a8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	fab2 f282 	clz	r2, r2
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	f002 021f 	and.w	r2, r2, #31
 80049be:	2101      	movs	r1, #1
 80049c0:	fa01 f202 	lsl.w	r2, r1, r2
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d099      	beq.n	80048fe <HAL_RCC_OscConfig+0x8c6>
 80049ca:	e063      	b.n	8004a94 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049cc:	f7fd fcb0 	bl	8002330 <HAL_GetTick>
 80049d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d4:	e00b      	b.n	80049ee <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d6:	f7fd fcab 	bl	8002330 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e225      	b.n	8004e3a <HAL_RCC_OscConfig+0xe02>
 80049ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80049f2:	2202      	movs	r2, #2
 80049f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	fa93 f2a3 	rbit	r2, r3
 8004a00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	fa93 f2a3 	rbit	r2, r3
 8004a18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004a1c:	601a      	str	r2, [r3, #0]
  return result;
 8004a1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004a22:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a24:	fab3 f383 	clz	r3, r3
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f043 0302 	orr.w	r3, r3, #2
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d102      	bne.n	8004a3e <HAL_RCC_OscConfig+0xa06>
 8004a38:	4b90      	ldr	r3, [pc, #576]	; (8004c7c <HAL_RCC_OscConfig+0xc44>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	e00d      	b.n	8004a5a <HAL_RCC_OscConfig+0xa22>
 8004a3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004a42:	2202      	movs	r2, #2
 8004a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	fa93 f2a3 	rbit	r2, r3
 8004a50:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	4b89      	ldr	r3, [pc, #548]	; (8004c7c <HAL_RCC_OscConfig+0xc44>)
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a5e:	2102      	movs	r1, #2
 8004a60:	6011      	str	r1, [r2, #0]
 8004a62:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	fa92 f1a2 	rbit	r1, r2
 8004a6c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004a70:	6011      	str	r1, [r2, #0]
  return result;
 8004a72:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	fab2 f282 	clz	r2, r2
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	f002 021f 	and.w	r2, r2, #31
 8004a88:	2101      	movs	r1, #1
 8004a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1a0      	bne.n	80049d6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a94:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9c:	4b77      	ldr	r3, [pc, #476]	; (8004c7c <HAL_RCC_OscConfig+0xc44>)
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	4a76      	ldr	r2, [pc, #472]	; (8004c7c <HAL_RCC_OscConfig+0xc44>)
 8004aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa8:	1d3b      	adds	r3, r7, #4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 81c2 	beq.w	8004e38 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab4:	4b71      	ldr	r3, [pc, #452]	; (8004c7c <HAL_RCC_OscConfig+0xc44>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 030c 	and.w	r3, r3, #12
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	f000 819c 	beq.w	8004dfa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac2:	1d3b      	adds	r3, r7, #4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	f040 8114 	bne.w	8004cf6 <HAL_RCC_OscConfig+0xcbe>
 8004ace:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004ad2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	fa93 f2a3 	rbit	r2, r3
 8004ae2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ae6:	601a      	str	r2, [r3, #0]
  return result;
 8004ae8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004aec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aee:	fab3 f383 	clz	r3, r3
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	461a      	mov	r2, r3
 8004b00:	2300      	movs	r3, #0
 8004b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fd fc14 	bl	8002330 <HAL_GetTick>
 8004b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b0c:	e009      	b.n	8004b22 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b0e:	f7fd fc0f 	bl	8002330 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e18b      	b.n	8004e3a <HAL_RCC_OscConfig+0xe02>
 8004b22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	fa93 f2a3 	rbit	r2, r3
 8004b36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004b3a:	601a      	str	r2, [r3, #0]
  return result;
 8004b3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004b40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b42:	fab3 f383 	clz	r3, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d102      	bne.n	8004b5c <HAL_RCC_OscConfig+0xb24>
 8004b56:	4b49      	ldr	r3, [pc, #292]	; (8004c7c <HAL_RCC_OscConfig+0xc44>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	e01b      	b.n	8004b94 <HAL_RCC_OscConfig+0xb5c>
 8004b5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	fa93 f2a3 	rbit	r2, r3
 8004b70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	fa93 f2a3 	rbit	r2, r3
 8004b8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	4b3a      	ldr	r3, [pc, #232]	; (8004c7c <HAL_RCC_OscConfig+0xc44>)
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b9c:	6011      	str	r1, [r2, #0]
 8004b9e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	fa92 f1a2 	rbit	r1, r2
 8004ba8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004bac:	6011      	str	r1, [r2, #0]
  return result;
 8004bae:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	fab2 f282 	clz	r2, r2
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	f042 0220 	orr.w	r2, r2, #32
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	f002 021f 	and.w	r2, r2, #31
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d19e      	bne.n	8004b0e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bd0:	4b2a      	ldr	r3, [pc, #168]	; (8004c7c <HAL_RCC_OscConfig+0xc44>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bd8:	1d3b      	adds	r3, r7, #4
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004bde:	1d3b      	adds	r3, r7, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	430b      	orrs	r3, r1
 8004be6:	4925      	ldr	r1, [pc, #148]	; (8004c7c <HAL_RCC_OscConfig+0xc44>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]
 8004bec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004bf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	fa93 f2a3 	rbit	r2, r3
 8004c00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c04:	601a      	str	r2, [r3, #0]
  return result;
 8004c06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c0a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c0c:	fab3 f383 	clz	r3, r3
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2301      	movs	r3, #1
 8004c20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c22:	f7fd fb85 	bl	8002330 <HAL_GetTick>
 8004c26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c2a:	e009      	b.n	8004c40 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c2c:	f7fd fb80 	bl	8002330 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e0fc      	b.n	8004e3a <HAL_RCC_OscConfig+0xe02>
 8004c40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	fa93 f2a3 	rbit	r2, r3
 8004c54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c58:	601a      	str	r2, [r3, #0]
  return result;
 8004c5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c60:	fab3 f383 	clz	r3, r3
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d105      	bne.n	8004c80 <HAL_RCC_OscConfig+0xc48>
 8004c74:	4b01      	ldr	r3, [pc, #4]	; (8004c7c <HAL_RCC_OscConfig+0xc44>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	e01e      	b.n	8004cb8 <HAL_RCC_OscConfig+0xc80>
 8004c7a:	bf00      	nop
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	fa93 f2a3 	rbit	r2, r3
 8004c94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	fa93 f2a3 	rbit	r2, r3
 8004cae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	4b63      	ldr	r3, [pc, #396]	; (8004e44 <HAL_RCC_OscConfig+0xe0c>)
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004cbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cc0:	6011      	str	r1, [r2, #0]
 8004cc2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	fa92 f1a2 	rbit	r1, r2
 8004ccc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004cd0:	6011      	str	r1, [r2, #0]
  return result;
 8004cd2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	fab2 f282 	clz	r2, r2
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	f042 0220 	orr.w	r2, r2, #32
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	f002 021f 	and.w	r2, r2, #31
 8004ce8:	2101      	movs	r1, #1
 8004cea:	fa01 f202 	lsl.w	r2, r1, r2
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d09b      	beq.n	8004c2c <HAL_RCC_OscConfig+0xbf4>
 8004cf4:	e0a0      	b.n	8004e38 <HAL_RCC_OscConfig+0xe00>
 8004cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	fa93 f2a3 	rbit	r2, r3
 8004d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d0e:	601a      	str	r2, [r3, #0]
  return result;
 8004d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d14:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d16:	fab3 f383 	clz	r3, r3
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	461a      	mov	r2, r3
 8004d28:	2300      	movs	r3, #0
 8004d2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2c:	f7fd fb00 	bl	8002330 <HAL_GetTick>
 8004d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d34:	e009      	b.n	8004d4a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d36:	f7fd fafb 	bl	8002330 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e077      	b.n	8004e3a <HAL_RCC_OscConfig+0xe02>
 8004d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	fa93 f2a3 	rbit	r2, r3
 8004d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d62:	601a      	str	r2, [r3, #0]
  return result;
 8004d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d6a:	fab3 f383 	clz	r3, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d102      	bne.n	8004d84 <HAL_RCC_OscConfig+0xd4c>
 8004d7e:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <HAL_RCC_OscConfig+0xe0c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	e01b      	b.n	8004dbc <HAL_RCC_OscConfig+0xd84>
 8004d84:	f107 0320 	add.w	r3, r7, #32
 8004d88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	f107 0320 	add.w	r3, r7, #32
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	fa93 f2a3 	rbit	r2, r3
 8004d98:	f107 031c 	add.w	r3, r7, #28
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	f107 0318 	add.w	r3, r7, #24
 8004da2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	f107 0318 	add.w	r3, r7, #24
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	fa93 f2a3 	rbit	r2, r3
 8004db2:	f107 0314 	add.w	r3, r7, #20
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	4b22      	ldr	r3, [pc, #136]	; (8004e44 <HAL_RCC_OscConfig+0xe0c>)
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f107 0210 	add.w	r2, r7, #16
 8004dc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004dc4:	6011      	str	r1, [r2, #0]
 8004dc6:	f107 0210 	add.w	r2, r7, #16
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	fa92 f1a2 	rbit	r1, r2
 8004dd0:	f107 020c 	add.w	r2, r7, #12
 8004dd4:	6011      	str	r1, [r2, #0]
  return result;
 8004dd6:	f107 020c 	add.w	r2, r7, #12
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	fab2 f282 	clz	r2, r2
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	f042 0220 	orr.w	r2, r2, #32
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	f002 021f 	and.w	r2, r2, #31
 8004dec:	2101      	movs	r1, #1
 8004dee:	fa01 f202 	lsl.w	r2, r1, r2
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d19e      	bne.n	8004d36 <HAL_RCC_OscConfig+0xcfe>
 8004df8:	e01e      	b.n	8004e38 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dfa:	1d3b      	adds	r3, r7, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e018      	b.n	8004e3a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e08:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <HAL_RCC_OscConfig+0xe0c>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e10:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004e14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e18:	1d3b      	adds	r3, r7, #4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d108      	bne.n	8004e34 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004e22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004e26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d001      	beq.n	8004e38 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40021000 	.word	0x40021000

08004e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b09e      	sub	sp, #120	; 0x78
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e162      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e60:	4b90      	ldr	r3, [pc, #576]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d910      	bls.n	8004e90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6e:	4b8d      	ldr	r3, [pc, #564]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 0207 	bic.w	r2, r3, #7
 8004e76:	498b      	ldr	r1, [pc, #556]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7e:	4b89      	ldr	r3, [pc, #548]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d001      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e14a      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9c:	4b82      	ldr	r3, [pc, #520]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	497f      	ldr	r1, [pc, #508]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80dc 	beq.w	8005074 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d13c      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xf6>
 8004ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ec8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ecc:	fa93 f3a3 	rbit	r3, r3
 8004ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed4:	fab3 f383 	clz	r3, r3
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d102      	bne.n	8004eee <HAL_RCC_ClockConfig+0xa6>
 8004ee8:	4b6f      	ldr	r3, [pc, #444]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	e00f      	b.n	8004f0e <HAL_RCC_ClockConfig+0xc6>
 8004eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ef2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ef6:	fa93 f3a3 	rbit	r3, r3
 8004efa:	667b      	str	r3, [r7, #100]	; 0x64
 8004efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f00:	663b      	str	r3, [r7, #96]	; 0x60
 8004f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f04:	fa93 f3a3 	rbit	r3, r3
 8004f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f0a:	4b67      	ldr	r3, [pc, #412]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f12:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f16:	fa92 f2a2 	rbit	r2, r2
 8004f1a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f1e:	fab2 f282 	clz	r2, r2
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	f042 0220 	orr.w	r2, r2, #32
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	f002 021f 	and.w	r2, r2, #31
 8004f2e:	2101      	movs	r1, #1
 8004f30:	fa01 f202 	lsl.w	r2, r1, r2
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d17b      	bne.n	8005032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0f3      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d13c      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x178>
 8004f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4e:	fa93 f3a3 	rbit	r3, r3
 8004f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f56:	fab3 f383 	clz	r3, r3
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d102      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x128>
 8004f6a:	4b4f      	ldr	r3, [pc, #316]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	e00f      	b.n	8004f90 <HAL_RCC_ClockConfig+0x148>
 8004f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f78:	fa93 f3a3 	rbit	r3, r3
 8004f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f82:	643b      	str	r3, [r7, #64]	; 0x40
 8004f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f8c:	4b46      	ldr	r3, [pc, #280]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f94:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f98:	fa92 f2a2 	rbit	r2, r2
 8004f9c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa0:	fab2 f282 	clz	r2, r2
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	f042 0220 	orr.w	r2, r2, #32
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	f002 021f 	and.w	r2, r2, #31
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d13a      	bne.n	8005032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0b2      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	fa93 f3a3 	rbit	r3, r3
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fce:	fab3 f383 	clz	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d102      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x1a0>
 8004fe2:	4b31      	ldr	r3, [pc, #196]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	e00d      	b.n	8005004 <HAL_RCC_ClockConfig+0x1bc>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	fa93 f3a3 	rbit	r3, r3
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	623b      	str	r3, [r7, #32]
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	fa93 f3a3 	rbit	r3, r3
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2202      	movs	r2, #2
 8005006:	61ba      	str	r2, [r7, #24]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	fa92 f2a2 	rbit	r2, r2
 800500e:	617a      	str	r2, [r7, #20]
  return result;
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	fab2 f282 	clz	r2, r2
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	f042 0220 	orr.w	r2, r2, #32
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	f002 021f 	and.w	r2, r2, #31
 8005022:	2101      	movs	r1, #1
 8005024:	fa01 f202 	lsl.w	r2, r1, r2
 8005028:	4013      	ands	r3, r2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e079      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005032:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f023 0203 	bic.w	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	491a      	ldr	r1, [pc, #104]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8005040:	4313      	orrs	r3, r2
 8005042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005044:	f7fd f974 	bl	8002330 <HAL_GetTick>
 8005048:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504a:	e00a      	b.n	8005062 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800504c:	f7fd f970 	bl	8002330 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	; 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e061      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005062:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <HAL_RCC_ClockConfig+0x260>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 020c 	and.w	r2, r3, #12
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	429a      	cmp	r2, r3
 8005072:	d1eb      	bne.n	800504c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d214      	bcs.n	80050ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005082:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 0207 	bic.w	r2, r3, #7
 800508a:	4906      	ldr	r1, [pc, #24]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005092:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <HAL_RCC_ClockConfig+0x25c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d005      	beq.n	80050ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e040      	b.n	8005126 <HAL_RCC_ClockConfig+0x2de>
 80050a4:	40022000 	.word	0x40022000
 80050a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b8:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <HAL_RCC_ClockConfig+0x2e8>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	491a      	ldr	r1, [pc, #104]	; (8005130 <HAL_RCC_ClockConfig+0x2e8>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050d6:	4b16      	ldr	r3, [pc, #88]	; (8005130 <HAL_RCC_ClockConfig+0x2e8>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4912      	ldr	r1, [pc, #72]	; (8005130 <HAL_RCC_ClockConfig+0x2e8>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80050ea:	f000 f829 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80050ee:	4601      	mov	r1, r0
 80050f0:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <HAL_RCC_ClockConfig+0x2e8>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f8:	22f0      	movs	r2, #240	; 0xf0
 80050fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	fa92 f2a2 	rbit	r2, r2
 8005102:	60fa      	str	r2, [r7, #12]
  return result;
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	fab2 f282 	clz	r2, r2
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	40d3      	lsrs	r3, r2
 800510e:	4a09      	ldr	r2, [pc, #36]	; (8005134 <HAL_RCC_ClockConfig+0x2ec>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	fa21 f303 	lsr.w	r3, r1, r3
 8005116:	4a08      	ldr	r2, [pc, #32]	; (8005138 <HAL_RCC_ClockConfig+0x2f0>)
 8005118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800511a:	4b08      	ldr	r3, [pc, #32]	; (800513c <HAL_RCC_ClockConfig+0x2f4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f7fd f8c2 	bl	80022a8 <HAL_InitTick>
  
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3778      	adds	r7, #120	; 0x78
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40021000 	.word	0x40021000
 8005134:	0800ac6c 	.word	0x0800ac6c
 8005138:	20000054 	.word	0x20000054
 800513c:	20000058 	.word	0x20000058

08005140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	b08b      	sub	sp, #44	; 0x2c
 8005144:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	2300      	movs	r3, #0
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800515a:	4b29      	ldr	r3, [pc, #164]	; (8005200 <HAL_RCC_GetSysClockFreq+0xc0>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 030c 	and.w	r3, r3, #12
 8005166:	2b04      	cmp	r3, #4
 8005168:	d002      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x30>
 800516a:	2b08      	cmp	r3, #8
 800516c:	d003      	beq.n	8005176 <HAL_RCC_GetSysClockFreq+0x36>
 800516e:	e03c      	b.n	80051ea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005170:	4b24      	ldr	r3, [pc, #144]	; (8005204 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005172:	623b      	str	r3, [r7, #32]
      break;
 8005174:	e03c      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800517c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005180:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	fa92 f2a2 	rbit	r2, r2
 8005188:	607a      	str	r2, [r7, #4]
  return result;
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	fab2 f282 	clz	r2, r2
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	40d3      	lsrs	r3, r2
 8005194:	4a1c      	ldr	r2, [pc, #112]	; (8005208 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005196:	5cd3      	ldrb	r3, [r2, r3]
 8005198:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800519a:	4b19      	ldr	r3, [pc, #100]	; (8005200 <HAL_RCC_GetSysClockFreq+0xc0>)
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	220f      	movs	r2, #15
 80051a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	fa92 f2a2 	rbit	r2, r2
 80051ac:	60fa      	str	r2, [r7, #12]
  return result;
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	fab2 f282 	clz	r2, r2
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	40d3      	lsrs	r3, r2
 80051b8:	4a14      	ldr	r2, [pc, #80]	; (800520c <HAL_RCC_GetSysClockFreq+0xcc>)
 80051ba:	5cd3      	ldrb	r3, [r2, r3]
 80051bc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80051c8:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
 80051d8:	e004      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	4a0c      	ldr	r2, [pc, #48]	; (8005210 <HAL_RCC_GetSysClockFreq+0xd0>)
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	623b      	str	r3, [r7, #32]
      break;
 80051e8:	e002      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80051ec:	623b      	str	r3, [r7, #32]
      break;
 80051ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051f0:	6a3b      	ldr	r3, [r7, #32]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	372c      	adds	r7, #44	; 0x2c
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40021000 	.word	0x40021000
 8005204:	007a1200 	.word	0x007a1200
 8005208:	0800ac84 	.word	0x0800ac84
 800520c:	0800ac94 	.word	0x0800ac94
 8005210:	003d0900 	.word	0x003d0900

08005214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005218:	4b03      	ldr	r3, [pc, #12]	; (8005228 <HAL_RCC_GetHCLKFreq+0x14>)
 800521a:	681b      	ldr	r3, [r3, #0]
}
 800521c:	4618      	mov	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	20000054 	.word	0x20000054

0800522c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005232:	f7ff ffef 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 8005236:	4601      	mov	r1, r0
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005240:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005244:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	fa92 f2a2 	rbit	r2, r2
 800524c:	603a      	str	r2, [r7, #0]
  return result;
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	fab2 f282 	clz	r2, r2
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	40d3      	lsrs	r3, r2
 8005258:	4a04      	ldr	r2, [pc, #16]	; (800526c <HAL_RCC_GetPCLK1Freq+0x40>)
 800525a:	5cd3      	ldrb	r3, [r2, r3]
 800525c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40021000 	.word	0x40021000
 800526c:	0800ac7c 	.word	0x0800ac7c

08005270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005276:	f7ff ffcd 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 800527a:	4601      	mov	r1, r0
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005284:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005288:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	fa92 f2a2 	rbit	r2, r2
 8005290:	603a      	str	r2, [r7, #0]
  return result;
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	fab2 f282 	clz	r2, r2
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	40d3      	lsrs	r3, r2
 800529c:	4a04      	ldr	r2, [pc, #16]	; (80052b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800529e:	5cd3      	ldrb	r3, [r2, r3]
 80052a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40021000 	.word	0x40021000
 80052b0:	0800ac7c 	.word	0x0800ac7c

080052b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b092      	sub	sp, #72	; 0x48
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80d4 	beq.w	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d8:	4b4e      	ldr	r3, [pc, #312]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10e      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e4:	4b4b      	ldr	r3, [pc, #300]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	4a4a      	ldr	r2, [pc, #296]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ee:	61d3      	str	r3, [r2, #28]
 80052f0:	4b48      	ldr	r3, [pc, #288]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005302:	4b45      	ldr	r3, [pc, #276]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d118      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800530e:	4b42      	ldr	r3, [pc, #264]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a41      	ldr	r2, [pc, #260]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800531a:	f7fd f809 	bl	8002330 <HAL_GetTick>
 800531e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005320:	e008      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005322:	f7fd f805 	bl	8002330 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b64      	cmp	r3, #100	; 0x64
 800532e:	d901      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e169      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005334:	4b38      	ldr	r3, [pc, #224]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005340:	4b34      	ldr	r3, [pc, #208]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8084 	beq.w	800545a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800535c:	429a      	cmp	r2, r3
 800535e:	d07c      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005360:	4b2c      	ldr	r3, [pc, #176]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800536a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800536e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	fa93 f3a3 	rbit	r3, r3
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800537a:	fab3 f383 	clz	r3, r3
 800537e:	b2db      	uxtb	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	4b26      	ldr	r3, [pc, #152]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	461a      	mov	r2, r3
 800538a:	2301      	movs	r3, #1
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	fa93 f3a3 	rbit	r3, r3
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800539c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800539e:	fab3 f383 	clz	r3, r3
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	4b1d      	ldr	r3, [pc, #116]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	461a      	mov	r2, r3
 80053ae:	2300      	movs	r3, #0
 80053b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053b2:	4a18      	ldr	r2, [pc, #96]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d04b      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c2:	f7fc ffb5 	bl	8002330 <HAL_GetTick>
 80053c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c8:	e00a      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ca:	f7fc ffb1 	bl	8002330 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d8:	4293      	cmp	r3, r2
 80053da:	d901      	bls.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e113      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80053e0:	2302      	movs	r3, #2
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	fa93 f3a3 	rbit	r3, r3
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
 80053ec:	2302      	movs	r3, #2
 80053ee:	623b      	str	r3, [r7, #32]
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	fa93 f3a3 	rbit	r3, r3
 80053f6:	61fb      	str	r3, [r7, #28]
  return result;
 80053f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fa:	fab3 f383 	clz	r3, r3
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d108      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800540e:	4b01      	ldr	r3, [pc, #4]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	e00d      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005414:	40021000 	.word	0x40021000
 8005418:	40007000 	.word	0x40007000
 800541c:	10908100 	.word	0x10908100
 8005420:	2302      	movs	r3, #2
 8005422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	fa93 f3a3 	rbit	r3, r3
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	4b78      	ldr	r3, [pc, #480]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	2202      	movs	r2, #2
 8005432:	613a      	str	r2, [r7, #16]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	fa92 f2a2 	rbit	r2, r2
 800543a:	60fa      	str	r2, [r7, #12]
  return result;
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	fab2 f282 	clz	r2, r2
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	f002 021f 	and.w	r2, r2, #31
 800544e:	2101      	movs	r1, #1
 8005450:	fa01 f202 	lsl.w	r2, r1, r2
 8005454:	4013      	ands	r3, r2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0b7      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800545a:	4b6d      	ldr	r3, [pc, #436]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	496a      	ldr	r1, [pc, #424]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005468:	4313      	orrs	r3, r2
 800546a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800546c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005470:	2b01      	cmp	r3, #1
 8005472:	d105      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005474:	4b66      	ldr	r3, [pc, #408]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	4a65      	ldr	r2, [pc, #404]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800547a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800548c:	4b60      	ldr	r3, [pc, #384]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	f023 0203 	bic.w	r2, r3, #3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	495d      	ldr	r1, [pc, #372]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800549a:	4313      	orrs	r3, r2
 800549c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054aa:	4b59      	ldr	r3, [pc, #356]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	4956      	ldr	r1, [pc, #344]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054c8:	4b51      	ldr	r3, [pc, #324]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	494e      	ldr	r1, [pc, #312]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d008      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054e6:	4b4a      	ldr	r3, [pc, #296]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	f023 0210 	bic.w	r2, r3, #16
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4947      	ldr	r1, [pc, #284]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005504:	4b42      	ldr	r3, [pc, #264]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	493f      	ldr	r1, [pc, #252]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d008      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005522:	4b3b      	ldr	r3, [pc, #236]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	f023 0220 	bic.w	r2, r3, #32
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	4938      	ldr	r1, [pc, #224]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005530:	4313      	orrs	r3, r2
 8005532:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005540:	4b33      	ldr	r3, [pc, #204]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	4930      	ldr	r1, [pc, #192]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800554e:	4313      	orrs	r3, r2
 8005550:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	2b00      	cmp	r3, #0
 800555c:	d008      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800555e:	4b2c      	ldr	r3, [pc, #176]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	4929      	ldr	r1, [pc, #164]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800556c:	4313      	orrs	r3, r2
 800556e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800557c:	4b24      	ldr	r3, [pc, #144]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	4921      	ldr	r1, [pc, #132]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800558a:	4313      	orrs	r3, r2
 800558c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800559a:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	491a      	ldr	r1, [pc, #104]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c4:	4912      	ldr	r1, [pc, #72]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	490b      	ldr	r1, [pc, #44]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005600:	4903      	ldr	r1, [pc, #12]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005602:	4313      	orrs	r3, r2
 8005604:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3748      	adds	r7, #72	; 0x48
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40021000 	.word	0x40021000

08005614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e040      	b.n	80056a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7fc fbc6 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2224      	movs	r2, #36	; 0x24
 8005640:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 faf0 	bl	8005c38 <UART_SetConfig>
 8005658:	4603      	mov	r3, r0
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e022      	b.n	80056a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fcb8 	bl	8005fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800567e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800568e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fd3f 	bl	8006124 <UART_CheckIdleState>
 80056a6:	4603      	mov	r3, r0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d145      	bne.n	8005752 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_UART_Transmit_IT+0x22>
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e03e      	b.n	8005754 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_UART_Transmit_IT+0x34>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e037      	b.n	8005754 <HAL_UART_Transmit_IT+0xa4>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	88fa      	ldrh	r2, [r7, #6]
 80056f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2221      	movs	r2, #33	; 0x21
 8005714:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571e:	d107      	bne.n	8005730 <HAL_UART_Transmit_IT+0x80>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d103      	bne.n	8005730 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4a0d      	ldr	r2, [pc, #52]	; (8005760 <HAL_UART_Transmit_IT+0xb0>)
 800572c:	669a      	str	r2, [r3, #104]	; 0x68
 800572e:	e002      	b.n	8005736 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a0c      	ldr	r2, [pc, #48]	; (8005764 <HAL_UART_Transmit_IT+0xb4>)
 8005734:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800574c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	e000      	b.n	8005754 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8005752:	2302      	movs	r3, #2
  }
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	0800649b 	.word	0x0800649b
 8005764:	08006427 	.word	0x08006427

08005768 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800577a:	2b20      	cmp	r3, #32
 800577c:	d12c      	bne.n	80057d8 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_UART_Receive_IT+0x22>
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e025      	b.n	80057da <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_UART_Receive_IT+0x34>
 8005798:	2302      	movs	r3, #2
 800579a:	e01e      	b.n	80057da <HAL_UART_Receive_IT+0x72>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80057c6:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	461a      	mov	r2, r3
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fd6e 	bl	80062b0 <UART_Start_Receive_IT>
 80057d4:	4603      	mov	r3, r0
 80057d6:	e000      	b.n	80057da <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80057d8:	2302      	movs	r3, #2
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	f640 030f 	movw	r3, #2063	; 0x80f
 800580a:	4013      	ands	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d113      	bne.n	800583c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00e      	beq.n	800583c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 81cc 	beq.w	8005bca <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
      }
      return;
 800583a:	e1c6      	b.n	8005bca <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80e3 	beq.w	8005a0a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d105      	bne.n	800585a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4ba5      	ldr	r3, [pc, #660]	; (8005ae8 <HAL_UART_IRQHandler+0x304>)
 8005852:	4013      	ands	r3, r2
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80d8 	beq.w	8005a0a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d010      	beq.n	8005886 <HAL_UART_IRQHandler+0xa2>
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2201      	movs	r2, #1
 8005874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800587c:	f043 0201 	orr.w	r2, r3, #1
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d010      	beq.n	80058b2 <HAL_UART_IRQHandler+0xce>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2202      	movs	r2, #2
 80058a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a8:	f043 0204 	orr.w	r2, r3, #4
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d010      	beq.n	80058de <HAL_UART_IRQHandler+0xfa>
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2204      	movs	r2, #4
 80058cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058d4:	f043 0202 	orr.w	r2, r3, #2
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d015      	beq.n	8005914 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d104      	bne.n	80058fc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00b      	beq.n	8005914 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2208      	movs	r2, #8
 8005902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800590a:	f043 0208 	orr.w	r2, r3, #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800591a:	2b00      	cmp	r3, #0
 800591c:	d011      	beq.n	8005942 <HAL_UART_IRQHandler+0x15e>
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00c      	beq.n	8005942 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005930:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8140 	beq.w	8005bce <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00c      	beq.n	8005972 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005978:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d004      	beq.n	8005992 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800598e:	2b00      	cmp	r3, #0
 8005990:	d031      	beq.n	80059f6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fd02 	bl	800639c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	d123      	bne.n	80059ee <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d013      	beq.n	80059e6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c2:	4a4a      	ldr	r2, [pc, #296]	; (8005aec <HAL_UART_IRQHandler+0x308>)
 80059c4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe f89c 	bl	8003b08 <HAL_DMA_Abort_IT>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d017      	beq.n	8005a06 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80059e0:	4610      	mov	r0, r2
 80059e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e4:	e00f      	b.n	8005a06 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f910 	bl	8005c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ec:	e00b      	b.n	8005a06 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f90c 	bl	8005c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f4:	e007      	b.n	8005a06 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f908 	bl	8005c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005a04:	e0e3      	b.n	8005bce <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a06:	bf00      	nop
    return;
 8005a08:	e0e1      	b.n	8005bce <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	f040 80a7 	bne.w	8005b62 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80a1 	beq.w	8005b62 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 809b 	beq.w	8005b62 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2210      	movs	r2, #16
 8005a32:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b40      	cmp	r3, #64	; 0x40
 8005a40:	d156      	bne.n	8005af0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005a4c:	893b      	ldrh	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80bf 	beq.w	8005bd2 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a5a:	893a      	ldrh	r2, [r7, #8]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	f080 80b8 	bcs.w	8005bd2 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	893a      	ldrh	r2, [r7, #8]
 8005a66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d02a      	beq.n	8005aca <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a82:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0201 	bic.w	r2, r2, #1
 8005a92:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0210 	bic.w	r2, r2, #16
 8005abe:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fd ffe6 	bl	8003a96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f89e 	bl	8005c20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ae4:	e075      	b.n	8005bd2 <HAL_UART_IRQHandler+0x3ee>
 8005ae6:	bf00      	nop
 8005ae8:	04000120 	.word	0x04000120
 8005aec:	080063fb 	.word	0x080063fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d063      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8005b0e:	897b      	ldrh	r3, [r7, #10]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d060      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b22:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0201 	bic.w	r2, r2, #1
 8005b32:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0210 	bic.w	r2, r2, #16
 8005b54:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b56:	897b      	ldrh	r3, [r7, #10]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f860 	bl	8005c20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b60:	e039      	b.n	8005bd6 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00d      	beq.n	8005b88 <HAL_UART_IRQHandler+0x3a4>
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d008      	beq.n	8005b88 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fdb5 	bl	80066f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b86:	e029      	b.n	8005bdc <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00d      	beq.n	8005bae <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01a      	beq.n	8005bda <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	4798      	blx	r3
    }
    return;
 8005bac:	e015      	b.n	8005bda <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d011      	beq.n	8005bdc <HAL_UART_IRQHandler+0x3f8>
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00c      	beq.n	8005bdc <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fca7 	bl	8006516 <UART_EndTransmit_IT>
    return;
 8005bc8:	e008      	b.n	8005bdc <HAL_UART_IRQHandler+0x3f8>
      return;
 8005bca:	bf00      	nop
 8005bcc:	e006      	b.n	8005bdc <HAL_UART_IRQHandler+0x3f8>
    return;
 8005bce:	bf00      	nop
 8005bd0:	e004      	b.n	8005bdc <HAL_UART_IRQHandler+0x3f8>
      return;
 8005bd2:	bf00      	nop
 8005bd4:	e002      	b.n	8005bdc <HAL_UART_IRQHandler+0x3f8>
      return;
 8005bd6:	bf00      	nop
 8005bd8:	e000      	b.n	8005bdc <HAL_UART_IRQHandler+0x3f8>
    return;
 8005bda:	bf00      	nop
  }

}
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop

08005be4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c66:	f023 030c 	bic.w	r3, r3, #12
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	6979      	ldr	r1, [r7, #20]
 8005c70:	430b      	orrs	r3, r1
 8005c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4aae      	ldr	r2, [pc, #696]	; (8005f6c <UART_SetConfig+0x334>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d120      	bne.n	8005cfa <UART_SetConfig+0xc2>
 8005cb8:	4bad      	ldr	r3, [pc, #692]	; (8005f70 <UART_SetConfig+0x338>)
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d817      	bhi.n	8005cf4 <UART_SetConfig+0xbc>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <UART_SetConfig+0x94>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005ce9 	.word	0x08005ce9
 8005cd4:	08005cef 	.word	0x08005cef
 8005cd8:	08005ce3 	.word	0x08005ce3
 8005cdc:	2301      	movs	r3, #1
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e0b5      	b.n	8005e4e <UART_SetConfig+0x216>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	77fb      	strb	r3, [r7, #31]
 8005ce6:	e0b2      	b.n	8005e4e <UART_SetConfig+0x216>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e0af      	b.n	8005e4e <UART_SetConfig+0x216>
 8005cee:	2308      	movs	r3, #8
 8005cf0:	77fb      	strb	r3, [r7, #31]
 8005cf2:	e0ac      	b.n	8005e4e <UART_SetConfig+0x216>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e0a9      	b.n	8005e4e <UART_SetConfig+0x216>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a9d      	ldr	r2, [pc, #628]	; (8005f74 <UART_SetConfig+0x33c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d124      	bne.n	8005d4e <UART_SetConfig+0x116>
 8005d04:	4b9a      	ldr	r3, [pc, #616]	; (8005f70 <UART_SetConfig+0x338>)
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d10:	d011      	beq.n	8005d36 <UART_SetConfig+0xfe>
 8005d12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d16:	d817      	bhi.n	8005d48 <UART_SetConfig+0x110>
 8005d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d1c:	d011      	beq.n	8005d42 <UART_SetConfig+0x10a>
 8005d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d22:	d811      	bhi.n	8005d48 <UART_SetConfig+0x110>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <UART_SetConfig+0xf8>
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2c:	d006      	beq.n	8005d3c <UART_SetConfig+0x104>
 8005d2e:	e00b      	b.n	8005d48 <UART_SetConfig+0x110>
 8005d30:	2300      	movs	r3, #0
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e08b      	b.n	8005e4e <UART_SetConfig+0x216>
 8005d36:	2302      	movs	r3, #2
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e088      	b.n	8005e4e <UART_SetConfig+0x216>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e085      	b.n	8005e4e <UART_SetConfig+0x216>
 8005d42:	2308      	movs	r3, #8
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	e082      	b.n	8005e4e <UART_SetConfig+0x216>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e07f      	b.n	8005e4e <UART_SetConfig+0x216>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a89      	ldr	r2, [pc, #548]	; (8005f78 <UART_SetConfig+0x340>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d124      	bne.n	8005da2 <UART_SetConfig+0x16a>
 8005d58:	4b85      	ldr	r3, [pc, #532]	; (8005f70 <UART_SetConfig+0x338>)
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005d60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d64:	d011      	beq.n	8005d8a <UART_SetConfig+0x152>
 8005d66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d6a:	d817      	bhi.n	8005d9c <UART_SetConfig+0x164>
 8005d6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d70:	d011      	beq.n	8005d96 <UART_SetConfig+0x15e>
 8005d72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d76:	d811      	bhi.n	8005d9c <UART_SetConfig+0x164>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <UART_SetConfig+0x14c>
 8005d7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d80:	d006      	beq.n	8005d90 <UART_SetConfig+0x158>
 8005d82:	e00b      	b.n	8005d9c <UART_SetConfig+0x164>
 8005d84:	2300      	movs	r3, #0
 8005d86:	77fb      	strb	r3, [r7, #31]
 8005d88:	e061      	b.n	8005e4e <UART_SetConfig+0x216>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	77fb      	strb	r3, [r7, #31]
 8005d8e:	e05e      	b.n	8005e4e <UART_SetConfig+0x216>
 8005d90:	2304      	movs	r3, #4
 8005d92:	77fb      	strb	r3, [r7, #31]
 8005d94:	e05b      	b.n	8005e4e <UART_SetConfig+0x216>
 8005d96:	2308      	movs	r3, #8
 8005d98:	77fb      	strb	r3, [r7, #31]
 8005d9a:	e058      	b.n	8005e4e <UART_SetConfig+0x216>
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e055      	b.n	8005e4e <UART_SetConfig+0x216>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a75      	ldr	r2, [pc, #468]	; (8005f7c <UART_SetConfig+0x344>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d124      	bne.n	8005df6 <UART_SetConfig+0x1be>
 8005dac:	4b70      	ldr	r3, [pc, #448]	; (8005f70 <UART_SetConfig+0x338>)
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005db4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005db8:	d011      	beq.n	8005dde <UART_SetConfig+0x1a6>
 8005dba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dbe:	d817      	bhi.n	8005df0 <UART_SetConfig+0x1b8>
 8005dc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dc4:	d011      	beq.n	8005dea <UART_SetConfig+0x1b2>
 8005dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dca:	d811      	bhi.n	8005df0 <UART_SetConfig+0x1b8>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <UART_SetConfig+0x1a0>
 8005dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd4:	d006      	beq.n	8005de4 <UART_SetConfig+0x1ac>
 8005dd6:	e00b      	b.n	8005df0 <UART_SetConfig+0x1b8>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e037      	b.n	8005e4e <UART_SetConfig+0x216>
 8005dde:	2302      	movs	r3, #2
 8005de0:	77fb      	strb	r3, [r7, #31]
 8005de2:	e034      	b.n	8005e4e <UART_SetConfig+0x216>
 8005de4:	2304      	movs	r3, #4
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e031      	b.n	8005e4e <UART_SetConfig+0x216>
 8005dea:	2308      	movs	r3, #8
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	e02e      	b.n	8005e4e <UART_SetConfig+0x216>
 8005df0:	2310      	movs	r3, #16
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e02b      	b.n	8005e4e <UART_SetConfig+0x216>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a61      	ldr	r2, [pc, #388]	; (8005f80 <UART_SetConfig+0x348>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d124      	bne.n	8005e4a <UART_SetConfig+0x212>
 8005e00:	4b5b      	ldr	r3, [pc, #364]	; (8005f70 <UART_SetConfig+0x338>)
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005e08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e0c:	d011      	beq.n	8005e32 <UART_SetConfig+0x1fa>
 8005e0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e12:	d817      	bhi.n	8005e44 <UART_SetConfig+0x20c>
 8005e14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e18:	d011      	beq.n	8005e3e <UART_SetConfig+0x206>
 8005e1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e1e:	d811      	bhi.n	8005e44 <UART_SetConfig+0x20c>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <UART_SetConfig+0x1f4>
 8005e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e28:	d006      	beq.n	8005e38 <UART_SetConfig+0x200>
 8005e2a:	e00b      	b.n	8005e44 <UART_SetConfig+0x20c>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	77fb      	strb	r3, [r7, #31]
 8005e30:	e00d      	b.n	8005e4e <UART_SetConfig+0x216>
 8005e32:	2302      	movs	r3, #2
 8005e34:	77fb      	strb	r3, [r7, #31]
 8005e36:	e00a      	b.n	8005e4e <UART_SetConfig+0x216>
 8005e38:	2304      	movs	r3, #4
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e007      	b.n	8005e4e <UART_SetConfig+0x216>
 8005e3e:	2308      	movs	r3, #8
 8005e40:	77fb      	strb	r3, [r7, #31]
 8005e42:	e004      	b.n	8005e4e <UART_SetConfig+0x216>
 8005e44:	2310      	movs	r3, #16
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e001      	b.n	8005e4e <UART_SetConfig+0x216>
 8005e4a:	2310      	movs	r3, #16
 8005e4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e56:	d15c      	bne.n	8005f12 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8005e58:	7ffb      	ldrb	r3, [r7, #31]
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d827      	bhi.n	8005eae <UART_SetConfig+0x276>
 8005e5e:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <UART_SetConfig+0x22c>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005e89 	.word	0x08005e89
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005e99 	.word	0x08005e99
 8005e70:	08005eaf 	.word	0x08005eaf
 8005e74:	08005e9f 	.word	0x08005e9f
 8005e78:	08005eaf 	.word	0x08005eaf
 8005e7c:	08005eaf 	.word	0x08005eaf
 8005e80:	08005eaf 	.word	0x08005eaf
 8005e84:	08005ea7 	.word	0x08005ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e88:	f7ff f9d0 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8005e8c:	61b8      	str	r0, [r7, #24]
        break;
 8005e8e:	e013      	b.n	8005eb8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e90:	f7ff f9ee 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 8005e94:	61b8      	str	r0, [r7, #24]
        break;
 8005e96:	e00f      	b.n	8005eb8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e98:	4b3a      	ldr	r3, [pc, #232]	; (8005f84 <UART_SetConfig+0x34c>)
 8005e9a:	61bb      	str	r3, [r7, #24]
        break;
 8005e9c:	e00c      	b.n	8005eb8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e9e:	f7ff f94f 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8005ea2:	61b8      	str	r0, [r7, #24]
        break;
 8005ea4:	e008      	b.n	8005eb8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eaa:	61bb      	str	r3, [r7, #24]
        break;
 8005eac:	e004      	b.n	8005eb8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	77bb      	strb	r3, [r7, #30]
        break;
 8005eb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 8085 	beq.w	8005fca <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	005a      	lsls	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	441a      	add	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b0f      	cmp	r3, #15
 8005edc:	d916      	bls.n	8005f0c <UART_SetConfig+0x2d4>
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee4:	d212      	bcs.n	8005f0c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f023 030f 	bic.w	r3, r3, #15
 8005eee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	085b      	lsrs	r3, r3, #1
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	89fb      	ldrh	r3, [r7, #14]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	89fa      	ldrh	r2, [r7, #14]
 8005f08:	60da      	str	r2, [r3, #12]
 8005f0a:	e05e      	b.n	8005fca <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	77bb      	strb	r3, [r7, #30]
 8005f10:	e05b      	b.n	8005fca <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f12:	7ffb      	ldrb	r3, [r7, #31]
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d837      	bhi.n	8005f88 <UART_SetConfig+0x350>
 8005f18:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <UART_SetConfig+0x2e8>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f4d 	.word	0x08005f4d
 8005f28:	08005f55 	.word	0x08005f55
 8005f2c:	08005f89 	.word	0x08005f89
 8005f30:	08005f5b 	.word	0x08005f5b
 8005f34:	08005f89 	.word	0x08005f89
 8005f38:	08005f89 	.word	0x08005f89
 8005f3c:	08005f89 	.word	0x08005f89
 8005f40:	08005f63 	.word	0x08005f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f44:	f7ff f972 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8005f48:	61b8      	str	r0, [r7, #24]
        break;
 8005f4a:	e022      	b.n	8005f92 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f4c:	f7ff f990 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 8005f50:	61b8      	str	r0, [r7, #24]
        break;
 8005f52:	e01e      	b.n	8005f92 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f54:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <UART_SetConfig+0x34c>)
 8005f56:	61bb      	str	r3, [r7, #24]
        break;
 8005f58:	e01b      	b.n	8005f92 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5a:	f7ff f8f1 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8005f5e:	61b8      	str	r0, [r7, #24]
        break;
 8005f60:	e017      	b.n	8005f92 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f66:	61bb      	str	r3, [r7, #24]
        break;
 8005f68:	e013      	b.n	8005f92 <UART_SetConfig+0x35a>
 8005f6a:	bf00      	nop
 8005f6c:	40013800 	.word	0x40013800
 8005f70:	40021000 	.word	0x40021000
 8005f74:	40004400 	.word	0x40004400
 8005f78:	40004800 	.word	0x40004800
 8005f7c:	40004c00 	.word	0x40004c00
 8005f80:	40005000 	.word	0x40005000
 8005f84:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	77bb      	strb	r3, [r7, #30]
        break;
 8005f90:	bf00      	nop
    }

    if (pclk != 0U)
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d018      	beq.n	8005fca <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	085a      	lsrs	r2, r3, #1
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	441a      	add	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b0f      	cmp	r3, #15
 8005fb2:	d908      	bls.n	8005fc6 <UART_SetConfig+0x38e>
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fba:	d204      	bcs.n	8005fc6 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	60da      	str	r2, [r3, #12]
 8005fc4:	e001      	b.n	8005fca <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005fd6:	7fbb      	ldrb	r3, [r7, #30]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3720      	adds	r7, #32
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01a      	beq.n	80060f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060de:	d10a      	bne.n	80060f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	605a      	str	r2, [r3, #4]
  }
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af02      	add	r7, sp, #8
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006134:	f7fc f8fc 	bl	8002330 <HAL_GetTick>
 8006138:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b08      	cmp	r3, #8
 8006146:	d10e      	bne.n	8006166 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f82d 	bl	80061b6 <UART_WaitOnFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e023      	b.n	80061ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b04      	cmp	r3, #4
 8006172:	d10e      	bne.n	8006192 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f817 	bl	80061b6 <UART_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e00d      	b.n	80061ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	603b      	str	r3, [r7, #0]
 80061c2:	4613      	mov	r3, r2
 80061c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c6:	e05e      	b.n	8006286 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d05a      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d0:	f7fc f8ae 	bl	8002330 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d302      	bcc.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d11b      	bne.n	800621e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2220      	movs	r2, #32
 800620a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e043      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b00      	cmp	r3, #0
 800622a:	d02c      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800623a:	d124      	bne.n	8006286 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006244:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006254:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2220      	movs	r2, #32
 8006270:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e00f      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69da      	ldr	r2, [r3, #28]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4013      	ands	r3, r2
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d091      	beq.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	88fa      	ldrh	r2, [r7, #6]
 80062c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	88fa      	ldrh	r2, [r7, #6]
 80062d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e2:	d10e      	bne.n	8006302 <UART_Start_Receive_IT+0x52>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d105      	bne.n	80062f8 <UART_Start_Receive_IT+0x48>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80062f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062f6:	e01a      	b.n	800632e <UART_Start_Receive_IT+0x7e>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	22ff      	movs	r2, #255	; 0xff
 80062fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006300:	e015      	b.n	800632e <UART_Start_Receive_IT+0x7e>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10d      	bne.n	8006326 <UART_Start_Receive_IT+0x76>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d104      	bne.n	800631c <UART_Start_Receive_IT+0x6c>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	22ff      	movs	r2, #255	; 0xff
 8006316:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800631a:	e008      	b.n	800632e <UART_Start_Receive_IT+0x7e>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	227f      	movs	r2, #127	; 0x7f
 8006320:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006324:	e003      	b.n	800632e <UART_Start_Receive_IT+0x7e>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2222      	movs	r2, #34	; 0x22
 800633a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689a      	ldr	r2, [r3, #8]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006354:	d107      	bne.n	8006366 <UART_Start_Receive_IT+0xb6>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d103      	bne.n	8006366 <UART_Start_Receive_IT+0xb6>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a0c      	ldr	r2, [pc, #48]	; (8006394 <UART_Start_Receive_IT+0xe4>)
 8006362:	665a      	str	r2, [r3, #100]	; 0x64
 8006364:	e002      	b.n	800636c <UART_Start_Receive_IT+0xbc>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4a0b      	ldr	r2, [pc, #44]	; (8006398 <UART_Start_Receive_IT+0xe8>)
 800636a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006382:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	0800661d 	.word	0x0800661d
 8006398:	08006549 	.word	0x08006549

0800639c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0201 	bic.w	r2, r2, #1
 80063c2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d107      	bne.n	80063dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 0210 	bic.w	r2, r2, #16
 80063da:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7ff fbf7 	bl	8005c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800641e:	bf00      	nop
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006432:	2b21      	cmp	r3, #33	; 0x21
 8006434:	d12b      	bne.n	800648e <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d110      	bne.n	8006464 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006450:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006460:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006462:	e014      	b.n	800648e <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	b292      	uxth	r2, r2
 8006470:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064a6:	2b21      	cmp	r3, #33	; 0x21
 80064a8:	d12f      	bne.n	800650a <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d110      	bne.n	80064d8 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064c4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80064d6:	e018      	b.n	800650a <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	881a      	ldrh	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064ea:	b292      	uxth	r2, r2
 80064ec:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f2:	1c9a      	adds	r2, r3, #2
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800652c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff fb52 	bl	8005be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006556:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800655c:	2b22      	cmp	r3, #34	; 0x22
 800655e:	d151      	bne.n	8006604 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006566:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006568:	89bb      	ldrh	r3, [r7, #12]
 800656a:	b2d9      	uxtb	r1, r3
 800656c:	89fb      	ldrh	r3, [r7, #14]
 800656e:	b2da      	uxtb	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006574:	400a      	ands	r2, r1
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800659c:	b29b      	uxth	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d138      	bne.n	8006614 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065b0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0201 	bic.w	r2, r2, #1
 80065c0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10f      	bne.n	80065f6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0210 	bic.w	r2, r2, #16
 80065e4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff fb16 	bl	8005c20 <HAL_UARTEx_RxEventCallback>
 80065f4:	e002      	b.n	80065fc <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff fafe 	bl	8005bf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006602:	e007      	b.n	8006614 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699a      	ldr	r2, [r3, #24]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0208 	orr.w	r2, r2, #8
 8006612:	619a      	str	r2, [r3, #24]
}
 8006614:	bf00      	nop
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800662a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006630:	2b22      	cmp	r3, #34	; 0x22
 8006632:	d151      	bne.n	80066d8 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800663a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006640:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006642:	89ba      	ldrh	r2, [r7, #12]
 8006644:	89fb      	ldrh	r3, [r7, #14]
 8006646:	4013      	ands	r3, r2
 8006648:	b29a      	uxth	r2, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006652:	1c9a      	adds	r2, r3, #2
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d138      	bne.n	80066e8 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006684:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0201 	bic.w	r2, r2, #1
 8006694:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d10f      	bne.n	80066ca <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0210 	bic.w	r2, r2, #16
 80066b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff faac 	bl	8005c20 <HAL_UARTEx_RxEventCallback>
 80066c8:	e002      	b.n	80066d0 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fa94 	bl	8005bf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066d6:	e007      	b.n	80066e8 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0208 	orr.w	r2, r2, #8
 80066e6:	619a      	str	r2, [r3, #24]
}
 80066e8:	bf00      	nop
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <__errno>:
 8006704:	4b01      	ldr	r3, [pc, #4]	; (800670c <__errno+0x8>)
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	20000060 	.word	0x20000060

08006710 <__libc_init_array>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	4d0d      	ldr	r5, [pc, #52]	; (8006748 <__libc_init_array+0x38>)
 8006714:	4c0d      	ldr	r4, [pc, #52]	; (800674c <__libc_init_array+0x3c>)
 8006716:	1b64      	subs	r4, r4, r5
 8006718:	10a4      	asrs	r4, r4, #2
 800671a:	2600      	movs	r6, #0
 800671c:	42a6      	cmp	r6, r4
 800671e:	d109      	bne.n	8006734 <__libc_init_array+0x24>
 8006720:	4d0b      	ldr	r5, [pc, #44]	; (8006750 <__libc_init_array+0x40>)
 8006722:	4c0c      	ldr	r4, [pc, #48]	; (8006754 <__libc_init_array+0x44>)
 8006724:	f004 fa50 	bl	800abc8 <_init>
 8006728:	1b64      	subs	r4, r4, r5
 800672a:	10a4      	asrs	r4, r4, #2
 800672c:	2600      	movs	r6, #0
 800672e:	42a6      	cmp	r6, r4
 8006730:	d105      	bne.n	800673e <__libc_init_array+0x2e>
 8006732:	bd70      	pop	{r4, r5, r6, pc}
 8006734:	f855 3b04 	ldr.w	r3, [r5], #4
 8006738:	4798      	blx	r3
 800673a:	3601      	adds	r6, #1
 800673c:	e7ee      	b.n	800671c <__libc_init_array+0xc>
 800673e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006742:	4798      	blx	r3
 8006744:	3601      	adds	r6, #1
 8006746:	e7f2      	b.n	800672e <__libc_init_array+0x1e>
 8006748:	0800b154 	.word	0x0800b154
 800674c:	0800b154 	.word	0x0800b154
 8006750:	0800b154 	.word	0x0800b154
 8006754:	0800b158 	.word	0x0800b158

08006758 <memset>:
 8006758:	4402      	add	r2, r0
 800675a:	4603      	mov	r3, r0
 800675c:	4293      	cmp	r3, r2
 800675e:	d100      	bne.n	8006762 <memset+0xa>
 8006760:	4770      	bx	lr
 8006762:	f803 1b01 	strb.w	r1, [r3], #1
 8006766:	e7f9      	b.n	800675c <memset+0x4>

08006768 <__cvt>:
 8006768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800676c:	ec55 4b10 	vmov	r4, r5, d0
 8006770:	2d00      	cmp	r5, #0
 8006772:	460e      	mov	r6, r1
 8006774:	4619      	mov	r1, r3
 8006776:	462b      	mov	r3, r5
 8006778:	bfbb      	ittet	lt
 800677a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800677e:	461d      	movlt	r5, r3
 8006780:	2300      	movge	r3, #0
 8006782:	232d      	movlt	r3, #45	; 0x2d
 8006784:	700b      	strb	r3, [r1, #0]
 8006786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006788:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800678c:	4691      	mov	r9, r2
 800678e:	f023 0820 	bic.w	r8, r3, #32
 8006792:	bfbc      	itt	lt
 8006794:	4622      	movlt	r2, r4
 8006796:	4614      	movlt	r4, r2
 8006798:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800679c:	d005      	beq.n	80067aa <__cvt+0x42>
 800679e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067a2:	d100      	bne.n	80067a6 <__cvt+0x3e>
 80067a4:	3601      	adds	r6, #1
 80067a6:	2102      	movs	r1, #2
 80067a8:	e000      	b.n	80067ac <__cvt+0x44>
 80067aa:	2103      	movs	r1, #3
 80067ac:	ab03      	add	r3, sp, #12
 80067ae:	9301      	str	r3, [sp, #4]
 80067b0:	ab02      	add	r3, sp, #8
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	ec45 4b10 	vmov	d0, r4, r5
 80067b8:	4653      	mov	r3, sl
 80067ba:	4632      	mov	r2, r6
 80067bc:	f001 fbcc 	bl	8007f58 <_dtoa_r>
 80067c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067c4:	4607      	mov	r7, r0
 80067c6:	d102      	bne.n	80067ce <__cvt+0x66>
 80067c8:	f019 0f01 	tst.w	r9, #1
 80067cc:	d022      	beq.n	8006814 <__cvt+0xac>
 80067ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067d2:	eb07 0906 	add.w	r9, r7, r6
 80067d6:	d110      	bne.n	80067fa <__cvt+0x92>
 80067d8:	783b      	ldrb	r3, [r7, #0]
 80067da:	2b30      	cmp	r3, #48	; 0x30
 80067dc:	d10a      	bne.n	80067f4 <__cvt+0x8c>
 80067de:	2200      	movs	r2, #0
 80067e0:	2300      	movs	r3, #0
 80067e2:	4620      	mov	r0, r4
 80067e4:	4629      	mov	r1, r5
 80067e6:	f7fa f96f 	bl	8000ac8 <__aeabi_dcmpeq>
 80067ea:	b918      	cbnz	r0, 80067f4 <__cvt+0x8c>
 80067ec:	f1c6 0601 	rsb	r6, r6, #1
 80067f0:	f8ca 6000 	str.w	r6, [sl]
 80067f4:	f8da 3000 	ldr.w	r3, [sl]
 80067f8:	4499      	add	r9, r3
 80067fa:	2200      	movs	r2, #0
 80067fc:	2300      	movs	r3, #0
 80067fe:	4620      	mov	r0, r4
 8006800:	4629      	mov	r1, r5
 8006802:	f7fa f961 	bl	8000ac8 <__aeabi_dcmpeq>
 8006806:	b108      	cbz	r0, 800680c <__cvt+0xa4>
 8006808:	f8cd 900c 	str.w	r9, [sp, #12]
 800680c:	2230      	movs	r2, #48	; 0x30
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	454b      	cmp	r3, r9
 8006812:	d307      	bcc.n	8006824 <__cvt+0xbc>
 8006814:	9b03      	ldr	r3, [sp, #12]
 8006816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006818:	1bdb      	subs	r3, r3, r7
 800681a:	4638      	mov	r0, r7
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	b004      	add	sp, #16
 8006820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006824:	1c59      	adds	r1, r3, #1
 8006826:	9103      	str	r1, [sp, #12]
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e7f0      	b.n	800680e <__cvt+0xa6>

0800682c <__exponent>:
 800682c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800682e:	4603      	mov	r3, r0
 8006830:	2900      	cmp	r1, #0
 8006832:	bfb8      	it	lt
 8006834:	4249      	neglt	r1, r1
 8006836:	f803 2b02 	strb.w	r2, [r3], #2
 800683a:	bfb4      	ite	lt
 800683c:	222d      	movlt	r2, #45	; 0x2d
 800683e:	222b      	movge	r2, #43	; 0x2b
 8006840:	2909      	cmp	r1, #9
 8006842:	7042      	strb	r2, [r0, #1]
 8006844:	dd2a      	ble.n	800689c <__exponent+0x70>
 8006846:	f10d 0407 	add.w	r4, sp, #7
 800684a:	46a4      	mov	ip, r4
 800684c:	270a      	movs	r7, #10
 800684e:	46a6      	mov	lr, r4
 8006850:	460a      	mov	r2, r1
 8006852:	fb91 f6f7 	sdiv	r6, r1, r7
 8006856:	fb07 1516 	mls	r5, r7, r6, r1
 800685a:	3530      	adds	r5, #48	; 0x30
 800685c:	2a63      	cmp	r2, #99	; 0x63
 800685e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006862:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006866:	4631      	mov	r1, r6
 8006868:	dcf1      	bgt.n	800684e <__exponent+0x22>
 800686a:	3130      	adds	r1, #48	; 0x30
 800686c:	f1ae 0502 	sub.w	r5, lr, #2
 8006870:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006874:	1c44      	adds	r4, r0, #1
 8006876:	4629      	mov	r1, r5
 8006878:	4561      	cmp	r1, ip
 800687a:	d30a      	bcc.n	8006892 <__exponent+0x66>
 800687c:	f10d 0209 	add.w	r2, sp, #9
 8006880:	eba2 020e 	sub.w	r2, r2, lr
 8006884:	4565      	cmp	r5, ip
 8006886:	bf88      	it	hi
 8006888:	2200      	movhi	r2, #0
 800688a:	4413      	add	r3, r2
 800688c:	1a18      	subs	r0, r3, r0
 800688e:	b003      	add	sp, #12
 8006890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006896:	f804 2f01 	strb.w	r2, [r4, #1]!
 800689a:	e7ed      	b.n	8006878 <__exponent+0x4c>
 800689c:	2330      	movs	r3, #48	; 0x30
 800689e:	3130      	adds	r1, #48	; 0x30
 80068a0:	7083      	strb	r3, [r0, #2]
 80068a2:	70c1      	strb	r1, [r0, #3]
 80068a4:	1d03      	adds	r3, r0, #4
 80068a6:	e7f1      	b.n	800688c <__exponent+0x60>

080068a8 <_printf_float>:
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	ed2d 8b02 	vpush	{d8}
 80068b0:	b08d      	sub	sp, #52	; 0x34
 80068b2:	460c      	mov	r4, r1
 80068b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068b8:	4616      	mov	r6, r2
 80068ba:	461f      	mov	r7, r3
 80068bc:	4605      	mov	r5, r0
 80068be:	f002 fca7 	bl	8009210 <_localeconv_r>
 80068c2:	f8d0 a000 	ldr.w	sl, [r0]
 80068c6:	4650      	mov	r0, sl
 80068c8:	f7f9 fc82 	bl	80001d0 <strlen>
 80068cc:	2300      	movs	r3, #0
 80068ce:	930a      	str	r3, [sp, #40]	; 0x28
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	9305      	str	r3, [sp, #20]
 80068d4:	f8d8 3000 	ldr.w	r3, [r8]
 80068d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068dc:	3307      	adds	r3, #7
 80068de:	f023 0307 	bic.w	r3, r3, #7
 80068e2:	f103 0208 	add.w	r2, r3, #8
 80068e6:	f8c8 2000 	str.w	r2, [r8]
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068fa:	9307      	str	r3, [sp, #28]
 80068fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006900:	ee08 0a10 	vmov	s16, r0
 8006904:	4b9f      	ldr	r3, [pc, #636]	; (8006b84 <_printf_float+0x2dc>)
 8006906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800690a:	f04f 32ff 	mov.w	r2, #4294967295
 800690e:	f7fa f90d 	bl	8000b2c <__aeabi_dcmpun>
 8006912:	bb88      	cbnz	r0, 8006978 <_printf_float+0xd0>
 8006914:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006918:	4b9a      	ldr	r3, [pc, #616]	; (8006b84 <_printf_float+0x2dc>)
 800691a:	f04f 32ff 	mov.w	r2, #4294967295
 800691e:	f7fa f8e7 	bl	8000af0 <__aeabi_dcmple>
 8006922:	bb48      	cbnz	r0, 8006978 <_printf_float+0xd0>
 8006924:	2200      	movs	r2, #0
 8006926:	2300      	movs	r3, #0
 8006928:	4640      	mov	r0, r8
 800692a:	4649      	mov	r1, r9
 800692c:	f7fa f8d6 	bl	8000adc <__aeabi_dcmplt>
 8006930:	b110      	cbz	r0, 8006938 <_printf_float+0x90>
 8006932:	232d      	movs	r3, #45	; 0x2d
 8006934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006938:	4b93      	ldr	r3, [pc, #588]	; (8006b88 <_printf_float+0x2e0>)
 800693a:	4894      	ldr	r0, [pc, #592]	; (8006b8c <_printf_float+0x2e4>)
 800693c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006940:	bf94      	ite	ls
 8006942:	4698      	movls	r8, r3
 8006944:	4680      	movhi	r8, r0
 8006946:	2303      	movs	r3, #3
 8006948:	6123      	str	r3, [r4, #16]
 800694a:	9b05      	ldr	r3, [sp, #20]
 800694c:	f023 0204 	bic.w	r2, r3, #4
 8006950:	6022      	str	r2, [r4, #0]
 8006952:	f04f 0900 	mov.w	r9, #0
 8006956:	9700      	str	r7, [sp, #0]
 8006958:	4633      	mov	r3, r6
 800695a:	aa0b      	add	r2, sp, #44	; 0x2c
 800695c:	4621      	mov	r1, r4
 800695e:	4628      	mov	r0, r5
 8006960:	f000 f9d8 	bl	8006d14 <_printf_common>
 8006964:	3001      	adds	r0, #1
 8006966:	f040 8090 	bne.w	8006a8a <_printf_float+0x1e2>
 800696a:	f04f 30ff 	mov.w	r0, #4294967295
 800696e:	b00d      	add	sp, #52	; 0x34
 8006970:	ecbd 8b02 	vpop	{d8}
 8006974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006978:	4642      	mov	r2, r8
 800697a:	464b      	mov	r3, r9
 800697c:	4640      	mov	r0, r8
 800697e:	4649      	mov	r1, r9
 8006980:	f7fa f8d4 	bl	8000b2c <__aeabi_dcmpun>
 8006984:	b140      	cbz	r0, 8006998 <_printf_float+0xf0>
 8006986:	464b      	mov	r3, r9
 8006988:	2b00      	cmp	r3, #0
 800698a:	bfbc      	itt	lt
 800698c:	232d      	movlt	r3, #45	; 0x2d
 800698e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006992:	487f      	ldr	r0, [pc, #508]	; (8006b90 <_printf_float+0x2e8>)
 8006994:	4b7f      	ldr	r3, [pc, #508]	; (8006b94 <_printf_float+0x2ec>)
 8006996:	e7d1      	b.n	800693c <_printf_float+0x94>
 8006998:	6863      	ldr	r3, [r4, #4]
 800699a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800699e:	9206      	str	r2, [sp, #24]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	d13f      	bne.n	8006a24 <_printf_float+0x17c>
 80069a4:	2306      	movs	r3, #6
 80069a6:	6063      	str	r3, [r4, #4]
 80069a8:	9b05      	ldr	r3, [sp, #20]
 80069aa:	6861      	ldr	r1, [r4, #4]
 80069ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069b0:	2300      	movs	r3, #0
 80069b2:	9303      	str	r3, [sp, #12]
 80069b4:	ab0a      	add	r3, sp, #40	; 0x28
 80069b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069ba:	ab09      	add	r3, sp, #36	; 0x24
 80069bc:	ec49 8b10 	vmov	d0, r8, r9
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	6022      	str	r2, [r4, #0]
 80069c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069c8:	4628      	mov	r0, r5
 80069ca:	f7ff fecd 	bl	8006768 <__cvt>
 80069ce:	9b06      	ldr	r3, [sp, #24]
 80069d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069d2:	2b47      	cmp	r3, #71	; 0x47
 80069d4:	4680      	mov	r8, r0
 80069d6:	d108      	bne.n	80069ea <_printf_float+0x142>
 80069d8:	1cc8      	adds	r0, r1, #3
 80069da:	db02      	blt.n	80069e2 <_printf_float+0x13a>
 80069dc:	6863      	ldr	r3, [r4, #4]
 80069de:	4299      	cmp	r1, r3
 80069e0:	dd41      	ble.n	8006a66 <_printf_float+0x1be>
 80069e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80069e6:	fa5f fb8b 	uxtb.w	fp, fp
 80069ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069ee:	d820      	bhi.n	8006a32 <_printf_float+0x18a>
 80069f0:	3901      	subs	r1, #1
 80069f2:	465a      	mov	r2, fp
 80069f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069f8:	9109      	str	r1, [sp, #36]	; 0x24
 80069fa:	f7ff ff17 	bl	800682c <__exponent>
 80069fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a00:	1813      	adds	r3, r2, r0
 8006a02:	2a01      	cmp	r2, #1
 8006a04:	4681      	mov	r9, r0
 8006a06:	6123      	str	r3, [r4, #16]
 8006a08:	dc02      	bgt.n	8006a10 <_printf_float+0x168>
 8006a0a:	6822      	ldr	r2, [r4, #0]
 8006a0c:	07d2      	lsls	r2, r2, #31
 8006a0e:	d501      	bpl.n	8006a14 <_printf_float+0x16c>
 8006a10:	3301      	adds	r3, #1
 8006a12:	6123      	str	r3, [r4, #16]
 8006a14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d09c      	beq.n	8006956 <_printf_float+0xae>
 8006a1c:	232d      	movs	r3, #45	; 0x2d
 8006a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a22:	e798      	b.n	8006956 <_printf_float+0xae>
 8006a24:	9a06      	ldr	r2, [sp, #24]
 8006a26:	2a47      	cmp	r2, #71	; 0x47
 8006a28:	d1be      	bne.n	80069a8 <_printf_float+0x100>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1bc      	bne.n	80069a8 <_printf_float+0x100>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e7b9      	b.n	80069a6 <_printf_float+0xfe>
 8006a32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a36:	d118      	bne.n	8006a6a <_printf_float+0x1c2>
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	6863      	ldr	r3, [r4, #4]
 8006a3c:	dd0b      	ble.n	8006a56 <_printf_float+0x1ae>
 8006a3e:	6121      	str	r1, [r4, #16]
 8006a40:	b913      	cbnz	r3, 8006a48 <_printf_float+0x1a0>
 8006a42:	6822      	ldr	r2, [r4, #0]
 8006a44:	07d0      	lsls	r0, r2, #31
 8006a46:	d502      	bpl.n	8006a4e <_printf_float+0x1a6>
 8006a48:	3301      	adds	r3, #1
 8006a4a:	440b      	add	r3, r1
 8006a4c:	6123      	str	r3, [r4, #16]
 8006a4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a50:	f04f 0900 	mov.w	r9, #0
 8006a54:	e7de      	b.n	8006a14 <_printf_float+0x16c>
 8006a56:	b913      	cbnz	r3, 8006a5e <_printf_float+0x1b6>
 8006a58:	6822      	ldr	r2, [r4, #0]
 8006a5a:	07d2      	lsls	r2, r2, #31
 8006a5c:	d501      	bpl.n	8006a62 <_printf_float+0x1ba>
 8006a5e:	3302      	adds	r3, #2
 8006a60:	e7f4      	b.n	8006a4c <_printf_float+0x1a4>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e7f2      	b.n	8006a4c <_printf_float+0x1a4>
 8006a66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6c:	4299      	cmp	r1, r3
 8006a6e:	db05      	blt.n	8006a7c <_printf_float+0x1d4>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	6121      	str	r1, [r4, #16]
 8006a74:	07d8      	lsls	r0, r3, #31
 8006a76:	d5ea      	bpl.n	8006a4e <_printf_float+0x1a6>
 8006a78:	1c4b      	adds	r3, r1, #1
 8006a7a:	e7e7      	b.n	8006a4c <_printf_float+0x1a4>
 8006a7c:	2900      	cmp	r1, #0
 8006a7e:	bfd4      	ite	le
 8006a80:	f1c1 0202 	rsble	r2, r1, #2
 8006a84:	2201      	movgt	r2, #1
 8006a86:	4413      	add	r3, r2
 8006a88:	e7e0      	b.n	8006a4c <_printf_float+0x1a4>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	055a      	lsls	r2, r3, #21
 8006a8e:	d407      	bmi.n	8006aa0 <_printf_float+0x1f8>
 8006a90:	6923      	ldr	r3, [r4, #16]
 8006a92:	4642      	mov	r2, r8
 8006a94:	4631      	mov	r1, r6
 8006a96:	4628      	mov	r0, r5
 8006a98:	47b8      	blx	r7
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	d12c      	bne.n	8006af8 <_printf_float+0x250>
 8006a9e:	e764      	b.n	800696a <_printf_float+0xc2>
 8006aa0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006aa4:	f240 80e0 	bls.w	8006c68 <_printf_float+0x3c0>
 8006aa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006aac:	2200      	movs	r2, #0
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f7fa f80a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d034      	beq.n	8006b22 <_printf_float+0x27a>
 8006ab8:	4a37      	ldr	r2, [pc, #220]	; (8006b98 <_printf_float+0x2f0>)
 8006aba:	2301      	movs	r3, #1
 8006abc:	4631      	mov	r1, r6
 8006abe:	4628      	mov	r0, r5
 8006ac0:	47b8      	blx	r7
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	f43f af51 	beq.w	800696a <_printf_float+0xc2>
 8006ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006acc:	429a      	cmp	r2, r3
 8006ace:	db02      	blt.n	8006ad6 <_printf_float+0x22e>
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	07d8      	lsls	r0, r3, #31
 8006ad4:	d510      	bpl.n	8006af8 <_printf_float+0x250>
 8006ad6:	ee18 3a10 	vmov	r3, s16
 8006ada:	4652      	mov	r2, sl
 8006adc:	4631      	mov	r1, r6
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b8      	blx	r7
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	f43f af41 	beq.w	800696a <_printf_float+0xc2>
 8006ae8:	f04f 0800 	mov.w	r8, #0
 8006aec:	f104 091a 	add.w	r9, r4, #26
 8006af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af2:	3b01      	subs	r3, #1
 8006af4:	4543      	cmp	r3, r8
 8006af6:	dc09      	bgt.n	8006b0c <_printf_float+0x264>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	079b      	lsls	r3, r3, #30
 8006afc:	f100 8105 	bmi.w	8006d0a <_printf_float+0x462>
 8006b00:	68e0      	ldr	r0, [r4, #12]
 8006b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b04:	4298      	cmp	r0, r3
 8006b06:	bfb8      	it	lt
 8006b08:	4618      	movlt	r0, r3
 8006b0a:	e730      	b.n	800696e <_printf_float+0xc6>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	464a      	mov	r2, r9
 8006b10:	4631      	mov	r1, r6
 8006b12:	4628      	mov	r0, r5
 8006b14:	47b8      	blx	r7
 8006b16:	3001      	adds	r0, #1
 8006b18:	f43f af27 	beq.w	800696a <_printf_float+0xc2>
 8006b1c:	f108 0801 	add.w	r8, r8, #1
 8006b20:	e7e6      	b.n	8006af0 <_printf_float+0x248>
 8006b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	dc39      	bgt.n	8006b9c <_printf_float+0x2f4>
 8006b28:	4a1b      	ldr	r2, [pc, #108]	; (8006b98 <_printf_float+0x2f0>)
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4628      	mov	r0, r5
 8006b30:	47b8      	blx	r7
 8006b32:	3001      	adds	r0, #1
 8006b34:	f43f af19 	beq.w	800696a <_printf_float+0xc2>
 8006b38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	d102      	bne.n	8006b46 <_printf_float+0x29e>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	07d9      	lsls	r1, r3, #31
 8006b44:	d5d8      	bpl.n	8006af8 <_printf_float+0x250>
 8006b46:	ee18 3a10 	vmov	r3, s16
 8006b4a:	4652      	mov	r2, sl
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	4628      	mov	r0, r5
 8006b50:	47b8      	blx	r7
 8006b52:	3001      	adds	r0, #1
 8006b54:	f43f af09 	beq.w	800696a <_printf_float+0xc2>
 8006b58:	f04f 0900 	mov.w	r9, #0
 8006b5c:	f104 0a1a 	add.w	sl, r4, #26
 8006b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b62:	425b      	negs	r3, r3
 8006b64:	454b      	cmp	r3, r9
 8006b66:	dc01      	bgt.n	8006b6c <_printf_float+0x2c4>
 8006b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6a:	e792      	b.n	8006a92 <_printf_float+0x1ea>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	4652      	mov	r2, sl
 8006b70:	4631      	mov	r1, r6
 8006b72:	4628      	mov	r0, r5
 8006b74:	47b8      	blx	r7
 8006b76:	3001      	adds	r0, #1
 8006b78:	f43f aef7 	beq.w	800696a <_printf_float+0xc2>
 8006b7c:	f109 0901 	add.w	r9, r9, #1
 8006b80:	e7ee      	b.n	8006b60 <_printf_float+0x2b8>
 8006b82:	bf00      	nop
 8006b84:	7fefffff 	.word	0x7fefffff
 8006b88:	0800aca8 	.word	0x0800aca8
 8006b8c:	0800acac 	.word	0x0800acac
 8006b90:	0800acb4 	.word	0x0800acb4
 8006b94:	0800acb0 	.word	0x0800acb0
 8006b98:	0800acb8 	.word	0x0800acb8
 8006b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	bfa8      	it	ge
 8006ba4:	461a      	movge	r2, r3
 8006ba6:	2a00      	cmp	r2, #0
 8006ba8:	4691      	mov	r9, r2
 8006baa:	dc37      	bgt.n	8006c1c <_printf_float+0x374>
 8006bac:	f04f 0b00 	mov.w	fp, #0
 8006bb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bb4:	f104 021a 	add.w	r2, r4, #26
 8006bb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bba:	9305      	str	r3, [sp, #20]
 8006bbc:	eba3 0309 	sub.w	r3, r3, r9
 8006bc0:	455b      	cmp	r3, fp
 8006bc2:	dc33      	bgt.n	8006c2c <_printf_float+0x384>
 8006bc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	db3b      	blt.n	8006c44 <_printf_float+0x39c>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	07da      	lsls	r2, r3, #31
 8006bd0:	d438      	bmi.n	8006c44 <_printf_float+0x39c>
 8006bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bd4:	9b05      	ldr	r3, [sp, #20]
 8006bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	eba2 0901 	sub.w	r9, r2, r1
 8006bde:	4599      	cmp	r9, r3
 8006be0:	bfa8      	it	ge
 8006be2:	4699      	movge	r9, r3
 8006be4:	f1b9 0f00 	cmp.w	r9, #0
 8006be8:	dc35      	bgt.n	8006c56 <_printf_float+0x3ae>
 8006bea:	f04f 0800 	mov.w	r8, #0
 8006bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bf2:	f104 0a1a 	add.w	sl, r4, #26
 8006bf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	eba3 0309 	sub.w	r3, r3, r9
 8006c00:	4543      	cmp	r3, r8
 8006c02:	f77f af79 	ble.w	8006af8 <_printf_float+0x250>
 8006c06:	2301      	movs	r3, #1
 8006c08:	4652      	mov	r2, sl
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	47b8      	blx	r7
 8006c10:	3001      	adds	r0, #1
 8006c12:	f43f aeaa 	beq.w	800696a <_printf_float+0xc2>
 8006c16:	f108 0801 	add.w	r8, r8, #1
 8006c1a:	e7ec      	b.n	8006bf6 <_printf_float+0x34e>
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4642      	mov	r2, r8
 8006c22:	4628      	mov	r0, r5
 8006c24:	47b8      	blx	r7
 8006c26:	3001      	adds	r0, #1
 8006c28:	d1c0      	bne.n	8006bac <_printf_float+0x304>
 8006c2a:	e69e      	b.n	800696a <_printf_float+0xc2>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4628      	mov	r0, r5
 8006c32:	9205      	str	r2, [sp, #20]
 8006c34:	47b8      	blx	r7
 8006c36:	3001      	adds	r0, #1
 8006c38:	f43f ae97 	beq.w	800696a <_printf_float+0xc2>
 8006c3c:	9a05      	ldr	r2, [sp, #20]
 8006c3e:	f10b 0b01 	add.w	fp, fp, #1
 8006c42:	e7b9      	b.n	8006bb8 <_printf_float+0x310>
 8006c44:	ee18 3a10 	vmov	r3, s16
 8006c48:	4652      	mov	r2, sl
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	d1be      	bne.n	8006bd2 <_printf_float+0x32a>
 8006c54:	e689      	b.n	800696a <_printf_float+0xc2>
 8006c56:	9a05      	ldr	r2, [sp, #20]
 8006c58:	464b      	mov	r3, r9
 8006c5a:	4442      	add	r2, r8
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4628      	mov	r0, r5
 8006c60:	47b8      	blx	r7
 8006c62:	3001      	adds	r0, #1
 8006c64:	d1c1      	bne.n	8006bea <_printf_float+0x342>
 8006c66:	e680      	b.n	800696a <_printf_float+0xc2>
 8006c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c6a:	2a01      	cmp	r2, #1
 8006c6c:	dc01      	bgt.n	8006c72 <_printf_float+0x3ca>
 8006c6e:	07db      	lsls	r3, r3, #31
 8006c70:	d538      	bpl.n	8006ce4 <_printf_float+0x43c>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4642      	mov	r2, r8
 8006c76:	4631      	mov	r1, r6
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	f43f ae74 	beq.w	800696a <_printf_float+0xc2>
 8006c82:	ee18 3a10 	vmov	r3, s16
 8006c86:	4652      	mov	r2, sl
 8006c88:	4631      	mov	r1, r6
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	47b8      	blx	r7
 8006c8e:	3001      	adds	r0, #1
 8006c90:	f43f ae6b 	beq.w	800696a <_printf_float+0xc2>
 8006c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f7f9 ff14 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ca0:	b9d8      	cbnz	r0, 8006cda <_printf_float+0x432>
 8006ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca4:	f108 0201 	add.w	r2, r8, #1
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	4631      	mov	r1, r6
 8006cac:	4628      	mov	r0, r5
 8006cae:	47b8      	blx	r7
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d10e      	bne.n	8006cd2 <_printf_float+0x42a>
 8006cb4:	e659      	b.n	800696a <_printf_float+0xc2>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4652      	mov	r2, sl
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	47b8      	blx	r7
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	f43f ae52 	beq.w	800696a <_printf_float+0xc2>
 8006cc6:	f108 0801 	add.w	r8, r8, #1
 8006cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	4543      	cmp	r3, r8
 8006cd0:	dcf1      	bgt.n	8006cb6 <_printf_float+0x40e>
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cd8:	e6dc      	b.n	8006a94 <_printf_float+0x1ec>
 8006cda:	f04f 0800 	mov.w	r8, #0
 8006cde:	f104 0a1a 	add.w	sl, r4, #26
 8006ce2:	e7f2      	b.n	8006cca <_printf_float+0x422>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	4642      	mov	r2, r8
 8006ce8:	e7df      	b.n	8006caa <_printf_float+0x402>
 8006cea:	2301      	movs	r3, #1
 8006cec:	464a      	mov	r2, r9
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b8      	blx	r7
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	f43f ae38 	beq.w	800696a <_printf_float+0xc2>
 8006cfa:	f108 0801 	add.w	r8, r8, #1
 8006cfe:	68e3      	ldr	r3, [r4, #12]
 8006d00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d02:	1a5b      	subs	r3, r3, r1
 8006d04:	4543      	cmp	r3, r8
 8006d06:	dcf0      	bgt.n	8006cea <_printf_float+0x442>
 8006d08:	e6fa      	b.n	8006b00 <_printf_float+0x258>
 8006d0a:	f04f 0800 	mov.w	r8, #0
 8006d0e:	f104 0919 	add.w	r9, r4, #25
 8006d12:	e7f4      	b.n	8006cfe <_printf_float+0x456>

08006d14 <_printf_common>:
 8006d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d18:	4616      	mov	r6, r2
 8006d1a:	4699      	mov	r9, r3
 8006d1c:	688a      	ldr	r2, [r1, #8]
 8006d1e:	690b      	ldr	r3, [r1, #16]
 8006d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d24:	4293      	cmp	r3, r2
 8006d26:	bfb8      	it	lt
 8006d28:	4613      	movlt	r3, r2
 8006d2a:	6033      	str	r3, [r6, #0]
 8006d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d30:	4607      	mov	r7, r0
 8006d32:	460c      	mov	r4, r1
 8006d34:	b10a      	cbz	r2, 8006d3a <_printf_common+0x26>
 8006d36:	3301      	adds	r3, #1
 8006d38:	6033      	str	r3, [r6, #0]
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	0699      	lsls	r1, r3, #26
 8006d3e:	bf42      	ittt	mi
 8006d40:	6833      	ldrmi	r3, [r6, #0]
 8006d42:	3302      	addmi	r3, #2
 8006d44:	6033      	strmi	r3, [r6, #0]
 8006d46:	6825      	ldr	r5, [r4, #0]
 8006d48:	f015 0506 	ands.w	r5, r5, #6
 8006d4c:	d106      	bne.n	8006d5c <_printf_common+0x48>
 8006d4e:	f104 0a19 	add.w	sl, r4, #25
 8006d52:	68e3      	ldr	r3, [r4, #12]
 8006d54:	6832      	ldr	r2, [r6, #0]
 8006d56:	1a9b      	subs	r3, r3, r2
 8006d58:	42ab      	cmp	r3, r5
 8006d5a:	dc26      	bgt.n	8006daa <_printf_common+0x96>
 8006d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d60:	1e13      	subs	r3, r2, #0
 8006d62:	6822      	ldr	r2, [r4, #0]
 8006d64:	bf18      	it	ne
 8006d66:	2301      	movne	r3, #1
 8006d68:	0692      	lsls	r2, r2, #26
 8006d6a:	d42b      	bmi.n	8006dc4 <_printf_common+0xb0>
 8006d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d70:	4649      	mov	r1, r9
 8006d72:	4638      	mov	r0, r7
 8006d74:	47c0      	blx	r8
 8006d76:	3001      	adds	r0, #1
 8006d78:	d01e      	beq.n	8006db8 <_printf_common+0xa4>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	68e5      	ldr	r5, [r4, #12]
 8006d7e:	6832      	ldr	r2, [r6, #0]
 8006d80:	f003 0306 	and.w	r3, r3, #6
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	bf08      	it	eq
 8006d88:	1aad      	subeq	r5, r5, r2
 8006d8a:	68a3      	ldr	r3, [r4, #8]
 8006d8c:	6922      	ldr	r2, [r4, #16]
 8006d8e:	bf0c      	ite	eq
 8006d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d94:	2500      	movne	r5, #0
 8006d96:	4293      	cmp	r3, r2
 8006d98:	bfc4      	itt	gt
 8006d9a:	1a9b      	subgt	r3, r3, r2
 8006d9c:	18ed      	addgt	r5, r5, r3
 8006d9e:	2600      	movs	r6, #0
 8006da0:	341a      	adds	r4, #26
 8006da2:	42b5      	cmp	r5, r6
 8006da4:	d11a      	bne.n	8006ddc <_printf_common+0xc8>
 8006da6:	2000      	movs	r0, #0
 8006da8:	e008      	b.n	8006dbc <_printf_common+0xa8>
 8006daa:	2301      	movs	r3, #1
 8006dac:	4652      	mov	r2, sl
 8006dae:	4649      	mov	r1, r9
 8006db0:	4638      	mov	r0, r7
 8006db2:	47c0      	blx	r8
 8006db4:	3001      	adds	r0, #1
 8006db6:	d103      	bne.n	8006dc0 <_printf_common+0xac>
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc0:	3501      	adds	r5, #1
 8006dc2:	e7c6      	b.n	8006d52 <_printf_common+0x3e>
 8006dc4:	18e1      	adds	r1, r4, r3
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	2030      	movs	r0, #48	; 0x30
 8006dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dce:	4422      	add	r2, r4
 8006dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dd8:	3302      	adds	r3, #2
 8006dda:	e7c7      	b.n	8006d6c <_printf_common+0x58>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	4622      	mov	r2, r4
 8006de0:	4649      	mov	r1, r9
 8006de2:	4638      	mov	r0, r7
 8006de4:	47c0      	blx	r8
 8006de6:	3001      	adds	r0, #1
 8006de8:	d0e6      	beq.n	8006db8 <_printf_common+0xa4>
 8006dea:	3601      	adds	r6, #1
 8006dec:	e7d9      	b.n	8006da2 <_printf_common+0x8e>
	...

08006df0 <_printf_i>:
 8006df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006df4:	460c      	mov	r4, r1
 8006df6:	4691      	mov	r9, r2
 8006df8:	7e27      	ldrb	r7, [r4, #24]
 8006dfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006dfc:	2f78      	cmp	r7, #120	; 0x78
 8006dfe:	4680      	mov	r8, r0
 8006e00:	469a      	mov	sl, r3
 8006e02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e06:	d807      	bhi.n	8006e18 <_printf_i+0x28>
 8006e08:	2f62      	cmp	r7, #98	; 0x62
 8006e0a:	d80a      	bhi.n	8006e22 <_printf_i+0x32>
 8006e0c:	2f00      	cmp	r7, #0
 8006e0e:	f000 80d8 	beq.w	8006fc2 <_printf_i+0x1d2>
 8006e12:	2f58      	cmp	r7, #88	; 0x58
 8006e14:	f000 80a3 	beq.w	8006f5e <_printf_i+0x16e>
 8006e18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e20:	e03a      	b.n	8006e98 <_printf_i+0xa8>
 8006e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e26:	2b15      	cmp	r3, #21
 8006e28:	d8f6      	bhi.n	8006e18 <_printf_i+0x28>
 8006e2a:	a001      	add	r0, pc, #4	; (adr r0, 8006e30 <_printf_i+0x40>)
 8006e2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e30:	08006e89 	.word	0x08006e89
 8006e34:	08006e9d 	.word	0x08006e9d
 8006e38:	08006e19 	.word	0x08006e19
 8006e3c:	08006e19 	.word	0x08006e19
 8006e40:	08006e19 	.word	0x08006e19
 8006e44:	08006e19 	.word	0x08006e19
 8006e48:	08006e9d 	.word	0x08006e9d
 8006e4c:	08006e19 	.word	0x08006e19
 8006e50:	08006e19 	.word	0x08006e19
 8006e54:	08006e19 	.word	0x08006e19
 8006e58:	08006e19 	.word	0x08006e19
 8006e5c:	08006fa9 	.word	0x08006fa9
 8006e60:	08006ecd 	.word	0x08006ecd
 8006e64:	08006f8b 	.word	0x08006f8b
 8006e68:	08006e19 	.word	0x08006e19
 8006e6c:	08006e19 	.word	0x08006e19
 8006e70:	08006fcb 	.word	0x08006fcb
 8006e74:	08006e19 	.word	0x08006e19
 8006e78:	08006ecd 	.word	0x08006ecd
 8006e7c:	08006e19 	.word	0x08006e19
 8006e80:	08006e19 	.word	0x08006e19
 8006e84:	08006f93 	.word	0x08006f93
 8006e88:	680b      	ldr	r3, [r1, #0]
 8006e8a:	1d1a      	adds	r2, r3, #4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	600a      	str	r2, [r1, #0]
 8006e90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e0a3      	b.n	8006fe4 <_printf_i+0x1f4>
 8006e9c:	6825      	ldr	r5, [r4, #0]
 8006e9e:	6808      	ldr	r0, [r1, #0]
 8006ea0:	062e      	lsls	r6, r5, #24
 8006ea2:	f100 0304 	add.w	r3, r0, #4
 8006ea6:	d50a      	bpl.n	8006ebe <_printf_i+0xce>
 8006ea8:	6805      	ldr	r5, [r0, #0]
 8006eaa:	600b      	str	r3, [r1, #0]
 8006eac:	2d00      	cmp	r5, #0
 8006eae:	da03      	bge.n	8006eb8 <_printf_i+0xc8>
 8006eb0:	232d      	movs	r3, #45	; 0x2d
 8006eb2:	426d      	negs	r5, r5
 8006eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eb8:	485e      	ldr	r0, [pc, #376]	; (8007034 <_printf_i+0x244>)
 8006eba:	230a      	movs	r3, #10
 8006ebc:	e019      	b.n	8006ef2 <_printf_i+0x102>
 8006ebe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ec2:	6805      	ldr	r5, [r0, #0]
 8006ec4:	600b      	str	r3, [r1, #0]
 8006ec6:	bf18      	it	ne
 8006ec8:	b22d      	sxthne	r5, r5
 8006eca:	e7ef      	b.n	8006eac <_printf_i+0xbc>
 8006ecc:	680b      	ldr	r3, [r1, #0]
 8006ece:	6825      	ldr	r5, [r4, #0]
 8006ed0:	1d18      	adds	r0, r3, #4
 8006ed2:	6008      	str	r0, [r1, #0]
 8006ed4:	0628      	lsls	r0, r5, #24
 8006ed6:	d501      	bpl.n	8006edc <_printf_i+0xec>
 8006ed8:	681d      	ldr	r5, [r3, #0]
 8006eda:	e002      	b.n	8006ee2 <_printf_i+0xf2>
 8006edc:	0669      	lsls	r1, r5, #25
 8006ede:	d5fb      	bpl.n	8006ed8 <_printf_i+0xe8>
 8006ee0:	881d      	ldrh	r5, [r3, #0]
 8006ee2:	4854      	ldr	r0, [pc, #336]	; (8007034 <_printf_i+0x244>)
 8006ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ee6:	bf0c      	ite	eq
 8006ee8:	2308      	moveq	r3, #8
 8006eea:	230a      	movne	r3, #10
 8006eec:	2100      	movs	r1, #0
 8006eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ef2:	6866      	ldr	r6, [r4, #4]
 8006ef4:	60a6      	str	r6, [r4, #8]
 8006ef6:	2e00      	cmp	r6, #0
 8006ef8:	bfa2      	ittt	ge
 8006efa:	6821      	ldrge	r1, [r4, #0]
 8006efc:	f021 0104 	bicge.w	r1, r1, #4
 8006f00:	6021      	strge	r1, [r4, #0]
 8006f02:	b90d      	cbnz	r5, 8006f08 <_printf_i+0x118>
 8006f04:	2e00      	cmp	r6, #0
 8006f06:	d04d      	beq.n	8006fa4 <_printf_i+0x1b4>
 8006f08:	4616      	mov	r6, r2
 8006f0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f0e:	fb03 5711 	mls	r7, r3, r1, r5
 8006f12:	5dc7      	ldrb	r7, [r0, r7]
 8006f14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f18:	462f      	mov	r7, r5
 8006f1a:	42bb      	cmp	r3, r7
 8006f1c:	460d      	mov	r5, r1
 8006f1e:	d9f4      	bls.n	8006f0a <_printf_i+0x11a>
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d10b      	bne.n	8006f3c <_printf_i+0x14c>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	07df      	lsls	r7, r3, #31
 8006f28:	d508      	bpl.n	8006f3c <_printf_i+0x14c>
 8006f2a:	6923      	ldr	r3, [r4, #16]
 8006f2c:	6861      	ldr	r1, [r4, #4]
 8006f2e:	4299      	cmp	r1, r3
 8006f30:	bfde      	ittt	le
 8006f32:	2330      	movle	r3, #48	; 0x30
 8006f34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f3c:	1b92      	subs	r2, r2, r6
 8006f3e:	6122      	str	r2, [r4, #16]
 8006f40:	f8cd a000 	str.w	sl, [sp]
 8006f44:	464b      	mov	r3, r9
 8006f46:	aa03      	add	r2, sp, #12
 8006f48:	4621      	mov	r1, r4
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	f7ff fee2 	bl	8006d14 <_printf_common>
 8006f50:	3001      	adds	r0, #1
 8006f52:	d14c      	bne.n	8006fee <_printf_i+0x1fe>
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295
 8006f58:	b004      	add	sp, #16
 8006f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5e:	4835      	ldr	r0, [pc, #212]	; (8007034 <_printf_i+0x244>)
 8006f60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	680e      	ldr	r6, [r1, #0]
 8006f68:	061f      	lsls	r7, r3, #24
 8006f6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f6e:	600e      	str	r6, [r1, #0]
 8006f70:	d514      	bpl.n	8006f9c <_printf_i+0x1ac>
 8006f72:	07d9      	lsls	r1, r3, #31
 8006f74:	bf44      	itt	mi
 8006f76:	f043 0320 	orrmi.w	r3, r3, #32
 8006f7a:	6023      	strmi	r3, [r4, #0]
 8006f7c:	b91d      	cbnz	r5, 8006f86 <_printf_i+0x196>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	f023 0320 	bic.w	r3, r3, #32
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	2310      	movs	r3, #16
 8006f88:	e7b0      	b.n	8006eec <_printf_i+0xfc>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	f043 0320 	orr.w	r3, r3, #32
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	2378      	movs	r3, #120	; 0x78
 8006f94:	4828      	ldr	r0, [pc, #160]	; (8007038 <_printf_i+0x248>)
 8006f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f9a:	e7e3      	b.n	8006f64 <_printf_i+0x174>
 8006f9c:	065e      	lsls	r6, r3, #25
 8006f9e:	bf48      	it	mi
 8006fa0:	b2ad      	uxthmi	r5, r5
 8006fa2:	e7e6      	b.n	8006f72 <_printf_i+0x182>
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	e7bb      	b.n	8006f20 <_printf_i+0x130>
 8006fa8:	680b      	ldr	r3, [r1, #0]
 8006faa:	6826      	ldr	r6, [r4, #0]
 8006fac:	6960      	ldr	r0, [r4, #20]
 8006fae:	1d1d      	adds	r5, r3, #4
 8006fb0:	600d      	str	r5, [r1, #0]
 8006fb2:	0635      	lsls	r5, r6, #24
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	d501      	bpl.n	8006fbc <_printf_i+0x1cc>
 8006fb8:	6018      	str	r0, [r3, #0]
 8006fba:	e002      	b.n	8006fc2 <_printf_i+0x1d2>
 8006fbc:	0671      	lsls	r1, r6, #25
 8006fbe:	d5fb      	bpl.n	8006fb8 <_printf_i+0x1c8>
 8006fc0:	8018      	strh	r0, [r3, #0]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	6123      	str	r3, [r4, #16]
 8006fc6:	4616      	mov	r6, r2
 8006fc8:	e7ba      	b.n	8006f40 <_printf_i+0x150>
 8006fca:	680b      	ldr	r3, [r1, #0]
 8006fcc:	1d1a      	adds	r2, r3, #4
 8006fce:	600a      	str	r2, [r1, #0]
 8006fd0:	681e      	ldr	r6, [r3, #0]
 8006fd2:	6862      	ldr	r2, [r4, #4]
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f7f9 f902 	bl	80001e0 <memchr>
 8006fdc:	b108      	cbz	r0, 8006fe2 <_printf_i+0x1f2>
 8006fde:	1b80      	subs	r0, r0, r6
 8006fe0:	6060      	str	r0, [r4, #4]
 8006fe2:	6863      	ldr	r3, [r4, #4]
 8006fe4:	6123      	str	r3, [r4, #16]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fec:	e7a8      	b.n	8006f40 <_printf_i+0x150>
 8006fee:	6923      	ldr	r3, [r4, #16]
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	4640      	mov	r0, r8
 8006ff6:	47d0      	blx	sl
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	d0ab      	beq.n	8006f54 <_printf_i+0x164>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	079b      	lsls	r3, r3, #30
 8007000:	d413      	bmi.n	800702a <_printf_i+0x23a>
 8007002:	68e0      	ldr	r0, [r4, #12]
 8007004:	9b03      	ldr	r3, [sp, #12]
 8007006:	4298      	cmp	r0, r3
 8007008:	bfb8      	it	lt
 800700a:	4618      	movlt	r0, r3
 800700c:	e7a4      	b.n	8006f58 <_printf_i+0x168>
 800700e:	2301      	movs	r3, #1
 8007010:	4632      	mov	r2, r6
 8007012:	4649      	mov	r1, r9
 8007014:	4640      	mov	r0, r8
 8007016:	47d0      	blx	sl
 8007018:	3001      	adds	r0, #1
 800701a:	d09b      	beq.n	8006f54 <_printf_i+0x164>
 800701c:	3501      	adds	r5, #1
 800701e:	68e3      	ldr	r3, [r4, #12]
 8007020:	9903      	ldr	r1, [sp, #12]
 8007022:	1a5b      	subs	r3, r3, r1
 8007024:	42ab      	cmp	r3, r5
 8007026:	dcf2      	bgt.n	800700e <_printf_i+0x21e>
 8007028:	e7eb      	b.n	8007002 <_printf_i+0x212>
 800702a:	2500      	movs	r5, #0
 800702c:	f104 0619 	add.w	r6, r4, #25
 8007030:	e7f5      	b.n	800701e <_printf_i+0x22e>
 8007032:	bf00      	nop
 8007034:	0800acba 	.word	0x0800acba
 8007038:	0800accb 	.word	0x0800accb

0800703c <sniprintf>:
 800703c:	b40c      	push	{r2, r3}
 800703e:	b530      	push	{r4, r5, lr}
 8007040:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <sniprintf+0x64>)
 8007042:	1e0c      	subs	r4, r1, #0
 8007044:	681d      	ldr	r5, [r3, #0]
 8007046:	b09d      	sub	sp, #116	; 0x74
 8007048:	da08      	bge.n	800705c <sniprintf+0x20>
 800704a:	238b      	movs	r3, #139	; 0x8b
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	f04f 30ff 	mov.w	r0, #4294967295
 8007052:	b01d      	add	sp, #116	; 0x74
 8007054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007058:	b002      	add	sp, #8
 800705a:	4770      	bx	lr
 800705c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007060:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007064:	bf14      	ite	ne
 8007066:	f104 33ff 	addne.w	r3, r4, #4294967295
 800706a:	4623      	moveq	r3, r4
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007074:	9002      	str	r0, [sp, #8]
 8007076:	9006      	str	r0, [sp, #24]
 8007078:	f8ad 3016 	strh.w	r3, [sp, #22]
 800707c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800707e:	ab21      	add	r3, sp, #132	; 0x84
 8007080:	a902      	add	r1, sp, #8
 8007082:	4628      	mov	r0, r5
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	f002 febf 	bl	8009e08 <_svfiprintf_r>
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	bfbc      	itt	lt
 800708e:	238b      	movlt	r3, #139	; 0x8b
 8007090:	602b      	strlt	r3, [r5, #0]
 8007092:	2c00      	cmp	r4, #0
 8007094:	d0dd      	beq.n	8007052 <sniprintf+0x16>
 8007096:	9b02      	ldr	r3, [sp, #8]
 8007098:	2200      	movs	r2, #0
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	e7d9      	b.n	8007052 <sniprintf+0x16>
 800709e:	bf00      	nop
 80070a0:	20000060 	.word	0x20000060

080070a4 <strchr>:
 80070a4:	b2c9      	uxtb	r1, r1
 80070a6:	4603      	mov	r3, r0
 80070a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070ac:	b11a      	cbz	r2, 80070b6 <strchr+0x12>
 80070ae:	428a      	cmp	r2, r1
 80070b0:	d1f9      	bne.n	80070a6 <strchr+0x2>
 80070b2:	4618      	mov	r0, r3
 80070b4:	4770      	bx	lr
 80070b6:	2900      	cmp	r1, #0
 80070b8:	bf18      	it	ne
 80070ba:	2300      	movne	r3, #0
 80070bc:	e7f9      	b.n	80070b2 <strchr+0xe>

080070be <strncmp>:
 80070be:	b510      	push	{r4, lr}
 80070c0:	b16a      	cbz	r2, 80070de <strncmp+0x20>
 80070c2:	3901      	subs	r1, #1
 80070c4:	1884      	adds	r4, r0, r2
 80070c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80070ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d103      	bne.n	80070da <strncmp+0x1c>
 80070d2:	42a0      	cmp	r0, r4
 80070d4:	d001      	beq.n	80070da <strncmp+0x1c>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f5      	bne.n	80070c6 <strncmp+0x8>
 80070da:	1a98      	subs	r0, r3, r2
 80070dc:	bd10      	pop	{r4, pc}
 80070de:	4610      	mov	r0, r2
 80070e0:	e7fc      	b.n	80070dc <strncmp+0x1e>

080070e2 <strncpy>:
 80070e2:	b510      	push	{r4, lr}
 80070e4:	3901      	subs	r1, #1
 80070e6:	4603      	mov	r3, r0
 80070e8:	b132      	cbz	r2, 80070f8 <strncpy+0x16>
 80070ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80070ee:	f803 4b01 	strb.w	r4, [r3], #1
 80070f2:	3a01      	subs	r2, #1
 80070f4:	2c00      	cmp	r4, #0
 80070f6:	d1f7      	bne.n	80070e8 <strncpy+0x6>
 80070f8:	441a      	add	r2, r3
 80070fa:	2100      	movs	r1, #0
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d100      	bne.n	8007102 <strncpy+0x20>
 8007100:	bd10      	pop	{r4, pc}
 8007102:	f803 1b01 	strb.w	r1, [r3], #1
 8007106:	e7f9      	b.n	80070fc <strncpy+0x1a>

08007108 <strpbrk>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	7803      	ldrb	r3, [r0, #0]
 800710c:	b1a3      	cbz	r3, 8007138 <strpbrk+0x30>
 800710e:	4603      	mov	r3, r0
 8007110:	460c      	mov	r4, r1
 8007112:	4618      	mov	r0, r3
 8007114:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007118:	b14d      	cbz	r5, 800712e <strpbrk+0x26>
 800711a:	460a      	mov	r2, r1
 800711c:	e001      	b.n	8007122 <strpbrk+0x1a>
 800711e:	42ae      	cmp	r6, r5
 8007120:	d009      	beq.n	8007136 <strpbrk+0x2e>
 8007122:	4614      	mov	r4, r2
 8007124:	f812 6b01 	ldrb.w	r6, [r2], #1
 8007128:	2e00      	cmp	r6, #0
 800712a:	d1f8      	bne.n	800711e <strpbrk+0x16>
 800712c:	e7f1      	b.n	8007112 <strpbrk+0xa>
 800712e:	7823      	ldrb	r3, [r4, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	bf08      	it	eq
 8007134:	2000      	moveq	r0, #0
 8007136:	bd70      	pop	{r4, r5, r6, pc}
 8007138:	4618      	mov	r0, r3
 800713a:	e7fc      	b.n	8007136 <strpbrk+0x2e>

0800713c <sulp>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	4604      	mov	r4, r0
 8007140:	460d      	mov	r5, r1
 8007142:	ec45 4b10 	vmov	d0, r4, r5
 8007146:	4616      	mov	r6, r2
 8007148:	f002 fbfa 	bl	8009940 <__ulp>
 800714c:	ec51 0b10 	vmov	r0, r1, d0
 8007150:	b17e      	cbz	r6, 8007172 <sulp+0x36>
 8007152:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007156:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800715a:	2b00      	cmp	r3, #0
 800715c:	dd09      	ble.n	8007172 <sulp+0x36>
 800715e:	051b      	lsls	r3, r3, #20
 8007160:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007164:	2400      	movs	r4, #0
 8007166:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800716a:	4622      	mov	r2, r4
 800716c:	462b      	mov	r3, r5
 800716e:	f7f9 fa43 	bl	80005f8 <__aeabi_dmul>
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	0000      	movs	r0, r0
	...

08007178 <_strtod_l>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	b0a3      	sub	sp, #140	; 0x8c
 800717e:	461f      	mov	r7, r3
 8007180:	2300      	movs	r3, #0
 8007182:	931e      	str	r3, [sp, #120]	; 0x78
 8007184:	4ba4      	ldr	r3, [pc, #656]	; (8007418 <_strtod_l+0x2a0>)
 8007186:	9219      	str	r2, [sp, #100]	; 0x64
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	9307      	str	r3, [sp, #28]
 800718c:	4604      	mov	r4, r0
 800718e:	4618      	mov	r0, r3
 8007190:	4688      	mov	r8, r1
 8007192:	f7f9 f81d 	bl	80001d0 <strlen>
 8007196:	f04f 0a00 	mov.w	sl, #0
 800719a:	4605      	mov	r5, r0
 800719c:	f04f 0b00 	mov.w	fp, #0
 80071a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80071a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80071a6:	781a      	ldrb	r2, [r3, #0]
 80071a8:	2a2b      	cmp	r2, #43	; 0x2b
 80071aa:	d04c      	beq.n	8007246 <_strtod_l+0xce>
 80071ac:	d839      	bhi.n	8007222 <_strtod_l+0xaa>
 80071ae:	2a0d      	cmp	r2, #13
 80071b0:	d832      	bhi.n	8007218 <_strtod_l+0xa0>
 80071b2:	2a08      	cmp	r2, #8
 80071b4:	d832      	bhi.n	800721c <_strtod_l+0xa4>
 80071b6:	2a00      	cmp	r2, #0
 80071b8:	d03c      	beq.n	8007234 <_strtod_l+0xbc>
 80071ba:	2300      	movs	r3, #0
 80071bc:	930e      	str	r3, [sp, #56]	; 0x38
 80071be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80071c0:	7833      	ldrb	r3, [r6, #0]
 80071c2:	2b30      	cmp	r3, #48	; 0x30
 80071c4:	f040 80b4 	bne.w	8007330 <_strtod_l+0x1b8>
 80071c8:	7873      	ldrb	r3, [r6, #1]
 80071ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80071ce:	2b58      	cmp	r3, #88	; 0x58
 80071d0:	d16c      	bne.n	80072ac <_strtod_l+0x134>
 80071d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	ab1e      	add	r3, sp, #120	; 0x78
 80071d8:	9702      	str	r7, [sp, #8]
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	4a8f      	ldr	r2, [pc, #572]	; (800741c <_strtod_l+0x2a4>)
 80071de:	ab1f      	add	r3, sp, #124	; 0x7c
 80071e0:	a91d      	add	r1, sp, #116	; 0x74
 80071e2:	4620      	mov	r0, r4
 80071e4:	f001 fd0c 	bl	8008c00 <__gethex>
 80071e8:	f010 0707 	ands.w	r7, r0, #7
 80071ec:	4605      	mov	r5, r0
 80071ee:	d005      	beq.n	80071fc <_strtod_l+0x84>
 80071f0:	2f06      	cmp	r7, #6
 80071f2:	d12a      	bne.n	800724a <_strtod_l+0xd2>
 80071f4:	3601      	adds	r6, #1
 80071f6:	2300      	movs	r3, #0
 80071f8:	961d      	str	r6, [sp, #116]	; 0x74
 80071fa:	930e      	str	r3, [sp, #56]	; 0x38
 80071fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f040 8596 	bne.w	8007d30 <_strtod_l+0xbb8>
 8007204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007206:	b1db      	cbz	r3, 8007240 <_strtod_l+0xc8>
 8007208:	4652      	mov	r2, sl
 800720a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800720e:	ec43 2b10 	vmov	d0, r2, r3
 8007212:	b023      	add	sp, #140	; 0x8c
 8007214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007218:	2a20      	cmp	r2, #32
 800721a:	d1ce      	bne.n	80071ba <_strtod_l+0x42>
 800721c:	3301      	adds	r3, #1
 800721e:	931d      	str	r3, [sp, #116]	; 0x74
 8007220:	e7c0      	b.n	80071a4 <_strtod_l+0x2c>
 8007222:	2a2d      	cmp	r2, #45	; 0x2d
 8007224:	d1c9      	bne.n	80071ba <_strtod_l+0x42>
 8007226:	2201      	movs	r2, #1
 8007228:	920e      	str	r2, [sp, #56]	; 0x38
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	921d      	str	r2, [sp, #116]	; 0x74
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1c4      	bne.n	80071be <_strtod_l+0x46>
 8007234:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007236:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800723a:	2b00      	cmp	r3, #0
 800723c:	f040 8576 	bne.w	8007d2c <_strtod_l+0xbb4>
 8007240:	4652      	mov	r2, sl
 8007242:	465b      	mov	r3, fp
 8007244:	e7e3      	b.n	800720e <_strtod_l+0x96>
 8007246:	2200      	movs	r2, #0
 8007248:	e7ee      	b.n	8007228 <_strtod_l+0xb0>
 800724a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800724c:	b13a      	cbz	r2, 800725e <_strtod_l+0xe6>
 800724e:	2135      	movs	r1, #53	; 0x35
 8007250:	a820      	add	r0, sp, #128	; 0x80
 8007252:	f002 fc80 	bl	8009b56 <__copybits>
 8007256:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007258:	4620      	mov	r0, r4
 800725a:	f002 f845 	bl	80092e8 <_Bfree>
 800725e:	3f01      	subs	r7, #1
 8007260:	2f05      	cmp	r7, #5
 8007262:	d807      	bhi.n	8007274 <_strtod_l+0xfc>
 8007264:	e8df f007 	tbb	[pc, r7]
 8007268:	1d180b0e 	.word	0x1d180b0e
 800726c:	030e      	.short	0x030e
 800726e:	f04f 0b00 	mov.w	fp, #0
 8007272:	46da      	mov	sl, fp
 8007274:	0728      	lsls	r0, r5, #28
 8007276:	d5c1      	bpl.n	80071fc <_strtod_l+0x84>
 8007278:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800727c:	e7be      	b.n	80071fc <_strtod_l+0x84>
 800727e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007282:	e7f7      	b.n	8007274 <_strtod_l+0xfc>
 8007284:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007288:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800728a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800728e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007292:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007296:	e7ed      	b.n	8007274 <_strtod_l+0xfc>
 8007298:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007420 <_strtod_l+0x2a8>
 800729c:	f04f 0a00 	mov.w	sl, #0
 80072a0:	e7e8      	b.n	8007274 <_strtod_l+0xfc>
 80072a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80072a6:	f04f 3aff 	mov.w	sl, #4294967295
 80072aa:	e7e3      	b.n	8007274 <_strtod_l+0xfc>
 80072ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	921d      	str	r2, [sp, #116]	; 0x74
 80072b2:	785b      	ldrb	r3, [r3, #1]
 80072b4:	2b30      	cmp	r3, #48	; 0x30
 80072b6:	d0f9      	beq.n	80072ac <_strtod_l+0x134>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d09f      	beq.n	80071fc <_strtod_l+0x84>
 80072bc:	2301      	movs	r3, #1
 80072be:	f04f 0900 	mov.w	r9, #0
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072c6:	930a      	str	r3, [sp, #40]	; 0x28
 80072c8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80072cc:	464f      	mov	r7, r9
 80072ce:	220a      	movs	r2, #10
 80072d0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80072d2:	7806      	ldrb	r6, [r0, #0]
 80072d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80072d8:	b2d9      	uxtb	r1, r3
 80072da:	2909      	cmp	r1, #9
 80072dc:	d92a      	bls.n	8007334 <_strtod_l+0x1bc>
 80072de:	9907      	ldr	r1, [sp, #28]
 80072e0:	462a      	mov	r2, r5
 80072e2:	f7ff feec 	bl	80070be <strncmp>
 80072e6:	b398      	cbz	r0, 8007350 <_strtod_l+0x1d8>
 80072e8:	2000      	movs	r0, #0
 80072ea:	4633      	mov	r3, r6
 80072ec:	463d      	mov	r5, r7
 80072ee:	9007      	str	r0, [sp, #28]
 80072f0:	4602      	mov	r2, r0
 80072f2:	2b65      	cmp	r3, #101	; 0x65
 80072f4:	d001      	beq.n	80072fa <_strtod_l+0x182>
 80072f6:	2b45      	cmp	r3, #69	; 0x45
 80072f8:	d118      	bne.n	800732c <_strtod_l+0x1b4>
 80072fa:	b91d      	cbnz	r5, 8007304 <_strtod_l+0x18c>
 80072fc:	9b04      	ldr	r3, [sp, #16]
 80072fe:	4303      	orrs	r3, r0
 8007300:	d098      	beq.n	8007234 <_strtod_l+0xbc>
 8007302:	2500      	movs	r5, #0
 8007304:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007308:	f108 0301 	add.w	r3, r8, #1
 800730c:	931d      	str	r3, [sp, #116]	; 0x74
 800730e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007312:	2b2b      	cmp	r3, #43	; 0x2b
 8007314:	d075      	beq.n	8007402 <_strtod_l+0x28a>
 8007316:	2b2d      	cmp	r3, #45	; 0x2d
 8007318:	d07b      	beq.n	8007412 <_strtod_l+0x29a>
 800731a:	f04f 0c00 	mov.w	ip, #0
 800731e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007322:	2909      	cmp	r1, #9
 8007324:	f240 8082 	bls.w	800742c <_strtod_l+0x2b4>
 8007328:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800732c:	2600      	movs	r6, #0
 800732e:	e09d      	b.n	800746c <_strtod_l+0x2f4>
 8007330:	2300      	movs	r3, #0
 8007332:	e7c4      	b.n	80072be <_strtod_l+0x146>
 8007334:	2f08      	cmp	r7, #8
 8007336:	bfd8      	it	le
 8007338:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800733a:	f100 0001 	add.w	r0, r0, #1
 800733e:	bfda      	itte	le
 8007340:	fb02 3301 	mlale	r3, r2, r1, r3
 8007344:	9309      	strle	r3, [sp, #36]	; 0x24
 8007346:	fb02 3909 	mlagt	r9, r2, r9, r3
 800734a:	3701      	adds	r7, #1
 800734c:	901d      	str	r0, [sp, #116]	; 0x74
 800734e:	e7bf      	b.n	80072d0 <_strtod_l+0x158>
 8007350:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007352:	195a      	adds	r2, r3, r5
 8007354:	921d      	str	r2, [sp, #116]	; 0x74
 8007356:	5d5b      	ldrb	r3, [r3, r5]
 8007358:	2f00      	cmp	r7, #0
 800735a:	d037      	beq.n	80073cc <_strtod_l+0x254>
 800735c:	9007      	str	r0, [sp, #28]
 800735e:	463d      	mov	r5, r7
 8007360:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007364:	2a09      	cmp	r2, #9
 8007366:	d912      	bls.n	800738e <_strtod_l+0x216>
 8007368:	2201      	movs	r2, #1
 800736a:	e7c2      	b.n	80072f2 <_strtod_l+0x17a>
 800736c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	921d      	str	r2, [sp, #116]	; 0x74
 8007372:	785b      	ldrb	r3, [r3, #1]
 8007374:	3001      	adds	r0, #1
 8007376:	2b30      	cmp	r3, #48	; 0x30
 8007378:	d0f8      	beq.n	800736c <_strtod_l+0x1f4>
 800737a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800737e:	2a08      	cmp	r2, #8
 8007380:	f200 84db 	bhi.w	8007d3a <_strtod_l+0xbc2>
 8007384:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007386:	9007      	str	r0, [sp, #28]
 8007388:	2000      	movs	r0, #0
 800738a:	920a      	str	r2, [sp, #40]	; 0x28
 800738c:	4605      	mov	r5, r0
 800738e:	3b30      	subs	r3, #48	; 0x30
 8007390:	f100 0201 	add.w	r2, r0, #1
 8007394:	d014      	beq.n	80073c0 <_strtod_l+0x248>
 8007396:	9907      	ldr	r1, [sp, #28]
 8007398:	4411      	add	r1, r2
 800739a:	9107      	str	r1, [sp, #28]
 800739c:	462a      	mov	r2, r5
 800739e:	eb00 0e05 	add.w	lr, r0, r5
 80073a2:	210a      	movs	r1, #10
 80073a4:	4572      	cmp	r2, lr
 80073a6:	d113      	bne.n	80073d0 <_strtod_l+0x258>
 80073a8:	182a      	adds	r2, r5, r0
 80073aa:	2a08      	cmp	r2, #8
 80073ac:	f105 0501 	add.w	r5, r5, #1
 80073b0:	4405      	add	r5, r0
 80073b2:	dc1c      	bgt.n	80073ee <_strtod_l+0x276>
 80073b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073b6:	220a      	movs	r2, #10
 80073b8:	fb02 3301 	mla	r3, r2, r1, r3
 80073bc:	9309      	str	r3, [sp, #36]	; 0x24
 80073be:	2200      	movs	r2, #0
 80073c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80073c2:	1c59      	adds	r1, r3, #1
 80073c4:	911d      	str	r1, [sp, #116]	; 0x74
 80073c6:	785b      	ldrb	r3, [r3, #1]
 80073c8:	4610      	mov	r0, r2
 80073ca:	e7c9      	b.n	8007360 <_strtod_l+0x1e8>
 80073cc:	4638      	mov	r0, r7
 80073ce:	e7d2      	b.n	8007376 <_strtod_l+0x1fe>
 80073d0:	2a08      	cmp	r2, #8
 80073d2:	dc04      	bgt.n	80073de <_strtod_l+0x266>
 80073d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80073d6:	434e      	muls	r6, r1
 80073d8:	9609      	str	r6, [sp, #36]	; 0x24
 80073da:	3201      	adds	r2, #1
 80073dc:	e7e2      	b.n	80073a4 <_strtod_l+0x22c>
 80073de:	f102 0c01 	add.w	ip, r2, #1
 80073e2:	f1bc 0f10 	cmp.w	ip, #16
 80073e6:	bfd8      	it	le
 80073e8:	fb01 f909 	mulle.w	r9, r1, r9
 80073ec:	e7f5      	b.n	80073da <_strtod_l+0x262>
 80073ee:	2d10      	cmp	r5, #16
 80073f0:	bfdc      	itt	le
 80073f2:	220a      	movle	r2, #10
 80073f4:	fb02 3909 	mlale	r9, r2, r9, r3
 80073f8:	e7e1      	b.n	80073be <_strtod_l+0x246>
 80073fa:	2300      	movs	r3, #0
 80073fc:	9307      	str	r3, [sp, #28]
 80073fe:	2201      	movs	r2, #1
 8007400:	e77c      	b.n	80072fc <_strtod_l+0x184>
 8007402:	f04f 0c00 	mov.w	ip, #0
 8007406:	f108 0302 	add.w	r3, r8, #2
 800740a:	931d      	str	r3, [sp, #116]	; 0x74
 800740c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007410:	e785      	b.n	800731e <_strtod_l+0x1a6>
 8007412:	f04f 0c01 	mov.w	ip, #1
 8007416:	e7f6      	b.n	8007406 <_strtod_l+0x28e>
 8007418:	0800ae30 	.word	0x0800ae30
 800741c:	0800acdc 	.word	0x0800acdc
 8007420:	7ff00000 	.word	0x7ff00000
 8007424:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007426:	1c59      	adds	r1, r3, #1
 8007428:	911d      	str	r1, [sp, #116]	; 0x74
 800742a:	785b      	ldrb	r3, [r3, #1]
 800742c:	2b30      	cmp	r3, #48	; 0x30
 800742e:	d0f9      	beq.n	8007424 <_strtod_l+0x2ac>
 8007430:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007434:	2908      	cmp	r1, #8
 8007436:	f63f af79 	bhi.w	800732c <_strtod_l+0x1b4>
 800743a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800743e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007440:	9308      	str	r3, [sp, #32]
 8007442:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007444:	1c59      	adds	r1, r3, #1
 8007446:	911d      	str	r1, [sp, #116]	; 0x74
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800744e:	2e09      	cmp	r6, #9
 8007450:	d937      	bls.n	80074c2 <_strtod_l+0x34a>
 8007452:	9e08      	ldr	r6, [sp, #32]
 8007454:	1b89      	subs	r1, r1, r6
 8007456:	2908      	cmp	r1, #8
 8007458:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800745c:	dc02      	bgt.n	8007464 <_strtod_l+0x2ec>
 800745e:	4576      	cmp	r6, lr
 8007460:	bfa8      	it	ge
 8007462:	4676      	movge	r6, lr
 8007464:	f1bc 0f00 	cmp.w	ip, #0
 8007468:	d000      	beq.n	800746c <_strtod_l+0x2f4>
 800746a:	4276      	negs	r6, r6
 800746c:	2d00      	cmp	r5, #0
 800746e:	d14f      	bne.n	8007510 <_strtod_l+0x398>
 8007470:	9904      	ldr	r1, [sp, #16]
 8007472:	4301      	orrs	r1, r0
 8007474:	f47f aec2 	bne.w	80071fc <_strtod_l+0x84>
 8007478:	2a00      	cmp	r2, #0
 800747a:	f47f aedb 	bne.w	8007234 <_strtod_l+0xbc>
 800747e:	2b69      	cmp	r3, #105	; 0x69
 8007480:	d027      	beq.n	80074d2 <_strtod_l+0x35a>
 8007482:	dc24      	bgt.n	80074ce <_strtod_l+0x356>
 8007484:	2b49      	cmp	r3, #73	; 0x49
 8007486:	d024      	beq.n	80074d2 <_strtod_l+0x35a>
 8007488:	2b4e      	cmp	r3, #78	; 0x4e
 800748a:	f47f aed3 	bne.w	8007234 <_strtod_l+0xbc>
 800748e:	499e      	ldr	r1, [pc, #632]	; (8007708 <_strtod_l+0x590>)
 8007490:	a81d      	add	r0, sp, #116	; 0x74
 8007492:	f001 fe0d 	bl	80090b0 <__match>
 8007496:	2800      	cmp	r0, #0
 8007498:	f43f aecc 	beq.w	8007234 <_strtod_l+0xbc>
 800749c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	2b28      	cmp	r3, #40	; 0x28
 80074a2:	d12d      	bne.n	8007500 <_strtod_l+0x388>
 80074a4:	4999      	ldr	r1, [pc, #612]	; (800770c <_strtod_l+0x594>)
 80074a6:	aa20      	add	r2, sp, #128	; 0x80
 80074a8:	a81d      	add	r0, sp, #116	; 0x74
 80074aa:	f001 fe15 	bl	80090d8 <__hexnan>
 80074ae:	2805      	cmp	r0, #5
 80074b0:	d126      	bne.n	8007500 <_strtod_l+0x388>
 80074b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80074b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80074bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80074c0:	e69c      	b.n	80071fc <_strtod_l+0x84>
 80074c2:	210a      	movs	r1, #10
 80074c4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80074c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80074cc:	e7b9      	b.n	8007442 <_strtod_l+0x2ca>
 80074ce:	2b6e      	cmp	r3, #110	; 0x6e
 80074d0:	e7db      	b.n	800748a <_strtod_l+0x312>
 80074d2:	498f      	ldr	r1, [pc, #572]	; (8007710 <_strtod_l+0x598>)
 80074d4:	a81d      	add	r0, sp, #116	; 0x74
 80074d6:	f001 fdeb 	bl	80090b0 <__match>
 80074da:	2800      	cmp	r0, #0
 80074dc:	f43f aeaa 	beq.w	8007234 <_strtod_l+0xbc>
 80074e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074e2:	498c      	ldr	r1, [pc, #560]	; (8007714 <_strtod_l+0x59c>)
 80074e4:	3b01      	subs	r3, #1
 80074e6:	a81d      	add	r0, sp, #116	; 0x74
 80074e8:	931d      	str	r3, [sp, #116]	; 0x74
 80074ea:	f001 fde1 	bl	80090b0 <__match>
 80074ee:	b910      	cbnz	r0, 80074f6 <_strtod_l+0x37e>
 80074f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074f2:	3301      	adds	r3, #1
 80074f4:	931d      	str	r3, [sp, #116]	; 0x74
 80074f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007724 <_strtod_l+0x5ac>
 80074fa:	f04f 0a00 	mov.w	sl, #0
 80074fe:	e67d      	b.n	80071fc <_strtod_l+0x84>
 8007500:	4885      	ldr	r0, [pc, #532]	; (8007718 <_strtod_l+0x5a0>)
 8007502:	f002 fd81 	bl	800a008 <nan>
 8007506:	ed8d 0b04 	vstr	d0, [sp, #16]
 800750a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800750e:	e675      	b.n	80071fc <_strtod_l+0x84>
 8007510:	9b07      	ldr	r3, [sp, #28]
 8007512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007514:	1af3      	subs	r3, r6, r3
 8007516:	2f00      	cmp	r7, #0
 8007518:	bf08      	it	eq
 800751a:	462f      	moveq	r7, r5
 800751c:	2d10      	cmp	r5, #16
 800751e:	9308      	str	r3, [sp, #32]
 8007520:	46a8      	mov	r8, r5
 8007522:	bfa8      	it	ge
 8007524:	f04f 0810 	movge.w	r8, #16
 8007528:	f7f8 ffec 	bl	8000504 <__aeabi_ui2d>
 800752c:	2d09      	cmp	r5, #9
 800752e:	4682      	mov	sl, r0
 8007530:	468b      	mov	fp, r1
 8007532:	dd13      	ble.n	800755c <_strtod_l+0x3e4>
 8007534:	4b79      	ldr	r3, [pc, #484]	; (800771c <_strtod_l+0x5a4>)
 8007536:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800753a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800753e:	f7f9 f85b 	bl	80005f8 <__aeabi_dmul>
 8007542:	4682      	mov	sl, r0
 8007544:	4648      	mov	r0, r9
 8007546:	468b      	mov	fp, r1
 8007548:	f7f8 ffdc 	bl	8000504 <__aeabi_ui2d>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4650      	mov	r0, sl
 8007552:	4659      	mov	r1, fp
 8007554:	f7f8 fe9a 	bl	800028c <__adddf3>
 8007558:	4682      	mov	sl, r0
 800755a:	468b      	mov	fp, r1
 800755c:	2d0f      	cmp	r5, #15
 800755e:	dc38      	bgt.n	80075d2 <_strtod_l+0x45a>
 8007560:	9b08      	ldr	r3, [sp, #32]
 8007562:	2b00      	cmp	r3, #0
 8007564:	f43f ae4a 	beq.w	80071fc <_strtod_l+0x84>
 8007568:	dd24      	ble.n	80075b4 <_strtod_l+0x43c>
 800756a:	2b16      	cmp	r3, #22
 800756c:	dc0b      	bgt.n	8007586 <_strtod_l+0x40e>
 800756e:	4d6b      	ldr	r5, [pc, #428]	; (800771c <_strtod_l+0x5a4>)
 8007570:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007574:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007578:	4652      	mov	r2, sl
 800757a:	465b      	mov	r3, fp
 800757c:	f7f9 f83c 	bl	80005f8 <__aeabi_dmul>
 8007580:	4682      	mov	sl, r0
 8007582:	468b      	mov	fp, r1
 8007584:	e63a      	b.n	80071fc <_strtod_l+0x84>
 8007586:	9a08      	ldr	r2, [sp, #32]
 8007588:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800758c:	4293      	cmp	r3, r2
 800758e:	db20      	blt.n	80075d2 <_strtod_l+0x45a>
 8007590:	4c62      	ldr	r4, [pc, #392]	; (800771c <_strtod_l+0x5a4>)
 8007592:	f1c5 050f 	rsb	r5, r5, #15
 8007596:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800759a:	4652      	mov	r2, sl
 800759c:	465b      	mov	r3, fp
 800759e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075a2:	f7f9 f829 	bl	80005f8 <__aeabi_dmul>
 80075a6:	9b08      	ldr	r3, [sp, #32]
 80075a8:	1b5d      	subs	r5, r3, r5
 80075aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80075ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80075b2:	e7e3      	b.n	800757c <_strtod_l+0x404>
 80075b4:	9b08      	ldr	r3, [sp, #32]
 80075b6:	3316      	adds	r3, #22
 80075b8:	db0b      	blt.n	80075d2 <_strtod_l+0x45a>
 80075ba:	9b07      	ldr	r3, [sp, #28]
 80075bc:	4a57      	ldr	r2, [pc, #348]	; (800771c <_strtod_l+0x5a4>)
 80075be:	1b9e      	subs	r6, r3, r6
 80075c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80075c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075c8:	4650      	mov	r0, sl
 80075ca:	4659      	mov	r1, fp
 80075cc:	f7f9 f93e 	bl	800084c <__aeabi_ddiv>
 80075d0:	e7d6      	b.n	8007580 <_strtod_l+0x408>
 80075d2:	9b08      	ldr	r3, [sp, #32]
 80075d4:	eba5 0808 	sub.w	r8, r5, r8
 80075d8:	4498      	add	r8, r3
 80075da:	f1b8 0f00 	cmp.w	r8, #0
 80075de:	dd71      	ble.n	80076c4 <_strtod_l+0x54c>
 80075e0:	f018 030f 	ands.w	r3, r8, #15
 80075e4:	d00a      	beq.n	80075fc <_strtod_l+0x484>
 80075e6:	494d      	ldr	r1, [pc, #308]	; (800771c <_strtod_l+0x5a4>)
 80075e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075ec:	4652      	mov	r2, sl
 80075ee:	465b      	mov	r3, fp
 80075f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075f4:	f7f9 f800 	bl	80005f8 <__aeabi_dmul>
 80075f8:	4682      	mov	sl, r0
 80075fa:	468b      	mov	fp, r1
 80075fc:	f038 080f 	bics.w	r8, r8, #15
 8007600:	d04d      	beq.n	800769e <_strtod_l+0x526>
 8007602:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007606:	dd22      	ble.n	800764e <_strtod_l+0x4d6>
 8007608:	2500      	movs	r5, #0
 800760a:	462e      	mov	r6, r5
 800760c:	9509      	str	r5, [sp, #36]	; 0x24
 800760e:	9507      	str	r5, [sp, #28]
 8007610:	2322      	movs	r3, #34	; 0x22
 8007612:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007724 <_strtod_l+0x5ac>
 8007616:	6023      	str	r3, [r4, #0]
 8007618:	f04f 0a00 	mov.w	sl, #0
 800761c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800761e:	2b00      	cmp	r3, #0
 8007620:	f43f adec 	beq.w	80071fc <_strtod_l+0x84>
 8007624:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007626:	4620      	mov	r0, r4
 8007628:	f001 fe5e 	bl	80092e8 <_Bfree>
 800762c:	9907      	ldr	r1, [sp, #28]
 800762e:	4620      	mov	r0, r4
 8007630:	f001 fe5a 	bl	80092e8 <_Bfree>
 8007634:	4631      	mov	r1, r6
 8007636:	4620      	mov	r0, r4
 8007638:	f001 fe56 	bl	80092e8 <_Bfree>
 800763c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800763e:	4620      	mov	r0, r4
 8007640:	f001 fe52 	bl	80092e8 <_Bfree>
 8007644:	4629      	mov	r1, r5
 8007646:	4620      	mov	r0, r4
 8007648:	f001 fe4e 	bl	80092e8 <_Bfree>
 800764c:	e5d6      	b.n	80071fc <_strtod_l+0x84>
 800764e:	2300      	movs	r3, #0
 8007650:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007654:	4650      	mov	r0, sl
 8007656:	4659      	mov	r1, fp
 8007658:	4699      	mov	r9, r3
 800765a:	f1b8 0f01 	cmp.w	r8, #1
 800765e:	dc21      	bgt.n	80076a4 <_strtod_l+0x52c>
 8007660:	b10b      	cbz	r3, 8007666 <_strtod_l+0x4ee>
 8007662:	4682      	mov	sl, r0
 8007664:	468b      	mov	fp, r1
 8007666:	4b2e      	ldr	r3, [pc, #184]	; (8007720 <_strtod_l+0x5a8>)
 8007668:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800766c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007670:	4652      	mov	r2, sl
 8007672:	465b      	mov	r3, fp
 8007674:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007678:	f7f8 ffbe 	bl	80005f8 <__aeabi_dmul>
 800767c:	4b29      	ldr	r3, [pc, #164]	; (8007724 <_strtod_l+0x5ac>)
 800767e:	460a      	mov	r2, r1
 8007680:	400b      	ands	r3, r1
 8007682:	4929      	ldr	r1, [pc, #164]	; (8007728 <_strtod_l+0x5b0>)
 8007684:	428b      	cmp	r3, r1
 8007686:	4682      	mov	sl, r0
 8007688:	d8be      	bhi.n	8007608 <_strtod_l+0x490>
 800768a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800768e:	428b      	cmp	r3, r1
 8007690:	bf86      	itte	hi
 8007692:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800772c <_strtod_l+0x5b4>
 8007696:	f04f 3aff 	movhi.w	sl, #4294967295
 800769a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800769e:	2300      	movs	r3, #0
 80076a0:	9304      	str	r3, [sp, #16]
 80076a2:	e081      	b.n	80077a8 <_strtod_l+0x630>
 80076a4:	f018 0f01 	tst.w	r8, #1
 80076a8:	d007      	beq.n	80076ba <_strtod_l+0x542>
 80076aa:	4b1d      	ldr	r3, [pc, #116]	; (8007720 <_strtod_l+0x5a8>)
 80076ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	f7f8 ffa0 	bl	80005f8 <__aeabi_dmul>
 80076b8:	2301      	movs	r3, #1
 80076ba:	f109 0901 	add.w	r9, r9, #1
 80076be:	ea4f 0868 	mov.w	r8, r8, asr #1
 80076c2:	e7ca      	b.n	800765a <_strtod_l+0x4e2>
 80076c4:	d0eb      	beq.n	800769e <_strtod_l+0x526>
 80076c6:	f1c8 0800 	rsb	r8, r8, #0
 80076ca:	f018 020f 	ands.w	r2, r8, #15
 80076ce:	d00a      	beq.n	80076e6 <_strtod_l+0x56e>
 80076d0:	4b12      	ldr	r3, [pc, #72]	; (800771c <_strtod_l+0x5a4>)
 80076d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076d6:	4650      	mov	r0, sl
 80076d8:	4659      	mov	r1, fp
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	f7f9 f8b5 	bl	800084c <__aeabi_ddiv>
 80076e2:	4682      	mov	sl, r0
 80076e4:	468b      	mov	fp, r1
 80076e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80076ea:	d0d8      	beq.n	800769e <_strtod_l+0x526>
 80076ec:	f1b8 0f1f 	cmp.w	r8, #31
 80076f0:	dd1e      	ble.n	8007730 <_strtod_l+0x5b8>
 80076f2:	2500      	movs	r5, #0
 80076f4:	462e      	mov	r6, r5
 80076f6:	9509      	str	r5, [sp, #36]	; 0x24
 80076f8:	9507      	str	r5, [sp, #28]
 80076fa:	2322      	movs	r3, #34	; 0x22
 80076fc:	f04f 0a00 	mov.w	sl, #0
 8007700:	f04f 0b00 	mov.w	fp, #0
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	e789      	b.n	800761c <_strtod_l+0x4a4>
 8007708:	0800acb5 	.word	0x0800acb5
 800770c:	0800acf0 	.word	0x0800acf0
 8007710:	0800acad 	.word	0x0800acad
 8007714:	0800ad33 	.word	0x0800ad33
 8007718:	0800aff0 	.word	0x0800aff0
 800771c:	0800aed0 	.word	0x0800aed0
 8007720:	0800aea8 	.word	0x0800aea8
 8007724:	7ff00000 	.word	0x7ff00000
 8007728:	7ca00000 	.word	0x7ca00000
 800772c:	7fefffff 	.word	0x7fefffff
 8007730:	f018 0310 	ands.w	r3, r8, #16
 8007734:	bf18      	it	ne
 8007736:	236a      	movne	r3, #106	; 0x6a
 8007738:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007af0 <_strtod_l+0x978>
 800773c:	9304      	str	r3, [sp, #16]
 800773e:	4650      	mov	r0, sl
 8007740:	4659      	mov	r1, fp
 8007742:	2300      	movs	r3, #0
 8007744:	f018 0f01 	tst.w	r8, #1
 8007748:	d004      	beq.n	8007754 <_strtod_l+0x5dc>
 800774a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800774e:	f7f8 ff53 	bl	80005f8 <__aeabi_dmul>
 8007752:	2301      	movs	r3, #1
 8007754:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007758:	f109 0908 	add.w	r9, r9, #8
 800775c:	d1f2      	bne.n	8007744 <_strtod_l+0x5cc>
 800775e:	b10b      	cbz	r3, 8007764 <_strtod_l+0x5ec>
 8007760:	4682      	mov	sl, r0
 8007762:	468b      	mov	fp, r1
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	b1bb      	cbz	r3, 8007798 <_strtod_l+0x620>
 8007768:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800776c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007770:	2b00      	cmp	r3, #0
 8007772:	4659      	mov	r1, fp
 8007774:	dd10      	ble.n	8007798 <_strtod_l+0x620>
 8007776:	2b1f      	cmp	r3, #31
 8007778:	f340 8128 	ble.w	80079cc <_strtod_l+0x854>
 800777c:	2b34      	cmp	r3, #52	; 0x34
 800777e:	bfde      	ittt	le
 8007780:	3b20      	suble	r3, #32
 8007782:	f04f 32ff 	movle.w	r2, #4294967295
 8007786:	fa02 f303 	lslle.w	r3, r2, r3
 800778a:	f04f 0a00 	mov.w	sl, #0
 800778e:	bfcc      	ite	gt
 8007790:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007794:	ea03 0b01 	andle.w	fp, r3, r1
 8007798:	2200      	movs	r2, #0
 800779a:	2300      	movs	r3, #0
 800779c:	4650      	mov	r0, sl
 800779e:	4659      	mov	r1, fp
 80077a0:	f7f9 f992 	bl	8000ac8 <__aeabi_dcmpeq>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d1a4      	bne.n	80076f2 <_strtod_l+0x57a>
 80077a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80077ae:	462b      	mov	r3, r5
 80077b0:	463a      	mov	r2, r7
 80077b2:	4620      	mov	r0, r4
 80077b4:	f001 fe04 	bl	80093c0 <__s2b>
 80077b8:	9009      	str	r0, [sp, #36]	; 0x24
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f43f af24 	beq.w	8007608 <_strtod_l+0x490>
 80077c0:	9b07      	ldr	r3, [sp, #28]
 80077c2:	1b9e      	subs	r6, r3, r6
 80077c4:	9b08      	ldr	r3, [sp, #32]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfb4      	ite	lt
 80077ca:	4633      	movlt	r3, r6
 80077cc:	2300      	movge	r3, #0
 80077ce:	9310      	str	r3, [sp, #64]	; 0x40
 80077d0:	9b08      	ldr	r3, [sp, #32]
 80077d2:	2500      	movs	r5, #0
 80077d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80077d8:	9318      	str	r3, [sp, #96]	; 0x60
 80077da:	462e      	mov	r6, r5
 80077dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077de:	4620      	mov	r0, r4
 80077e0:	6859      	ldr	r1, [r3, #4]
 80077e2:	f001 fd41 	bl	8009268 <_Balloc>
 80077e6:	9007      	str	r0, [sp, #28]
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f43f af11 	beq.w	8007610 <_strtod_l+0x498>
 80077ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	3202      	adds	r2, #2
 80077f4:	f103 010c 	add.w	r1, r3, #12
 80077f8:	0092      	lsls	r2, r2, #2
 80077fa:	300c      	adds	r0, #12
 80077fc:	f001 fd26 	bl	800924c <memcpy>
 8007800:	ec4b ab10 	vmov	d0, sl, fp
 8007804:	aa20      	add	r2, sp, #128	; 0x80
 8007806:	a91f      	add	r1, sp, #124	; 0x7c
 8007808:	4620      	mov	r0, r4
 800780a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800780e:	f002 f913 	bl	8009a38 <__d2b>
 8007812:	901e      	str	r0, [sp, #120]	; 0x78
 8007814:	2800      	cmp	r0, #0
 8007816:	f43f aefb 	beq.w	8007610 <_strtod_l+0x498>
 800781a:	2101      	movs	r1, #1
 800781c:	4620      	mov	r0, r4
 800781e:	f001 fe69 	bl	80094f4 <__i2b>
 8007822:	4606      	mov	r6, r0
 8007824:	2800      	cmp	r0, #0
 8007826:	f43f aef3 	beq.w	8007610 <_strtod_l+0x498>
 800782a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800782c:	9904      	ldr	r1, [sp, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfab      	itete	ge
 8007832:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007834:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007836:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007838:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800783c:	bfac      	ite	ge
 800783e:	eb03 0902 	addge.w	r9, r3, r2
 8007842:	1ad7      	sublt	r7, r2, r3
 8007844:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007846:	eba3 0801 	sub.w	r8, r3, r1
 800784a:	4490      	add	r8, r2
 800784c:	4ba3      	ldr	r3, [pc, #652]	; (8007adc <_strtod_l+0x964>)
 800784e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007852:	4598      	cmp	r8, r3
 8007854:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007858:	f280 80cc 	bge.w	80079f4 <_strtod_l+0x87c>
 800785c:	eba3 0308 	sub.w	r3, r3, r8
 8007860:	2b1f      	cmp	r3, #31
 8007862:	eba2 0203 	sub.w	r2, r2, r3
 8007866:	f04f 0101 	mov.w	r1, #1
 800786a:	f300 80b6 	bgt.w	80079da <_strtod_l+0x862>
 800786e:	fa01 f303 	lsl.w	r3, r1, r3
 8007872:	9311      	str	r3, [sp, #68]	; 0x44
 8007874:	2300      	movs	r3, #0
 8007876:	930c      	str	r3, [sp, #48]	; 0x30
 8007878:	eb09 0802 	add.w	r8, r9, r2
 800787c:	9b04      	ldr	r3, [sp, #16]
 800787e:	45c1      	cmp	r9, r8
 8007880:	4417      	add	r7, r2
 8007882:	441f      	add	r7, r3
 8007884:	464b      	mov	r3, r9
 8007886:	bfa8      	it	ge
 8007888:	4643      	movge	r3, r8
 800788a:	42bb      	cmp	r3, r7
 800788c:	bfa8      	it	ge
 800788e:	463b      	movge	r3, r7
 8007890:	2b00      	cmp	r3, #0
 8007892:	bfc2      	ittt	gt
 8007894:	eba8 0803 	subgt.w	r8, r8, r3
 8007898:	1aff      	subgt	r7, r7, r3
 800789a:	eba9 0903 	subgt.w	r9, r9, r3
 800789e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	dd17      	ble.n	80078d4 <_strtod_l+0x75c>
 80078a4:	4631      	mov	r1, r6
 80078a6:	461a      	mov	r2, r3
 80078a8:	4620      	mov	r0, r4
 80078aa:	f001 fedf 	bl	800966c <__pow5mult>
 80078ae:	4606      	mov	r6, r0
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f43f aead 	beq.w	8007610 <_strtod_l+0x498>
 80078b6:	4601      	mov	r1, r0
 80078b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80078ba:	4620      	mov	r0, r4
 80078bc:	f001 fe30 	bl	8009520 <__multiply>
 80078c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80078c2:	2800      	cmp	r0, #0
 80078c4:	f43f aea4 	beq.w	8007610 <_strtod_l+0x498>
 80078c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80078ca:	4620      	mov	r0, r4
 80078cc:	f001 fd0c 	bl	80092e8 <_Bfree>
 80078d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078d2:	931e      	str	r3, [sp, #120]	; 0x78
 80078d4:	f1b8 0f00 	cmp.w	r8, #0
 80078d8:	f300 8091 	bgt.w	80079fe <_strtod_l+0x886>
 80078dc:	9b08      	ldr	r3, [sp, #32]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	dd08      	ble.n	80078f4 <_strtod_l+0x77c>
 80078e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80078e4:	9907      	ldr	r1, [sp, #28]
 80078e6:	4620      	mov	r0, r4
 80078e8:	f001 fec0 	bl	800966c <__pow5mult>
 80078ec:	9007      	str	r0, [sp, #28]
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f43f ae8e 	beq.w	8007610 <_strtod_l+0x498>
 80078f4:	2f00      	cmp	r7, #0
 80078f6:	dd08      	ble.n	800790a <_strtod_l+0x792>
 80078f8:	9907      	ldr	r1, [sp, #28]
 80078fa:	463a      	mov	r2, r7
 80078fc:	4620      	mov	r0, r4
 80078fe:	f001 ff0f 	bl	8009720 <__lshift>
 8007902:	9007      	str	r0, [sp, #28]
 8007904:	2800      	cmp	r0, #0
 8007906:	f43f ae83 	beq.w	8007610 <_strtod_l+0x498>
 800790a:	f1b9 0f00 	cmp.w	r9, #0
 800790e:	dd08      	ble.n	8007922 <_strtod_l+0x7aa>
 8007910:	4631      	mov	r1, r6
 8007912:	464a      	mov	r2, r9
 8007914:	4620      	mov	r0, r4
 8007916:	f001 ff03 	bl	8009720 <__lshift>
 800791a:	4606      	mov	r6, r0
 800791c:	2800      	cmp	r0, #0
 800791e:	f43f ae77 	beq.w	8007610 <_strtod_l+0x498>
 8007922:	9a07      	ldr	r2, [sp, #28]
 8007924:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007926:	4620      	mov	r0, r4
 8007928:	f001 ff82 	bl	8009830 <__mdiff>
 800792c:	4605      	mov	r5, r0
 800792e:	2800      	cmp	r0, #0
 8007930:	f43f ae6e 	beq.w	8007610 <_strtod_l+0x498>
 8007934:	68c3      	ldr	r3, [r0, #12]
 8007936:	930f      	str	r3, [sp, #60]	; 0x3c
 8007938:	2300      	movs	r3, #0
 800793a:	60c3      	str	r3, [r0, #12]
 800793c:	4631      	mov	r1, r6
 800793e:	f001 ff5b 	bl	80097f8 <__mcmp>
 8007942:	2800      	cmp	r0, #0
 8007944:	da65      	bge.n	8007a12 <_strtod_l+0x89a>
 8007946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007948:	ea53 030a 	orrs.w	r3, r3, sl
 800794c:	f040 8087 	bne.w	8007a5e <_strtod_l+0x8e6>
 8007950:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007954:	2b00      	cmp	r3, #0
 8007956:	f040 8082 	bne.w	8007a5e <_strtod_l+0x8e6>
 800795a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800795e:	0d1b      	lsrs	r3, r3, #20
 8007960:	051b      	lsls	r3, r3, #20
 8007962:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007966:	d97a      	bls.n	8007a5e <_strtod_l+0x8e6>
 8007968:	696b      	ldr	r3, [r5, #20]
 800796a:	b913      	cbnz	r3, 8007972 <_strtod_l+0x7fa>
 800796c:	692b      	ldr	r3, [r5, #16]
 800796e:	2b01      	cmp	r3, #1
 8007970:	dd75      	ble.n	8007a5e <_strtod_l+0x8e6>
 8007972:	4629      	mov	r1, r5
 8007974:	2201      	movs	r2, #1
 8007976:	4620      	mov	r0, r4
 8007978:	f001 fed2 	bl	8009720 <__lshift>
 800797c:	4631      	mov	r1, r6
 800797e:	4605      	mov	r5, r0
 8007980:	f001 ff3a 	bl	80097f8 <__mcmp>
 8007984:	2800      	cmp	r0, #0
 8007986:	dd6a      	ble.n	8007a5e <_strtod_l+0x8e6>
 8007988:	9904      	ldr	r1, [sp, #16]
 800798a:	4a55      	ldr	r2, [pc, #340]	; (8007ae0 <_strtod_l+0x968>)
 800798c:	465b      	mov	r3, fp
 800798e:	2900      	cmp	r1, #0
 8007990:	f000 8085 	beq.w	8007a9e <_strtod_l+0x926>
 8007994:	ea02 010b 	and.w	r1, r2, fp
 8007998:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800799c:	dc7f      	bgt.n	8007a9e <_strtod_l+0x926>
 800799e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80079a2:	f77f aeaa 	ble.w	80076fa <_strtod_l+0x582>
 80079a6:	4a4f      	ldr	r2, [pc, #316]	; (8007ae4 <_strtod_l+0x96c>)
 80079a8:	2300      	movs	r3, #0
 80079aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80079ae:	4650      	mov	r0, sl
 80079b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80079b4:	4659      	mov	r1, fp
 80079b6:	f7f8 fe1f 	bl	80005f8 <__aeabi_dmul>
 80079ba:	460b      	mov	r3, r1
 80079bc:	4303      	orrs	r3, r0
 80079be:	bf08      	it	eq
 80079c0:	2322      	moveq	r3, #34	; 0x22
 80079c2:	4682      	mov	sl, r0
 80079c4:	468b      	mov	fp, r1
 80079c6:	bf08      	it	eq
 80079c8:	6023      	streq	r3, [r4, #0]
 80079ca:	e62b      	b.n	8007624 <_strtod_l+0x4ac>
 80079cc:	f04f 32ff 	mov.w	r2, #4294967295
 80079d0:	fa02 f303 	lsl.w	r3, r2, r3
 80079d4:	ea03 0a0a 	and.w	sl, r3, sl
 80079d8:	e6de      	b.n	8007798 <_strtod_l+0x620>
 80079da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80079de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80079e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80079e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80079ea:	fa01 f308 	lsl.w	r3, r1, r8
 80079ee:	930c      	str	r3, [sp, #48]	; 0x30
 80079f0:	9111      	str	r1, [sp, #68]	; 0x44
 80079f2:	e741      	b.n	8007878 <_strtod_l+0x700>
 80079f4:	2300      	movs	r3, #0
 80079f6:	930c      	str	r3, [sp, #48]	; 0x30
 80079f8:	2301      	movs	r3, #1
 80079fa:	9311      	str	r3, [sp, #68]	; 0x44
 80079fc:	e73c      	b.n	8007878 <_strtod_l+0x700>
 80079fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007a00:	4642      	mov	r2, r8
 8007a02:	4620      	mov	r0, r4
 8007a04:	f001 fe8c 	bl	8009720 <__lshift>
 8007a08:	901e      	str	r0, [sp, #120]	; 0x78
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f47f af66 	bne.w	80078dc <_strtod_l+0x764>
 8007a10:	e5fe      	b.n	8007610 <_strtod_l+0x498>
 8007a12:	465f      	mov	r7, fp
 8007a14:	d16e      	bne.n	8007af4 <_strtod_l+0x97c>
 8007a16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a1c:	b342      	cbz	r2, 8007a70 <_strtod_l+0x8f8>
 8007a1e:	4a32      	ldr	r2, [pc, #200]	; (8007ae8 <_strtod_l+0x970>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d128      	bne.n	8007a76 <_strtod_l+0x8fe>
 8007a24:	9b04      	ldr	r3, [sp, #16]
 8007a26:	4650      	mov	r0, sl
 8007a28:	b1eb      	cbz	r3, 8007a66 <_strtod_l+0x8ee>
 8007a2a:	4a2d      	ldr	r2, [pc, #180]	; (8007ae0 <_strtod_l+0x968>)
 8007a2c:	403a      	ands	r2, r7
 8007a2e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007a32:	f04f 31ff 	mov.w	r1, #4294967295
 8007a36:	d819      	bhi.n	8007a6c <_strtod_l+0x8f4>
 8007a38:	0d12      	lsrs	r2, r2, #20
 8007a3a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a42:	4298      	cmp	r0, r3
 8007a44:	d117      	bne.n	8007a76 <_strtod_l+0x8fe>
 8007a46:	4b29      	ldr	r3, [pc, #164]	; (8007aec <_strtod_l+0x974>)
 8007a48:	429f      	cmp	r7, r3
 8007a4a:	d102      	bne.n	8007a52 <_strtod_l+0x8da>
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	f43f addf 	beq.w	8007610 <_strtod_l+0x498>
 8007a52:	4b23      	ldr	r3, [pc, #140]	; (8007ae0 <_strtod_l+0x968>)
 8007a54:	403b      	ands	r3, r7
 8007a56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007a5a:	f04f 0a00 	mov.w	sl, #0
 8007a5e:	9b04      	ldr	r3, [sp, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1a0      	bne.n	80079a6 <_strtod_l+0x82e>
 8007a64:	e5de      	b.n	8007624 <_strtod_l+0x4ac>
 8007a66:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6a:	e7ea      	b.n	8007a42 <_strtod_l+0x8ca>
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	e7e8      	b.n	8007a42 <_strtod_l+0x8ca>
 8007a70:	ea53 030a 	orrs.w	r3, r3, sl
 8007a74:	d088      	beq.n	8007988 <_strtod_l+0x810>
 8007a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a78:	b1db      	cbz	r3, 8007ab2 <_strtod_l+0x93a>
 8007a7a:	423b      	tst	r3, r7
 8007a7c:	d0ef      	beq.n	8007a5e <_strtod_l+0x8e6>
 8007a7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a80:	9a04      	ldr	r2, [sp, #16]
 8007a82:	4650      	mov	r0, sl
 8007a84:	4659      	mov	r1, fp
 8007a86:	b1c3      	cbz	r3, 8007aba <_strtod_l+0x942>
 8007a88:	f7ff fb58 	bl	800713c <sulp>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a94:	f7f8 fbfa 	bl	800028c <__adddf3>
 8007a98:	4682      	mov	sl, r0
 8007a9a:	468b      	mov	fp, r1
 8007a9c:	e7df      	b.n	8007a5e <_strtod_l+0x8e6>
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007aa4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007aa8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007aac:	f04f 3aff 	mov.w	sl, #4294967295
 8007ab0:	e7d5      	b.n	8007a5e <_strtod_l+0x8e6>
 8007ab2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ab4:	ea13 0f0a 	tst.w	r3, sl
 8007ab8:	e7e0      	b.n	8007a7c <_strtod_l+0x904>
 8007aba:	f7ff fb3f 	bl	800713c <sulp>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ac6:	f7f8 fbdf 	bl	8000288 <__aeabi_dsub>
 8007aca:	2200      	movs	r2, #0
 8007acc:	2300      	movs	r3, #0
 8007ace:	4682      	mov	sl, r0
 8007ad0:	468b      	mov	fp, r1
 8007ad2:	f7f8 fff9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d0c1      	beq.n	8007a5e <_strtod_l+0x8e6>
 8007ada:	e60e      	b.n	80076fa <_strtod_l+0x582>
 8007adc:	fffffc02 	.word	0xfffffc02
 8007ae0:	7ff00000 	.word	0x7ff00000
 8007ae4:	39500000 	.word	0x39500000
 8007ae8:	000fffff 	.word	0x000fffff
 8007aec:	7fefffff 	.word	0x7fefffff
 8007af0:	0800ad08 	.word	0x0800ad08
 8007af4:	4631      	mov	r1, r6
 8007af6:	4628      	mov	r0, r5
 8007af8:	f001 fffa 	bl	8009af0 <__ratio>
 8007afc:	ec59 8b10 	vmov	r8, r9, d0
 8007b00:	ee10 0a10 	vmov	r0, s0
 8007b04:	2200      	movs	r2, #0
 8007b06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	f7f8 fff0 	bl	8000af0 <__aeabi_dcmple>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d07c      	beq.n	8007c0e <_strtod_l+0xa96>
 8007b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d04c      	beq.n	8007bb4 <_strtod_l+0xa3c>
 8007b1a:	4b95      	ldr	r3, [pc, #596]	; (8007d70 <_strtod_l+0xbf8>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007b22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007d70 <_strtod_l+0xbf8>
 8007b26:	f04f 0800 	mov.w	r8, #0
 8007b2a:	4b92      	ldr	r3, [pc, #584]	; (8007d74 <_strtod_l+0xbfc>)
 8007b2c:	403b      	ands	r3, r7
 8007b2e:	9311      	str	r3, [sp, #68]	; 0x44
 8007b30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007b32:	4b91      	ldr	r3, [pc, #580]	; (8007d78 <_strtod_l+0xc00>)
 8007b34:	429a      	cmp	r2, r3
 8007b36:	f040 80b2 	bne.w	8007c9e <_strtod_l+0xb26>
 8007b3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b42:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007b46:	ec4b ab10 	vmov	d0, sl, fp
 8007b4a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007b4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b52:	f001 fef5 	bl	8009940 <__ulp>
 8007b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b5a:	ec53 2b10 	vmov	r2, r3, d0
 8007b5e:	f7f8 fd4b 	bl	80005f8 <__aeabi_dmul>
 8007b62:	4652      	mov	r2, sl
 8007b64:	465b      	mov	r3, fp
 8007b66:	f7f8 fb91 	bl	800028c <__adddf3>
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4981      	ldr	r1, [pc, #516]	; (8007d74 <_strtod_l+0xbfc>)
 8007b6e:	4a83      	ldr	r2, [pc, #524]	; (8007d7c <_strtod_l+0xc04>)
 8007b70:	4019      	ands	r1, r3
 8007b72:	4291      	cmp	r1, r2
 8007b74:	4682      	mov	sl, r0
 8007b76:	d95e      	bls.n	8007c36 <_strtod_l+0xabe>
 8007b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b7a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d103      	bne.n	8007b8a <_strtod_l+0xa12>
 8007b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b84:	3301      	adds	r3, #1
 8007b86:	f43f ad43 	beq.w	8007610 <_strtod_l+0x498>
 8007b8a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007d88 <_strtod_l+0xc10>
 8007b8e:	f04f 3aff 	mov.w	sl, #4294967295
 8007b92:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007b94:	4620      	mov	r0, r4
 8007b96:	f001 fba7 	bl	80092e8 <_Bfree>
 8007b9a:	9907      	ldr	r1, [sp, #28]
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f001 fba3 	bl	80092e8 <_Bfree>
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f001 fb9f 	bl	80092e8 <_Bfree>
 8007baa:	4629      	mov	r1, r5
 8007bac:	4620      	mov	r0, r4
 8007bae:	f001 fb9b 	bl	80092e8 <_Bfree>
 8007bb2:	e613      	b.n	80077dc <_strtod_l+0x664>
 8007bb4:	f1ba 0f00 	cmp.w	sl, #0
 8007bb8:	d11b      	bne.n	8007bf2 <_strtod_l+0xa7a>
 8007bba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bbe:	b9f3      	cbnz	r3, 8007bfe <_strtod_l+0xa86>
 8007bc0:	4b6b      	ldr	r3, [pc, #428]	; (8007d70 <_strtod_l+0xbf8>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	f7f8 ff88 	bl	8000adc <__aeabi_dcmplt>
 8007bcc:	b9d0      	cbnz	r0, 8007c04 <_strtod_l+0xa8c>
 8007bce:	4640      	mov	r0, r8
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	4b6b      	ldr	r3, [pc, #428]	; (8007d80 <_strtod_l+0xc08>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f7f8 fd0f 	bl	80005f8 <__aeabi_dmul>
 8007bda:	4680      	mov	r8, r0
 8007bdc:	4689      	mov	r9, r1
 8007bde:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007be2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007be6:	931b      	str	r3, [sp, #108]	; 0x6c
 8007be8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007bec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007bf0:	e79b      	b.n	8007b2a <_strtod_l+0x9b2>
 8007bf2:	f1ba 0f01 	cmp.w	sl, #1
 8007bf6:	d102      	bne.n	8007bfe <_strtod_l+0xa86>
 8007bf8:	2f00      	cmp	r7, #0
 8007bfa:	f43f ad7e 	beq.w	80076fa <_strtod_l+0x582>
 8007bfe:	4b61      	ldr	r3, [pc, #388]	; (8007d84 <_strtod_l+0xc0c>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	e78c      	b.n	8007b1e <_strtod_l+0x9a6>
 8007c04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007d80 <_strtod_l+0xc08>
 8007c08:	f04f 0800 	mov.w	r8, #0
 8007c0c:	e7e7      	b.n	8007bde <_strtod_l+0xa66>
 8007c0e:	4b5c      	ldr	r3, [pc, #368]	; (8007d80 <_strtod_l+0xc08>)
 8007c10:	4640      	mov	r0, r8
 8007c12:	4649      	mov	r1, r9
 8007c14:	2200      	movs	r2, #0
 8007c16:	f7f8 fcef 	bl	80005f8 <__aeabi_dmul>
 8007c1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	4689      	mov	r9, r1
 8007c20:	b933      	cbnz	r3, 8007c30 <_strtod_l+0xab8>
 8007c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c26:	9012      	str	r0, [sp, #72]	; 0x48
 8007c28:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007c2e:	e7dd      	b.n	8007bec <_strtod_l+0xa74>
 8007c30:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007c34:	e7f9      	b.n	8007c2a <_strtod_l+0xab2>
 8007c36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007c3a:	9b04      	ldr	r3, [sp, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1a8      	bne.n	8007b92 <_strtod_l+0xa1a>
 8007c40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007c46:	0d1b      	lsrs	r3, r3, #20
 8007c48:	051b      	lsls	r3, r3, #20
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d1a1      	bne.n	8007b92 <_strtod_l+0xa1a>
 8007c4e:	4640      	mov	r0, r8
 8007c50:	4649      	mov	r1, r9
 8007c52:	f7f9 f819 	bl	8000c88 <__aeabi_d2lz>
 8007c56:	f7f8 fca1 	bl	800059c <__aeabi_l2d>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4640      	mov	r0, r8
 8007c60:	4649      	mov	r1, r9
 8007c62:	f7f8 fb11 	bl	8000288 <__aeabi_dsub>
 8007c66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c6c:	ea43 030a 	orr.w	r3, r3, sl
 8007c70:	4313      	orrs	r3, r2
 8007c72:	4680      	mov	r8, r0
 8007c74:	4689      	mov	r9, r1
 8007c76:	d053      	beq.n	8007d20 <_strtod_l+0xba8>
 8007c78:	a335      	add	r3, pc, #212	; (adr r3, 8007d50 <_strtod_l+0xbd8>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 ff2d 	bl	8000adc <__aeabi_dcmplt>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	f47f acce 	bne.w	8007624 <_strtod_l+0x4ac>
 8007c88:	a333      	add	r3, pc, #204	; (adr r3, 8007d58 <_strtod_l+0xbe0>)
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	4640      	mov	r0, r8
 8007c90:	4649      	mov	r1, r9
 8007c92:	f7f8 ff41 	bl	8000b18 <__aeabi_dcmpgt>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f43f af7b 	beq.w	8007b92 <_strtod_l+0xa1a>
 8007c9c:	e4c2      	b.n	8007624 <_strtod_l+0x4ac>
 8007c9e:	9b04      	ldr	r3, [sp, #16]
 8007ca0:	b333      	cbz	r3, 8007cf0 <_strtod_l+0xb78>
 8007ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ca4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ca8:	d822      	bhi.n	8007cf0 <_strtod_l+0xb78>
 8007caa:	a32d      	add	r3, pc, #180	; (adr r3, 8007d60 <_strtod_l+0xbe8>)
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	f7f8 ff1c 	bl	8000af0 <__aeabi_dcmple>
 8007cb8:	b1a0      	cbz	r0, 8007ce4 <_strtod_l+0xb6c>
 8007cba:	4649      	mov	r1, r9
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	f7f8 ff73 	bl	8000ba8 <__aeabi_d2uiz>
 8007cc2:	2801      	cmp	r0, #1
 8007cc4:	bf38      	it	cc
 8007cc6:	2001      	movcc	r0, #1
 8007cc8:	f7f8 fc1c 	bl	8000504 <__aeabi_ui2d>
 8007ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cce:	4680      	mov	r8, r0
 8007cd0:	4689      	mov	r9, r1
 8007cd2:	bb13      	cbnz	r3, 8007d1a <_strtod_l+0xba2>
 8007cd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cd8:	9014      	str	r0, [sp, #80]	; 0x50
 8007cda:	9315      	str	r3, [sp, #84]	; 0x54
 8007cdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ce0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ce6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007ce8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007cec:	1a9b      	subs	r3, r3, r2
 8007cee:	930d      	str	r3, [sp, #52]	; 0x34
 8007cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cf4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007cf8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007cfc:	f001 fe20 	bl	8009940 <__ulp>
 8007d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d04:	ec53 2b10 	vmov	r2, r3, d0
 8007d08:	f7f8 fc76 	bl	80005f8 <__aeabi_dmul>
 8007d0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d10:	f7f8 fabc 	bl	800028c <__adddf3>
 8007d14:	4682      	mov	sl, r0
 8007d16:	468b      	mov	fp, r1
 8007d18:	e78f      	b.n	8007c3a <_strtod_l+0xac2>
 8007d1a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007d1e:	e7dd      	b.n	8007cdc <_strtod_l+0xb64>
 8007d20:	a311      	add	r3, pc, #68	; (adr r3, 8007d68 <_strtod_l+0xbf0>)
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f7f8 fed9 	bl	8000adc <__aeabi_dcmplt>
 8007d2a:	e7b4      	b.n	8007c96 <_strtod_l+0xb1e>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	930e      	str	r3, [sp, #56]	; 0x38
 8007d30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	f7ff ba65 	b.w	8007204 <_strtod_l+0x8c>
 8007d3a:	2b65      	cmp	r3, #101	; 0x65
 8007d3c:	f43f ab5d 	beq.w	80073fa <_strtod_l+0x282>
 8007d40:	2b45      	cmp	r3, #69	; 0x45
 8007d42:	f43f ab5a 	beq.w	80073fa <_strtod_l+0x282>
 8007d46:	2201      	movs	r2, #1
 8007d48:	f7ff bb92 	b.w	8007470 <_strtod_l+0x2f8>
 8007d4c:	f3af 8000 	nop.w
 8007d50:	94a03595 	.word	0x94a03595
 8007d54:	3fdfffff 	.word	0x3fdfffff
 8007d58:	35afe535 	.word	0x35afe535
 8007d5c:	3fe00000 	.word	0x3fe00000
 8007d60:	ffc00000 	.word	0xffc00000
 8007d64:	41dfffff 	.word	0x41dfffff
 8007d68:	94a03595 	.word	0x94a03595
 8007d6c:	3fcfffff 	.word	0x3fcfffff
 8007d70:	3ff00000 	.word	0x3ff00000
 8007d74:	7ff00000 	.word	0x7ff00000
 8007d78:	7fe00000 	.word	0x7fe00000
 8007d7c:	7c9fffff 	.word	0x7c9fffff
 8007d80:	3fe00000 	.word	0x3fe00000
 8007d84:	bff00000 	.word	0xbff00000
 8007d88:	7fefffff 	.word	0x7fefffff

08007d8c <strtof>:
 8007d8c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8007d90:	4e26      	ldr	r6, [pc, #152]	; (8007e2c <strtof+0xa0>)
 8007d92:	4b27      	ldr	r3, [pc, #156]	; (8007e30 <strtof+0xa4>)
 8007d94:	460a      	mov	r2, r1
 8007d96:	ed2d 8b02 	vpush	{d8}
 8007d9a:	4601      	mov	r1, r0
 8007d9c:	6830      	ldr	r0, [r6, #0]
 8007d9e:	f7ff f9eb 	bl	8007178 <_strtod_l>
 8007da2:	ec55 4b10 	vmov	r4, r5, d0
 8007da6:	ee10 2a10 	vmov	r2, s0
 8007daa:	ee10 0a10 	vmov	r0, s0
 8007dae:	462b      	mov	r3, r5
 8007db0:	4629      	mov	r1, r5
 8007db2:	f7f8 febb 	bl	8000b2c <__aeabi_dcmpun>
 8007db6:	b190      	cbz	r0, 8007dde <strtof+0x52>
 8007db8:	2d00      	cmp	r5, #0
 8007dba:	481e      	ldr	r0, [pc, #120]	; (8007e34 <strtof+0xa8>)
 8007dbc:	da09      	bge.n	8007dd2 <strtof+0x46>
 8007dbe:	f002 f93b 	bl	800a038 <nanf>
 8007dc2:	eeb1 8a40 	vneg.f32	s16, s0
 8007dc6:	eeb0 0a48 	vmov.f32	s0, s16
 8007dca:	ecbd 8b02 	vpop	{d8}
 8007dce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007dd2:	ecbd 8b02 	vpop	{d8}
 8007dd6:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8007dda:	f002 b92d 	b.w	800a038 <nanf>
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 ff01 	bl	8000be8 <__aeabi_d2f>
 8007de6:	ee08 0a10 	vmov	s16, r0
 8007dea:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007e38 <strtof+0xac>
 8007dee:	eeb0 7ac8 	vabs.f32	s14, s16
 8007df2:	eeb4 7a67 	vcmp.f32	s14, s15
 8007df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dfa:	dde4      	ble.n	8007dc6 <strtof+0x3a>
 8007dfc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8007e00:	4b0e      	ldr	r3, [pc, #56]	; (8007e3c <strtof+0xb0>)
 8007e02:	f04f 32ff 	mov.w	r2, #4294967295
 8007e06:	4620      	mov	r0, r4
 8007e08:	4649      	mov	r1, r9
 8007e0a:	f7f8 fe8f 	bl	8000b2c <__aeabi_dcmpun>
 8007e0e:	b940      	cbnz	r0, 8007e22 <strtof+0x96>
 8007e10:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <strtof+0xb0>)
 8007e12:	f04f 32ff 	mov.w	r2, #4294967295
 8007e16:	4620      	mov	r0, r4
 8007e18:	4649      	mov	r1, r9
 8007e1a:	f7f8 fe69 	bl	8000af0 <__aeabi_dcmple>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d0d1      	beq.n	8007dc6 <strtof+0x3a>
 8007e22:	6833      	ldr	r3, [r6, #0]
 8007e24:	2222      	movs	r2, #34	; 0x22
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	e7cd      	b.n	8007dc6 <strtof+0x3a>
 8007e2a:	bf00      	nop
 8007e2c:	20000060 	.word	0x20000060
 8007e30:	200000c8 	.word	0x200000c8
 8007e34:	0800aff0 	.word	0x0800aff0
 8007e38:	7f7fffff 	.word	0x7f7fffff
 8007e3c:	7fefffff 	.word	0x7fefffff

08007e40 <quorem>:
 8007e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	6903      	ldr	r3, [r0, #16]
 8007e46:	690c      	ldr	r4, [r1, #16]
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	f2c0 8081 	blt.w	8007f52 <quorem+0x112>
 8007e50:	3c01      	subs	r4, #1
 8007e52:	f101 0814 	add.w	r8, r1, #20
 8007e56:	f100 0514 	add.w	r5, r0, #20
 8007e5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e74:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e78:	d331      	bcc.n	8007ede <quorem+0x9e>
 8007e7a:	f04f 0e00 	mov.w	lr, #0
 8007e7e:	4640      	mov	r0, r8
 8007e80:	46ac      	mov	ip, r5
 8007e82:	46f2      	mov	sl, lr
 8007e84:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e88:	b293      	uxth	r3, r2
 8007e8a:	fb06 e303 	mla	r3, r6, r3, lr
 8007e8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	ebaa 0303 	sub.w	r3, sl, r3
 8007e98:	0c12      	lsrs	r2, r2, #16
 8007e9a:	f8dc a000 	ldr.w	sl, [ip]
 8007e9e:	fb06 e202 	mla	r2, r6, r2, lr
 8007ea2:	fa13 f38a 	uxtah	r3, r3, sl
 8007ea6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007eaa:	fa1f fa82 	uxth.w	sl, r2
 8007eae:	f8dc 2000 	ldr.w	r2, [ip]
 8007eb2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007eb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ec0:	4581      	cmp	r9, r0
 8007ec2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ec6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007eca:	d2db      	bcs.n	8007e84 <quorem+0x44>
 8007ecc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ed0:	b92b      	cbnz	r3, 8007ede <quorem+0x9e>
 8007ed2:	9b01      	ldr	r3, [sp, #4]
 8007ed4:	3b04      	subs	r3, #4
 8007ed6:	429d      	cmp	r5, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	d32e      	bcc.n	8007f3a <quorem+0xfa>
 8007edc:	613c      	str	r4, [r7, #16]
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f001 fc8a 	bl	80097f8 <__mcmp>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	db24      	blt.n	8007f32 <quorem+0xf2>
 8007ee8:	3601      	adds	r6, #1
 8007eea:	4628      	mov	r0, r5
 8007eec:	f04f 0c00 	mov.w	ip, #0
 8007ef0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ef4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ef8:	b293      	uxth	r3, r2
 8007efa:	ebac 0303 	sub.w	r3, ip, r3
 8007efe:	0c12      	lsrs	r2, r2, #16
 8007f00:	fa13 f38e 	uxtah	r3, r3, lr
 8007f04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f12:	45c1      	cmp	r9, r8
 8007f14:	f840 3b04 	str.w	r3, [r0], #4
 8007f18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f1c:	d2e8      	bcs.n	8007ef0 <quorem+0xb0>
 8007f1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f26:	b922      	cbnz	r2, 8007f32 <quorem+0xf2>
 8007f28:	3b04      	subs	r3, #4
 8007f2a:	429d      	cmp	r5, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	d30a      	bcc.n	8007f46 <quorem+0x106>
 8007f30:	613c      	str	r4, [r7, #16]
 8007f32:	4630      	mov	r0, r6
 8007f34:	b003      	add	sp, #12
 8007f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3a:	6812      	ldr	r2, [r2, #0]
 8007f3c:	3b04      	subs	r3, #4
 8007f3e:	2a00      	cmp	r2, #0
 8007f40:	d1cc      	bne.n	8007edc <quorem+0x9c>
 8007f42:	3c01      	subs	r4, #1
 8007f44:	e7c7      	b.n	8007ed6 <quorem+0x96>
 8007f46:	6812      	ldr	r2, [r2, #0]
 8007f48:	3b04      	subs	r3, #4
 8007f4a:	2a00      	cmp	r2, #0
 8007f4c:	d1f0      	bne.n	8007f30 <quorem+0xf0>
 8007f4e:	3c01      	subs	r4, #1
 8007f50:	e7eb      	b.n	8007f2a <quorem+0xea>
 8007f52:	2000      	movs	r0, #0
 8007f54:	e7ee      	b.n	8007f34 <quorem+0xf4>
	...

08007f58 <_dtoa_r>:
 8007f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	ed2d 8b02 	vpush	{d8}
 8007f60:	ec57 6b10 	vmov	r6, r7, d0
 8007f64:	b095      	sub	sp, #84	; 0x54
 8007f66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f6c:	9105      	str	r1, [sp, #20]
 8007f6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007f72:	4604      	mov	r4, r0
 8007f74:	9209      	str	r2, [sp, #36]	; 0x24
 8007f76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f78:	b975      	cbnz	r5, 8007f98 <_dtoa_r+0x40>
 8007f7a:	2010      	movs	r0, #16
 8007f7c:	f001 f94c 	bl	8009218 <malloc>
 8007f80:	4602      	mov	r2, r0
 8007f82:	6260      	str	r0, [r4, #36]	; 0x24
 8007f84:	b920      	cbnz	r0, 8007f90 <_dtoa_r+0x38>
 8007f86:	4bb2      	ldr	r3, [pc, #712]	; (8008250 <_dtoa_r+0x2f8>)
 8007f88:	21ea      	movs	r1, #234	; 0xea
 8007f8a:	48b2      	ldr	r0, [pc, #712]	; (8008254 <_dtoa_r+0x2fc>)
 8007f8c:	f002 f868 	bl	800a060 <__assert_func>
 8007f90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f94:	6005      	str	r5, [r0, #0]
 8007f96:	60c5      	str	r5, [r0, #12]
 8007f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f9a:	6819      	ldr	r1, [r3, #0]
 8007f9c:	b151      	cbz	r1, 8007fb4 <_dtoa_r+0x5c>
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	604a      	str	r2, [r1, #4]
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4093      	lsls	r3, r2
 8007fa6:	608b      	str	r3, [r1, #8]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f001 f99d 	bl	80092e8 <_Bfree>
 8007fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	1e3b      	subs	r3, r7, #0
 8007fb6:	bfb9      	ittee	lt
 8007fb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fbc:	9303      	strlt	r3, [sp, #12]
 8007fbe:	2300      	movge	r3, #0
 8007fc0:	f8c8 3000 	strge.w	r3, [r8]
 8007fc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007fc8:	4ba3      	ldr	r3, [pc, #652]	; (8008258 <_dtoa_r+0x300>)
 8007fca:	bfbc      	itt	lt
 8007fcc:	2201      	movlt	r2, #1
 8007fce:	f8c8 2000 	strlt.w	r2, [r8]
 8007fd2:	ea33 0309 	bics.w	r3, r3, r9
 8007fd6:	d11b      	bne.n	8008010 <_dtoa_r+0xb8>
 8007fd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fda:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fe4:	4333      	orrs	r3, r6
 8007fe6:	f000 857a 	beq.w	8008ade <_dtoa_r+0xb86>
 8007fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fec:	b963      	cbnz	r3, 8008008 <_dtoa_r+0xb0>
 8007fee:	4b9b      	ldr	r3, [pc, #620]	; (800825c <_dtoa_r+0x304>)
 8007ff0:	e024      	b.n	800803c <_dtoa_r+0xe4>
 8007ff2:	4b9b      	ldr	r3, [pc, #620]	; (8008260 <_dtoa_r+0x308>)
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	9800      	ldr	r0, [sp, #0]
 8007ffe:	b015      	add	sp, #84	; 0x54
 8008000:	ecbd 8b02 	vpop	{d8}
 8008004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008008:	4b94      	ldr	r3, [pc, #592]	; (800825c <_dtoa_r+0x304>)
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	3303      	adds	r3, #3
 800800e:	e7f3      	b.n	8007ff8 <_dtoa_r+0xa0>
 8008010:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008014:	2200      	movs	r2, #0
 8008016:	ec51 0b17 	vmov	r0, r1, d7
 800801a:	2300      	movs	r3, #0
 800801c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008020:	f7f8 fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 8008024:	4680      	mov	r8, r0
 8008026:	b158      	cbz	r0, 8008040 <_dtoa_r+0xe8>
 8008028:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800802a:	2301      	movs	r3, #1
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 8551 	beq.w	8008ad8 <_dtoa_r+0xb80>
 8008036:	488b      	ldr	r0, [pc, #556]	; (8008264 <_dtoa_r+0x30c>)
 8008038:	6018      	str	r0, [r3, #0]
 800803a:	1e43      	subs	r3, r0, #1
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	e7dd      	b.n	8007ffc <_dtoa_r+0xa4>
 8008040:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008044:	aa12      	add	r2, sp, #72	; 0x48
 8008046:	a913      	add	r1, sp, #76	; 0x4c
 8008048:	4620      	mov	r0, r4
 800804a:	f001 fcf5 	bl	8009a38 <__d2b>
 800804e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008052:	4683      	mov	fp, r0
 8008054:	2d00      	cmp	r5, #0
 8008056:	d07c      	beq.n	8008152 <_dtoa_r+0x1fa>
 8008058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800805a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800805e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008062:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008066:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800806a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800806e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008072:	4b7d      	ldr	r3, [pc, #500]	; (8008268 <_dtoa_r+0x310>)
 8008074:	2200      	movs	r2, #0
 8008076:	4630      	mov	r0, r6
 8008078:	4639      	mov	r1, r7
 800807a:	f7f8 f905 	bl	8000288 <__aeabi_dsub>
 800807e:	a36e      	add	r3, pc, #440	; (adr r3, 8008238 <_dtoa_r+0x2e0>)
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f7f8 fab8 	bl	80005f8 <__aeabi_dmul>
 8008088:	a36d      	add	r3, pc, #436	; (adr r3, 8008240 <_dtoa_r+0x2e8>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f7f8 f8fd 	bl	800028c <__adddf3>
 8008092:	4606      	mov	r6, r0
 8008094:	4628      	mov	r0, r5
 8008096:	460f      	mov	r7, r1
 8008098:	f7f8 fa44 	bl	8000524 <__aeabi_i2d>
 800809c:	a36a      	add	r3, pc, #424	; (adr r3, 8008248 <_dtoa_r+0x2f0>)
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f7f8 faa9 	bl	80005f8 <__aeabi_dmul>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4630      	mov	r0, r6
 80080ac:	4639      	mov	r1, r7
 80080ae:	f7f8 f8ed 	bl	800028c <__adddf3>
 80080b2:	4606      	mov	r6, r0
 80080b4:	460f      	mov	r7, r1
 80080b6:	f7f8 fd4f 	bl	8000b58 <__aeabi_d2iz>
 80080ba:	2200      	movs	r2, #0
 80080bc:	4682      	mov	sl, r0
 80080be:	2300      	movs	r3, #0
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 fd0a 	bl	8000adc <__aeabi_dcmplt>
 80080c8:	b148      	cbz	r0, 80080de <_dtoa_r+0x186>
 80080ca:	4650      	mov	r0, sl
 80080cc:	f7f8 fa2a 	bl	8000524 <__aeabi_i2d>
 80080d0:	4632      	mov	r2, r6
 80080d2:	463b      	mov	r3, r7
 80080d4:	f7f8 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80080d8:	b908      	cbnz	r0, 80080de <_dtoa_r+0x186>
 80080da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080de:	f1ba 0f16 	cmp.w	sl, #22
 80080e2:	d854      	bhi.n	800818e <_dtoa_r+0x236>
 80080e4:	4b61      	ldr	r3, [pc, #388]	; (800826c <_dtoa_r+0x314>)
 80080e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080f2:	f7f8 fcf3 	bl	8000adc <__aeabi_dcmplt>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d04b      	beq.n	8008192 <_dtoa_r+0x23a>
 80080fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080fe:	2300      	movs	r3, #0
 8008100:	930e      	str	r3, [sp, #56]	; 0x38
 8008102:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008104:	1b5d      	subs	r5, r3, r5
 8008106:	1e6b      	subs	r3, r5, #1
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	bf43      	ittte	mi
 800810c:	2300      	movmi	r3, #0
 800810e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008112:	9304      	strmi	r3, [sp, #16]
 8008114:	f04f 0800 	movpl.w	r8, #0
 8008118:	f1ba 0f00 	cmp.w	sl, #0
 800811c:	db3b      	blt.n	8008196 <_dtoa_r+0x23e>
 800811e:	9b04      	ldr	r3, [sp, #16]
 8008120:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008124:	4453      	add	r3, sl
 8008126:	9304      	str	r3, [sp, #16]
 8008128:	2300      	movs	r3, #0
 800812a:	9306      	str	r3, [sp, #24]
 800812c:	9b05      	ldr	r3, [sp, #20]
 800812e:	2b09      	cmp	r3, #9
 8008130:	d869      	bhi.n	8008206 <_dtoa_r+0x2ae>
 8008132:	2b05      	cmp	r3, #5
 8008134:	bfc4      	itt	gt
 8008136:	3b04      	subgt	r3, #4
 8008138:	9305      	strgt	r3, [sp, #20]
 800813a:	9b05      	ldr	r3, [sp, #20]
 800813c:	f1a3 0302 	sub.w	r3, r3, #2
 8008140:	bfcc      	ite	gt
 8008142:	2500      	movgt	r5, #0
 8008144:	2501      	movle	r5, #1
 8008146:	2b03      	cmp	r3, #3
 8008148:	d869      	bhi.n	800821e <_dtoa_r+0x2c6>
 800814a:	e8df f003 	tbb	[pc, r3]
 800814e:	4e2c      	.short	0x4e2c
 8008150:	5a4c      	.short	0x5a4c
 8008152:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008156:	441d      	add	r5, r3
 8008158:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800815c:	2b20      	cmp	r3, #32
 800815e:	bfc1      	itttt	gt
 8008160:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008164:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008168:	fa09 f303 	lslgt.w	r3, r9, r3
 800816c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008170:	bfda      	itte	le
 8008172:	f1c3 0320 	rsble	r3, r3, #32
 8008176:	fa06 f003 	lslle.w	r0, r6, r3
 800817a:	4318      	orrgt	r0, r3
 800817c:	f7f8 f9c2 	bl	8000504 <__aeabi_ui2d>
 8008180:	2301      	movs	r3, #1
 8008182:	4606      	mov	r6, r0
 8008184:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008188:	3d01      	subs	r5, #1
 800818a:	9310      	str	r3, [sp, #64]	; 0x40
 800818c:	e771      	b.n	8008072 <_dtoa_r+0x11a>
 800818e:	2301      	movs	r3, #1
 8008190:	e7b6      	b.n	8008100 <_dtoa_r+0x1a8>
 8008192:	900e      	str	r0, [sp, #56]	; 0x38
 8008194:	e7b5      	b.n	8008102 <_dtoa_r+0x1aa>
 8008196:	f1ca 0300 	rsb	r3, sl, #0
 800819a:	9306      	str	r3, [sp, #24]
 800819c:	2300      	movs	r3, #0
 800819e:	eba8 080a 	sub.w	r8, r8, sl
 80081a2:	930d      	str	r3, [sp, #52]	; 0x34
 80081a4:	e7c2      	b.n	800812c <_dtoa_r+0x1d4>
 80081a6:	2300      	movs	r3, #0
 80081a8:	9308      	str	r3, [sp, #32]
 80081aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dc39      	bgt.n	8008224 <_dtoa_r+0x2cc>
 80081b0:	f04f 0901 	mov.w	r9, #1
 80081b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80081b8:	464b      	mov	r3, r9
 80081ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80081be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081c0:	2200      	movs	r2, #0
 80081c2:	6042      	str	r2, [r0, #4]
 80081c4:	2204      	movs	r2, #4
 80081c6:	f102 0614 	add.w	r6, r2, #20
 80081ca:	429e      	cmp	r6, r3
 80081cc:	6841      	ldr	r1, [r0, #4]
 80081ce:	d92f      	bls.n	8008230 <_dtoa_r+0x2d8>
 80081d0:	4620      	mov	r0, r4
 80081d2:	f001 f849 	bl	8009268 <_Balloc>
 80081d6:	9000      	str	r0, [sp, #0]
 80081d8:	2800      	cmp	r0, #0
 80081da:	d14b      	bne.n	8008274 <_dtoa_r+0x31c>
 80081dc:	4b24      	ldr	r3, [pc, #144]	; (8008270 <_dtoa_r+0x318>)
 80081de:	4602      	mov	r2, r0
 80081e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081e4:	e6d1      	b.n	8007f8a <_dtoa_r+0x32>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e7de      	b.n	80081a8 <_dtoa_r+0x250>
 80081ea:	2300      	movs	r3, #0
 80081ec:	9308      	str	r3, [sp, #32]
 80081ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f0:	eb0a 0903 	add.w	r9, sl, r3
 80081f4:	f109 0301 	add.w	r3, r9, #1
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	bfb8      	it	lt
 80081fe:	2301      	movlt	r3, #1
 8008200:	e7dd      	b.n	80081be <_dtoa_r+0x266>
 8008202:	2301      	movs	r3, #1
 8008204:	e7f2      	b.n	80081ec <_dtoa_r+0x294>
 8008206:	2501      	movs	r5, #1
 8008208:	2300      	movs	r3, #0
 800820a:	9305      	str	r3, [sp, #20]
 800820c:	9508      	str	r5, [sp, #32]
 800820e:	f04f 39ff 	mov.w	r9, #4294967295
 8008212:	2200      	movs	r2, #0
 8008214:	f8cd 9004 	str.w	r9, [sp, #4]
 8008218:	2312      	movs	r3, #18
 800821a:	9209      	str	r2, [sp, #36]	; 0x24
 800821c:	e7cf      	b.n	80081be <_dtoa_r+0x266>
 800821e:	2301      	movs	r3, #1
 8008220:	9308      	str	r3, [sp, #32]
 8008222:	e7f4      	b.n	800820e <_dtoa_r+0x2b6>
 8008224:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008228:	f8cd 9004 	str.w	r9, [sp, #4]
 800822c:	464b      	mov	r3, r9
 800822e:	e7c6      	b.n	80081be <_dtoa_r+0x266>
 8008230:	3101      	adds	r1, #1
 8008232:	6041      	str	r1, [r0, #4]
 8008234:	0052      	lsls	r2, r2, #1
 8008236:	e7c6      	b.n	80081c6 <_dtoa_r+0x26e>
 8008238:	636f4361 	.word	0x636f4361
 800823c:	3fd287a7 	.word	0x3fd287a7
 8008240:	8b60c8b3 	.word	0x8b60c8b3
 8008244:	3fc68a28 	.word	0x3fc68a28
 8008248:	509f79fb 	.word	0x509f79fb
 800824c:	3fd34413 	.word	0x3fd34413
 8008250:	0800ad3d 	.word	0x0800ad3d
 8008254:	0800ad54 	.word	0x0800ad54
 8008258:	7ff00000 	.word	0x7ff00000
 800825c:	0800ad39 	.word	0x0800ad39
 8008260:	0800ad30 	.word	0x0800ad30
 8008264:	0800acb9 	.word	0x0800acb9
 8008268:	3ff80000 	.word	0x3ff80000
 800826c:	0800aed0 	.word	0x0800aed0
 8008270:	0800adb3 	.word	0x0800adb3
 8008274:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008276:	9a00      	ldr	r2, [sp, #0]
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	9b01      	ldr	r3, [sp, #4]
 800827c:	2b0e      	cmp	r3, #14
 800827e:	f200 80ad 	bhi.w	80083dc <_dtoa_r+0x484>
 8008282:	2d00      	cmp	r5, #0
 8008284:	f000 80aa 	beq.w	80083dc <_dtoa_r+0x484>
 8008288:	f1ba 0f00 	cmp.w	sl, #0
 800828c:	dd36      	ble.n	80082fc <_dtoa_r+0x3a4>
 800828e:	4ac3      	ldr	r2, [pc, #780]	; (800859c <_dtoa_r+0x644>)
 8008290:	f00a 030f 	and.w	r3, sl, #15
 8008294:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008298:	ed93 7b00 	vldr	d7, [r3]
 800829c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80082a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80082a4:	eeb0 8a47 	vmov.f32	s16, s14
 80082a8:	eef0 8a67 	vmov.f32	s17, s15
 80082ac:	d016      	beq.n	80082dc <_dtoa_r+0x384>
 80082ae:	4bbc      	ldr	r3, [pc, #752]	; (80085a0 <_dtoa_r+0x648>)
 80082b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082b8:	f7f8 fac8 	bl	800084c <__aeabi_ddiv>
 80082bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082c0:	f007 070f 	and.w	r7, r7, #15
 80082c4:	2503      	movs	r5, #3
 80082c6:	4eb6      	ldr	r6, [pc, #728]	; (80085a0 <_dtoa_r+0x648>)
 80082c8:	b957      	cbnz	r7, 80082e0 <_dtoa_r+0x388>
 80082ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ce:	ec53 2b18 	vmov	r2, r3, d8
 80082d2:	f7f8 fabb 	bl	800084c <__aeabi_ddiv>
 80082d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082da:	e029      	b.n	8008330 <_dtoa_r+0x3d8>
 80082dc:	2502      	movs	r5, #2
 80082de:	e7f2      	b.n	80082c6 <_dtoa_r+0x36e>
 80082e0:	07f9      	lsls	r1, r7, #31
 80082e2:	d508      	bpl.n	80082f6 <_dtoa_r+0x39e>
 80082e4:	ec51 0b18 	vmov	r0, r1, d8
 80082e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082ec:	f7f8 f984 	bl	80005f8 <__aeabi_dmul>
 80082f0:	ec41 0b18 	vmov	d8, r0, r1
 80082f4:	3501      	adds	r5, #1
 80082f6:	107f      	asrs	r7, r7, #1
 80082f8:	3608      	adds	r6, #8
 80082fa:	e7e5      	b.n	80082c8 <_dtoa_r+0x370>
 80082fc:	f000 80a6 	beq.w	800844c <_dtoa_r+0x4f4>
 8008300:	f1ca 0600 	rsb	r6, sl, #0
 8008304:	4ba5      	ldr	r3, [pc, #660]	; (800859c <_dtoa_r+0x644>)
 8008306:	4fa6      	ldr	r7, [pc, #664]	; (80085a0 <_dtoa_r+0x648>)
 8008308:	f006 020f 	and.w	r2, r6, #15
 800830c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008318:	f7f8 f96e 	bl	80005f8 <__aeabi_dmul>
 800831c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008320:	1136      	asrs	r6, r6, #4
 8008322:	2300      	movs	r3, #0
 8008324:	2502      	movs	r5, #2
 8008326:	2e00      	cmp	r6, #0
 8008328:	f040 8085 	bne.w	8008436 <_dtoa_r+0x4de>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1d2      	bne.n	80082d6 <_dtoa_r+0x37e>
 8008330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 808c 	beq.w	8008450 <_dtoa_r+0x4f8>
 8008338:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800833c:	4b99      	ldr	r3, [pc, #612]	; (80085a4 <_dtoa_r+0x64c>)
 800833e:	2200      	movs	r2, #0
 8008340:	4630      	mov	r0, r6
 8008342:	4639      	mov	r1, r7
 8008344:	f7f8 fbca 	bl	8000adc <__aeabi_dcmplt>
 8008348:	2800      	cmp	r0, #0
 800834a:	f000 8081 	beq.w	8008450 <_dtoa_r+0x4f8>
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d07d      	beq.n	8008450 <_dtoa_r+0x4f8>
 8008354:	f1b9 0f00 	cmp.w	r9, #0
 8008358:	dd3c      	ble.n	80083d4 <_dtoa_r+0x47c>
 800835a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800835e:	9307      	str	r3, [sp, #28]
 8008360:	2200      	movs	r2, #0
 8008362:	4b91      	ldr	r3, [pc, #580]	; (80085a8 <_dtoa_r+0x650>)
 8008364:	4630      	mov	r0, r6
 8008366:	4639      	mov	r1, r7
 8008368:	f7f8 f946 	bl	80005f8 <__aeabi_dmul>
 800836c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008370:	3501      	adds	r5, #1
 8008372:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008376:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800837a:	4628      	mov	r0, r5
 800837c:	f7f8 f8d2 	bl	8000524 <__aeabi_i2d>
 8008380:	4632      	mov	r2, r6
 8008382:	463b      	mov	r3, r7
 8008384:	f7f8 f938 	bl	80005f8 <__aeabi_dmul>
 8008388:	4b88      	ldr	r3, [pc, #544]	; (80085ac <_dtoa_r+0x654>)
 800838a:	2200      	movs	r2, #0
 800838c:	f7f7 ff7e 	bl	800028c <__adddf3>
 8008390:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008398:	9303      	str	r3, [sp, #12]
 800839a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800839c:	2b00      	cmp	r3, #0
 800839e:	d15c      	bne.n	800845a <_dtoa_r+0x502>
 80083a0:	4b83      	ldr	r3, [pc, #524]	; (80085b0 <_dtoa_r+0x658>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	4630      	mov	r0, r6
 80083a6:	4639      	mov	r1, r7
 80083a8:	f7f7 ff6e 	bl	8000288 <__aeabi_dsub>
 80083ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083b0:	4606      	mov	r6, r0
 80083b2:	460f      	mov	r7, r1
 80083b4:	f7f8 fbb0 	bl	8000b18 <__aeabi_dcmpgt>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	f040 8296 	bne.w	80088ea <_dtoa_r+0x992>
 80083be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80083c2:	4630      	mov	r0, r6
 80083c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f8 fb87 	bl	8000adc <__aeabi_dcmplt>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	f040 8288 	bne.w	80088e4 <_dtoa_r+0x98c>
 80083d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f2c0 8158 	blt.w	8008694 <_dtoa_r+0x73c>
 80083e4:	f1ba 0f0e 	cmp.w	sl, #14
 80083e8:	f300 8154 	bgt.w	8008694 <_dtoa_r+0x73c>
 80083ec:	4b6b      	ldr	r3, [pc, #428]	; (800859c <_dtoa_r+0x644>)
 80083ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f280 80e3 	bge.w	80085c4 <_dtoa_r+0x66c>
 80083fe:	9b01      	ldr	r3, [sp, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f300 80df 	bgt.w	80085c4 <_dtoa_r+0x66c>
 8008406:	f040 826d 	bne.w	80088e4 <_dtoa_r+0x98c>
 800840a:	4b69      	ldr	r3, [pc, #420]	; (80085b0 <_dtoa_r+0x658>)
 800840c:	2200      	movs	r2, #0
 800840e:	4640      	mov	r0, r8
 8008410:	4649      	mov	r1, r9
 8008412:	f7f8 f8f1 	bl	80005f8 <__aeabi_dmul>
 8008416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800841a:	f7f8 fb73 	bl	8000b04 <__aeabi_dcmpge>
 800841e:	9e01      	ldr	r6, [sp, #4]
 8008420:	4637      	mov	r7, r6
 8008422:	2800      	cmp	r0, #0
 8008424:	f040 8243 	bne.w	80088ae <_dtoa_r+0x956>
 8008428:	9d00      	ldr	r5, [sp, #0]
 800842a:	2331      	movs	r3, #49	; 0x31
 800842c:	f805 3b01 	strb.w	r3, [r5], #1
 8008430:	f10a 0a01 	add.w	sl, sl, #1
 8008434:	e23f      	b.n	80088b6 <_dtoa_r+0x95e>
 8008436:	07f2      	lsls	r2, r6, #31
 8008438:	d505      	bpl.n	8008446 <_dtoa_r+0x4ee>
 800843a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800843e:	f7f8 f8db 	bl	80005f8 <__aeabi_dmul>
 8008442:	3501      	adds	r5, #1
 8008444:	2301      	movs	r3, #1
 8008446:	1076      	asrs	r6, r6, #1
 8008448:	3708      	adds	r7, #8
 800844a:	e76c      	b.n	8008326 <_dtoa_r+0x3ce>
 800844c:	2502      	movs	r5, #2
 800844e:	e76f      	b.n	8008330 <_dtoa_r+0x3d8>
 8008450:	9b01      	ldr	r3, [sp, #4]
 8008452:	f8cd a01c 	str.w	sl, [sp, #28]
 8008456:	930c      	str	r3, [sp, #48]	; 0x30
 8008458:	e78d      	b.n	8008376 <_dtoa_r+0x41e>
 800845a:	9900      	ldr	r1, [sp, #0]
 800845c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800845e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008460:	4b4e      	ldr	r3, [pc, #312]	; (800859c <_dtoa_r+0x644>)
 8008462:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008466:	4401      	add	r1, r0
 8008468:	9102      	str	r1, [sp, #8]
 800846a:	9908      	ldr	r1, [sp, #32]
 800846c:	eeb0 8a47 	vmov.f32	s16, s14
 8008470:	eef0 8a67 	vmov.f32	s17, s15
 8008474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008478:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800847c:	2900      	cmp	r1, #0
 800847e:	d045      	beq.n	800850c <_dtoa_r+0x5b4>
 8008480:	494c      	ldr	r1, [pc, #304]	; (80085b4 <_dtoa_r+0x65c>)
 8008482:	2000      	movs	r0, #0
 8008484:	f7f8 f9e2 	bl	800084c <__aeabi_ddiv>
 8008488:	ec53 2b18 	vmov	r2, r3, d8
 800848c:	f7f7 fefc 	bl	8000288 <__aeabi_dsub>
 8008490:	9d00      	ldr	r5, [sp, #0]
 8008492:	ec41 0b18 	vmov	d8, r0, r1
 8008496:	4639      	mov	r1, r7
 8008498:	4630      	mov	r0, r6
 800849a:	f7f8 fb5d 	bl	8000b58 <__aeabi_d2iz>
 800849e:	900c      	str	r0, [sp, #48]	; 0x30
 80084a0:	f7f8 f840 	bl	8000524 <__aeabi_i2d>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4630      	mov	r0, r6
 80084aa:	4639      	mov	r1, r7
 80084ac:	f7f7 feec 	bl	8000288 <__aeabi_dsub>
 80084b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b2:	3330      	adds	r3, #48	; 0x30
 80084b4:	f805 3b01 	strb.w	r3, [r5], #1
 80084b8:	ec53 2b18 	vmov	r2, r3, d8
 80084bc:	4606      	mov	r6, r0
 80084be:	460f      	mov	r7, r1
 80084c0:	f7f8 fb0c 	bl	8000adc <__aeabi_dcmplt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d165      	bne.n	8008594 <_dtoa_r+0x63c>
 80084c8:	4632      	mov	r2, r6
 80084ca:	463b      	mov	r3, r7
 80084cc:	4935      	ldr	r1, [pc, #212]	; (80085a4 <_dtoa_r+0x64c>)
 80084ce:	2000      	movs	r0, #0
 80084d0:	f7f7 feda 	bl	8000288 <__aeabi_dsub>
 80084d4:	ec53 2b18 	vmov	r2, r3, d8
 80084d8:	f7f8 fb00 	bl	8000adc <__aeabi_dcmplt>
 80084dc:	2800      	cmp	r0, #0
 80084de:	f040 80b9 	bne.w	8008654 <_dtoa_r+0x6fc>
 80084e2:	9b02      	ldr	r3, [sp, #8]
 80084e4:	429d      	cmp	r5, r3
 80084e6:	f43f af75 	beq.w	80083d4 <_dtoa_r+0x47c>
 80084ea:	4b2f      	ldr	r3, [pc, #188]	; (80085a8 <_dtoa_r+0x650>)
 80084ec:	ec51 0b18 	vmov	r0, r1, d8
 80084f0:	2200      	movs	r2, #0
 80084f2:	f7f8 f881 	bl	80005f8 <__aeabi_dmul>
 80084f6:	4b2c      	ldr	r3, [pc, #176]	; (80085a8 <_dtoa_r+0x650>)
 80084f8:	ec41 0b18 	vmov	d8, r0, r1
 80084fc:	2200      	movs	r2, #0
 80084fe:	4630      	mov	r0, r6
 8008500:	4639      	mov	r1, r7
 8008502:	f7f8 f879 	bl	80005f8 <__aeabi_dmul>
 8008506:	4606      	mov	r6, r0
 8008508:	460f      	mov	r7, r1
 800850a:	e7c4      	b.n	8008496 <_dtoa_r+0x53e>
 800850c:	ec51 0b17 	vmov	r0, r1, d7
 8008510:	f7f8 f872 	bl	80005f8 <__aeabi_dmul>
 8008514:	9b02      	ldr	r3, [sp, #8]
 8008516:	9d00      	ldr	r5, [sp, #0]
 8008518:	930c      	str	r3, [sp, #48]	; 0x30
 800851a:	ec41 0b18 	vmov	d8, r0, r1
 800851e:	4639      	mov	r1, r7
 8008520:	4630      	mov	r0, r6
 8008522:	f7f8 fb19 	bl	8000b58 <__aeabi_d2iz>
 8008526:	9011      	str	r0, [sp, #68]	; 0x44
 8008528:	f7f7 fffc 	bl	8000524 <__aeabi_i2d>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4630      	mov	r0, r6
 8008532:	4639      	mov	r1, r7
 8008534:	f7f7 fea8 	bl	8000288 <__aeabi_dsub>
 8008538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800853a:	3330      	adds	r3, #48	; 0x30
 800853c:	f805 3b01 	strb.w	r3, [r5], #1
 8008540:	9b02      	ldr	r3, [sp, #8]
 8008542:	429d      	cmp	r5, r3
 8008544:	4606      	mov	r6, r0
 8008546:	460f      	mov	r7, r1
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	d134      	bne.n	80085b8 <_dtoa_r+0x660>
 800854e:	4b19      	ldr	r3, [pc, #100]	; (80085b4 <_dtoa_r+0x65c>)
 8008550:	ec51 0b18 	vmov	r0, r1, d8
 8008554:	f7f7 fe9a 	bl	800028c <__adddf3>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4630      	mov	r0, r6
 800855e:	4639      	mov	r1, r7
 8008560:	f7f8 fada 	bl	8000b18 <__aeabi_dcmpgt>
 8008564:	2800      	cmp	r0, #0
 8008566:	d175      	bne.n	8008654 <_dtoa_r+0x6fc>
 8008568:	ec53 2b18 	vmov	r2, r3, d8
 800856c:	4911      	ldr	r1, [pc, #68]	; (80085b4 <_dtoa_r+0x65c>)
 800856e:	2000      	movs	r0, #0
 8008570:	f7f7 fe8a 	bl	8000288 <__aeabi_dsub>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4630      	mov	r0, r6
 800857a:	4639      	mov	r1, r7
 800857c:	f7f8 faae 	bl	8000adc <__aeabi_dcmplt>
 8008580:	2800      	cmp	r0, #0
 8008582:	f43f af27 	beq.w	80083d4 <_dtoa_r+0x47c>
 8008586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008588:	1e6b      	subs	r3, r5, #1
 800858a:	930c      	str	r3, [sp, #48]	; 0x30
 800858c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008590:	2b30      	cmp	r3, #48	; 0x30
 8008592:	d0f8      	beq.n	8008586 <_dtoa_r+0x62e>
 8008594:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008598:	e04a      	b.n	8008630 <_dtoa_r+0x6d8>
 800859a:	bf00      	nop
 800859c:	0800aed0 	.word	0x0800aed0
 80085a0:	0800aea8 	.word	0x0800aea8
 80085a4:	3ff00000 	.word	0x3ff00000
 80085a8:	40240000 	.word	0x40240000
 80085ac:	401c0000 	.word	0x401c0000
 80085b0:	40140000 	.word	0x40140000
 80085b4:	3fe00000 	.word	0x3fe00000
 80085b8:	4baf      	ldr	r3, [pc, #700]	; (8008878 <_dtoa_r+0x920>)
 80085ba:	f7f8 f81d 	bl	80005f8 <__aeabi_dmul>
 80085be:	4606      	mov	r6, r0
 80085c0:	460f      	mov	r7, r1
 80085c2:	e7ac      	b.n	800851e <_dtoa_r+0x5c6>
 80085c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085c8:	9d00      	ldr	r5, [sp, #0]
 80085ca:	4642      	mov	r2, r8
 80085cc:	464b      	mov	r3, r9
 80085ce:	4630      	mov	r0, r6
 80085d0:	4639      	mov	r1, r7
 80085d2:	f7f8 f93b 	bl	800084c <__aeabi_ddiv>
 80085d6:	f7f8 fabf 	bl	8000b58 <__aeabi_d2iz>
 80085da:	9002      	str	r0, [sp, #8]
 80085dc:	f7f7 ffa2 	bl	8000524 <__aeabi_i2d>
 80085e0:	4642      	mov	r2, r8
 80085e2:	464b      	mov	r3, r9
 80085e4:	f7f8 f808 	bl	80005f8 <__aeabi_dmul>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4630      	mov	r0, r6
 80085ee:	4639      	mov	r1, r7
 80085f0:	f7f7 fe4a 	bl	8000288 <__aeabi_dsub>
 80085f4:	9e02      	ldr	r6, [sp, #8]
 80085f6:	9f01      	ldr	r7, [sp, #4]
 80085f8:	3630      	adds	r6, #48	; 0x30
 80085fa:	f805 6b01 	strb.w	r6, [r5], #1
 80085fe:	9e00      	ldr	r6, [sp, #0]
 8008600:	1bae      	subs	r6, r5, r6
 8008602:	42b7      	cmp	r7, r6
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	d137      	bne.n	800867a <_dtoa_r+0x722>
 800860a:	f7f7 fe3f 	bl	800028c <__adddf3>
 800860e:	4642      	mov	r2, r8
 8008610:	464b      	mov	r3, r9
 8008612:	4606      	mov	r6, r0
 8008614:	460f      	mov	r7, r1
 8008616:	f7f8 fa7f 	bl	8000b18 <__aeabi_dcmpgt>
 800861a:	b9c8      	cbnz	r0, 8008650 <_dtoa_r+0x6f8>
 800861c:	4642      	mov	r2, r8
 800861e:	464b      	mov	r3, r9
 8008620:	4630      	mov	r0, r6
 8008622:	4639      	mov	r1, r7
 8008624:	f7f8 fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 8008628:	b110      	cbz	r0, 8008630 <_dtoa_r+0x6d8>
 800862a:	9b02      	ldr	r3, [sp, #8]
 800862c:	07d9      	lsls	r1, r3, #31
 800862e:	d40f      	bmi.n	8008650 <_dtoa_r+0x6f8>
 8008630:	4620      	mov	r0, r4
 8008632:	4659      	mov	r1, fp
 8008634:	f000 fe58 	bl	80092e8 <_Bfree>
 8008638:	2300      	movs	r3, #0
 800863a:	702b      	strb	r3, [r5, #0]
 800863c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800863e:	f10a 0001 	add.w	r0, sl, #1
 8008642:	6018      	str	r0, [r3, #0]
 8008644:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008646:	2b00      	cmp	r3, #0
 8008648:	f43f acd8 	beq.w	8007ffc <_dtoa_r+0xa4>
 800864c:	601d      	str	r5, [r3, #0]
 800864e:	e4d5      	b.n	8007ffc <_dtoa_r+0xa4>
 8008650:	f8cd a01c 	str.w	sl, [sp, #28]
 8008654:	462b      	mov	r3, r5
 8008656:	461d      	mov	r5, r3
 8008658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800865c:	2a39      	cmp	r2, #57	; 0x39
 800865e:	d108      	bne.n	8008672 <_dtoa_r+0x71a>
 8008660:	9a00      	ldr	r2, [sp, #0]
 8008662:	429a      	cmp	r2, r3
 8008664:	d1f7      	bne.n	8008656 <_dtoa_r+0x6fe>
 8008666:	9a07      	ldr	r2, [sp, #28]
 8008668:	9900      	ldr	r1, [sp, #0]
 800866a:	3201      	adds	r2, #1
 800866c:	9207      	str	r2, [sp, #28]
 800866e:	2230      	movs	r2, #48	; 0x30
 8008670:	700a      	strb	r2, [r1, #0]
 8008672:	781a      	ldrb	r2, [r3, #0]
 8008674:	3201      	adds	r2, #1
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	e78c      	b.n	8008594 <_dtoa_r+0x63c>
 800867a:	4b7f      	ldr	r3, [pc, #508]	; (8008878 <_dtoa_r+0x920>)
 800867c:	2200      	movs	r2, #0
 800867e:	f7f7 ffbb 	bl	80005f8 <__aeabi_dmul>
 8008682:	2200      	movs	r2, #0
 8008684:	2300      	movs	r3, #0
 8008686:	4606      	mov	r6, r0
 8008688:	460f      	mov	r7, r1
 800868a:	f7f8 fa1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800868e:	2800      	cmp	r0, #0
 8008690:	d09b      	beq.n	80085ca <_dtoa_r+0x672>
 8008692:	e7cd      	b.n	8008630 <_dtoa_r+0x6d8>
 8008694:	9a08      	ldr	r2, [sp, #32]
 8008696:	2a00      	cmp	r2, #0
 8008698:	f000 80c4 	beq.w	8008824 <_dtoa_r+0x8cc>
 800869c:	9a05      	ldr	r2, [sp, #20]
 800869e:	2a01      	cmp	r2, #1
 80086a0:	f300 80a8 	bgt.w	80087f4 <_dtoa_r+0x89c>
 80086a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	f000 80a0 	beq.w	80087ec <_dtoa_r+0x894>
 80086ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086b0:	9e06      	ldr	r6, [sp, #24]
 80086b2:	4645      	mov	r5, r8
 80086b4:	9a04      	ldr	r2, [sp, #16]
 80086b6:	2101      	movs	r1, #1
 80086b8:	441a      	add	r2, r3
 80086ba:	4620      	mov	r0, r4
 80086bc:	4498      	add	r8, r3
 80086be:	9204      	str	r2, [sp, #16]
 80086c0:	f000 ff18 	bl	80094f4 <__i2b>
 80086c4:	4607      	mov	r7, r0
 80086c6:	2d00      	cmp	r5, #0
 80086c8:	dd0b      	ble.n	80086e2 <_dtoa_r+0x78a>
 80086ca:	9b04      	ldr	r3, [sp, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	dd08      	ble.n	80086e2 <_dtoa_r+0x78a>
 80086d0:	42ab      	cmp	r3, r5
 80086d2:	9a04      	ldr	r2, [sp, #16]
 80086d4:	bfa8      	it	ge
 80086d6:	462b      	movge	r3, r5
 80086d8:	eba8 0803 	sub.w	r8, r8, r3
 80086dc:	1aed      	subs	r5, r5, r3
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	9b06      	ldr	r3, [sp, #24]
 80086e4:	b1fb      	cbz	r3, 8008726 <_dtoa_r+0x7ce>
 80086e6:	9b08      	ldr	r3, [sp, #32]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 809f 	beq.w	800882c <_dtoa_r+0x8d4>
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	dd11      	ble.n	8008716 <_dtoa_r+0x7be>
 80086f2:	4639      	mov	r1, r7
 80086f4:	4632      	mov	r2, r6
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 ffb8 	bl	800966c <__pow5mult>
 80086fc:	465a      	mov	r2, fp
 80086fe:	4601      	mov	r1, r0
 8008700:	4607      	mov	r7, r0
 8008702:	4620      	mov	r0, r4
 8008704:	f000 ff0c 	bl	8009520 <__multiply>
 8008708:	4659      	mov	r1, fp
 800870a:	9007      	str	r0, [sp, #28]
 800870c:	4620      	mov	r0, r4
 800870e:	f000 fdeb 	bl	80092e8 <_Bfree>
 8008712:	9b07      	ldr	r3, [sp, #28]
 8008714:	469b      	mov	fp, r3
 8008716:	9b06      	ldr	r3, [sp, #24]
 8008718:	1b9a      	subs	r2, r3, r6
 800871a:	d004      	beq.n	8008726 <_dtoa_r+0x7ce>
 800871c:	4659      	mov	r1, fp
 800871e:	4620      	mov	r0, r4
 8008720:	f000 ffa4 	bl	800966c <__pow5mult>
 8008724:	4683      	mov	fp, r0
 8008726:	2101      	movs	r1, #1
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fee3 	bl	80094f4 <__i2b>
 800872e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008730:	2b00      	cmp	r3, #0
 8008732:	4606      	mov	r6, r0
 8008734:	dd7c      	ble.n	8008830 <_dtoa_r+0x8d8>
 8008736:	461a      	mov	r2, r3
 8008738:	4601      	mov	r1, r0
 800873a:	4620      	mov	r0, r4
 800873c:	f000 ff96 	bl	800966c <__pow5mult>
 8008740:	9b05      	ldr	r3, [sp, #20]
 8008742:	2b01      	cmp	r3, #1
 8008744:	4606      	mov	r6, r0
 8008746:	dd76      	ble.n	8008836 <_dtoa_r+0x8de>
 8008748:	2300      	movs	r3, #0
 800874a:	9306      	str	r3, [sp, #24]
 800874c:	6933      	ldr	r3, [r6, #16]
 800874e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008752:	6918      	ldr	r0, [r3, #16]
 8008754:	f000 fe7e 	bl	8009454 <__hi0bits>
 8008758:	f1c0 0020 	rsb	r0, r0, #32
 800875c:	9b04      	ldr	r3, [sp, #16]
 800875e:	4418      	add	r0, r3
 8008760:	f010 001f 	ands.w	r0, r0, #31
 8008764:	f000 8086 	beq.w	8008874 <_dtoa_r+0x91c>
 8008768:	f1c0 0320 	rsb	r3, r0, #32
 800876c:	2b04      	cmp	r3, #4
 800876e:	dd7f      	ble.n	8008870 <_dtoa_r+0x918>
 8008770:	f1c0 001c 	rsb	r0, r0, #28
 8008774:	9b04      	ldr	r3, [sp, #16]
 8008776:	4403      	add	r3, r0
 8008778:	4480      	add	r8, r0
 800877a:	4405      	add	r5, r0
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	f1b8 0f00 	cmp.w	r8, #0
 8008782:	dd05      	ble.n	8008790 <_dtoa_r+0x838>
 8008784:	4659      	mov	r1, fp
 8008786:	4642      	mov	r2, r8
 8008788:	4620      	mov	r0, r4
 800878a:	f000 ffc9 	bl	8009720 <__lshift>
 800878e:	4683      	mov	fp, r0
 8008790:	9b04      	ldr	r3, [sp, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	dd05      	ble.n	80087a2 <_dtoa_r+0x84a>
 8008796:	4631      	mov	r1, r6
 8008798:	461a      	mov	r2, r3
 800879a:	4620      	mov	r0, r4
 800879c:	f000 ffc0 	bl	8009720 <__lshift>
 80087a0:	4606      	mov	r6, r0
 80087a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d069      	beq.n	800887c <_dtoa_r+0x924>
 80087a8:	4631      	mov	r1, r6
 80087aa:	4658      	mov	r0, fp
 80087ac:	f001 f824 	bl	80097f8 <__mcmp>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	da63      	bge.n	800887c <_dtoa_r+0x924>
 80087b4:	2300      	movs	r3, #0
 80087b6:	4659      	mov	r1, fp
 80087b8:	220a      	movs	r2, #10
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 fdb6 	bl	800932c <__multadd>
 80087c0:	9b08      	ldr	r3, [sp, #32]
 80087c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087c6:	4683      	mov	fp, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 818f 	beq.w	8008aec <_dtoa_r+0xb94>
 80087ce:	4639      	mov	r1, r7
 80087d0:	2300      	movs	r3, #0
 80087d2:	220a      	movs	r2, #10
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 fda9 	bl	800932c <__multadd>
 80087da:	f1b9 0f00 	cmp.w	r9, #0
 80087de:	4607      	mov	r7, r0
 80087e0:	f300 808e 	bgt.w	8008900 <_dtoa_r+0x9a8>
 80087e4:	9b05      	ldr	r3, [sp, #20]
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	dc50      	bgt.n	800888c <_dtoa_r+0x934>
 80087ea:	e089      	b.n	8008900 <_dtoa_r+0x9a8>
 80087ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087f2:	e75d      	b.n	80086b0 <_dtoa_r+0x758>
 80087f4:	9b01      	ldr	r3, [sp, #4]
 80087f6:	1e5e      	subs	r6, r3, #1
 80087f8:	9b06      	ldr	r3, [sp, #24]
 80087fa:	42b3      	cmp	r3, r6
 80087fc:	bfbf      	itttt	lt
 80087fe:	9b06      	ldrlt	r3, [sp, #24]
 8008800:	9606      	strlt	r6, [sp, #24]
 8008802:	1af2      	sublt	r2, r6, r3
 8008804:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008806:	bfb6      	itet	lt
 8008808:	189b      	addlt	r3, r3, r2
 800880a:	1b9e      	subge	r6, r3, r6
 800880c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	bfb8      	it	lt
 8008812:	2600      	movlt	r6, #0
 8008814:	2b00      	cmp	r3, #0
 8008816:	bfb5      	itete	lt
 8008818:	eba8 0503 	sublt.w	r5, r8, r3
 800881c:	9b01      	ldrge	r3, [sp, #4]
 800881e:	2300      	movlt	r3, #0
 8008820:	4645      	movge	r5, r8
 8008822:	e747      	b.n	80086b4 <_dtoa_r+0x75c>
 8008824:	9e06      	ldr	r6, [sp, #24]
 8008826:	9f08      	ldr	r7, [sp, #32]
 8008828:	4645      	mov	r5, r8
 800882a:	e74c      	b.n	80086c6 <_dtoa_r+0x76e>
 800882c:	9a06      	ldr	r2, [sp, #24]
 800882e:	e775      	b.n	800871c <_dtoa_r+0x7c4>
 8008830:	9b05      	ldr	r3, [sp, #20]
 8008832:	2b01      	cmp	r3, #1
 8008834:	dc18      	bgt.n	8008868 <_dtoa_r+0x910>
 8008836:	9b02      	ldr	r3, [sp, #8]
 8008838:	b9b3      	cbnz	r3, 8008868 <_dtoa_r+0x910>
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008840:	b9a3      	cbnz	r3, 800886c <_dtoa_r+0x914>
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008848:	0d1b      	lsrs	r3, r3, #20
 800884a:	051b      	lsls	r3, r3, #20
 800884c:	b12b      	cbz	r3, 800885a <_dtoa_r+0x902>
 800884e:	9b04      	ldr	r3, [sp, #16]
 8008850:	3301      	adds	r3, #1
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	f108 0801 	add.w	r8, r8, #1
 8008858:	2301      	movs	r3, #1
 800885a:	9306      	str	r3, [sp, #24]
 800885c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800885e:	2b00      	cmp	r3, #0
 8008860:	f47f af74 	bne.w	800874c <_dtoa_r+0x7f4>
 8008864:	2001      	movs	r0, #1
 8008866:	e779      	b.n	800875c <_dtoa_r+0x804>
 8008868:	2300      	movs	r3, #0
 800886a:	e7f6      	b.n	800885a <_dtoa_r+0x902>
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	e7f4      	b.n	800885a <_dtoa_r+0x902>
 8008870:	d085      	beq.n	800877e <_dtoa_r+0x826>
 8008872:	4618      	mov	r0, r3
 8008874:	301c      	adds	r0, #28
 8008876:	e77d      	b.n	8008774 <_dtoa_r+0x81c>
 8008878:	40240000 	.word	0x40240000
 800887c:	9b01      	ldr	r3, [sp, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	dc38      	bgt.n	80088f4 <_dtoa_r+0x99c>
 8008882:	9b05      	ldr	r3, [sp, #20]
 8008884:	2b02      	cmp	r3, #2
 8008886:	dd35      	ble.n	80088f4 <_dtoa_r+0x99c>
 8008888:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800888c:	f1b9 0f00 	cmp.w	r9, #0
 8008890:	d10d      	bne.n	80088ae <_dtoa_r+0x956>
 8008892:	4631      	mov	r1, r6
 8008894:	464b      	mov	r3, r9
 8008896:	2205      	movs	r2, #5
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fd47 	bl	800932c <__multadd>
 800889e:	4601      	mov	r1, r0
 80088a0:	4606      	mov	r6, r0
 80088a2:	4658      	mov	r0, fp
 80088a4:	f000 ffa8 	bl	80097f8 <__mcmp>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	f73f adbd 	bgt.w	8008428 <_dtoa_r+0x4d0>
 80088ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b0:	9d00      	ldr	r5, [sp, #0]
 80088b2:	ea6f 0a03 	mvn.w	sl, r3
 80088b6:	f04f 0800 	mov.w	r8, #0
 80088ba:	4631      	mov	r1, r6
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 fd13 	bl	80092e8 <_Bfree>
 80088c2:	2f00      	cmp	r7, #0
 80088c4:	f43f aeb4 	beq.w	8008630 <_dtoa_r+0x6d8>
 80088c8:	f1b8 0f00 	cmp.w	r8, #0
 80088cc:	d005      	beq.n	80088da <_dtoa_r+0x982>
 80088ce:	45b8      	cmp	r8, r7
 80088d0:	d003      	beq.n	80088da <_dtoa_r+0x982>
 80088d2:	4641      	mov	r1, r8
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fd07 	bl	80092e8 <_Bfree>
 80088da:	4639      	mov	r1, r7
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 fd03 	bl	80092e8 <_Bfree>
 80088e2:	e6a5      	b.n	8008630 <_dtoa_r+0x6d8>
 80088e4:	2600      	movs	r6, #0
 80088e6:	4637      	mov	r7, r6
 80088e8:	e7e1      	b.n	80088ae <_dtoa_r+0x956>
 80088ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80088ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80088f0:	4637      	mov	r7, r6
 80088f2:	e599      	b.n	8008428 <_dtoa_r+0x4d0>
 80088f4:	9b08      	ldr	r3, [sp, #32]
 80088f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 80fd 	beq.w	8008afa <_dtoa_r+0xba2>
 8008900:	2d00      	cmp	r5, #0
 8008902:	dd05      	ble.n	8008910 <_dtoa_r+0x9b8>
 8008904:	4639      	mov	r1, r7
 8008906:	462a      	mov	r2, r5
 8008908:	4620      	mov	r0, r4
 800890a:	f000 ff09 	bl	8009720 <__lshift>
 800890e:	4607      	mov	r7, r0
 8008910:	9b06      	ldr	r3, [sp, #24]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d05c      	beq.n	80089d0 <_dtoa_r+0xa78>
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fca5 	bl	8009268 <_Balloc>
 800891e:	4605      	mov	r5, r0
 8008920:	b928      	cbnz	r0, 800892e <_dtoa_r+0x9d6>
 8008922:	4b80      	ldr	r3, [pc, #512]	; (8008b24 <_dtoa_r+0xbcc>)
 8008924:	4602      	mov	r2, r0
 8008926:	f240 21ea 	movw	r1, #746	; 0x2ea
 800892a:	f7ff bb2e 	b.w	8007f8a <_dtoa_r+0x32>
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	3202      	adds	r2, #2
 8008932:	0092      	lsls	r2, r2, #2
 8008934:	f107 010c 	add.w	r1, r7, #12
 8008938:	300c      	adds	r0, #12
 800893a:	f000 fc87 	bl	800924c <memcpy>
 800893e:	2201      	movs	r2, #1
 8008940:	4629      	mov	r1, r5
 8008942:	4620      	mov	r0, r4
 8008944:	f000 feec 	bl	8009720 <__lshift>
 8008948:	9b00      	ldr	r3, [sp, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	9b00      	ldr	r3, [sp, #0]
 8008950:	444b      	add	r3, r9
 8008952:	9307      	str	r3, [sp, #28]
 8008954:	9b02      	ldr	r3, [sp, #8]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	46b8      	mov	r8, r7
 800895c:	9306      	str	r3, [sp, #24]
 800895e:	4607      	mov	r7, r0
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	4631      	mov	r1, r6
 8008964:	3b01      	subs	r3, #1
 8008966:	4658      	mov	r0, fp
 8008968:	9302      	str	r3, [sp, #8]
 800896a:	f7ff fa69 	bl	8007e40 <quorem>
 800896e:	4603      	mov	r3, r0
 8008970:	3330      	adds	r3, #48	; 0x30
 8008972:	9004      	str	r0, [sp, #16]
 8008974:	4641      	mov	r1, r8
 8008976:	4658      	mov	r0, fp
 8008978:	9308      	str	r3, [sp, #32]
 800897a:	f000 ff3d 	bl	80097f8 <__mcmp>
 800897e:	463a      	mov	r2, r7
 8008980:	4681      	mov	r9, r0
 8008982:	4631      	mov	r1, r6
 8008984:	4620      	mov	r0, r4
 8008986:	f000 ff53 	bl	8009830 <__mdiff>
 800898a:	68c2      	ldr	r2, [r0, #12]
 800898c:	9b08      	ldr	r3, [sp, #32]
 800898e:	4605      	mov	r5, r0
 8008990:	bb02      	cbnz	r2, 80089d4 <_dtoa_r+0xa7c>
 8008992:	4601      	mov	r1, r0
 8008994:	4658      	mov	r0, fp
 8008996:	f000 ff2f 	bl	80097f8 <__mcmp>
 800899a:	9b08      	ldr	r3, [sp, #32]
 800899c:	4602      	mov	r2, r0
 800899e:	4629      	mov	r1, r5
 80089a0:	4620      	mov	r0, r4
 80089a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80089a6:	f000 fc9f 	bl	80092e8 <_Bfree>
 80089aa:	9b05      	ldr	r3, [sp, #20]
 80089ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ae:	9d01      	ldr	r5, [sp, #4]
 80089b0:	ea43 0102 	orr.w	r1, r3, r2
 80089b4:	9b06      	ldr	r3, [sp, #24]
 80089b6:	430b      	orrs	r3, r1
 80089b8:	9b08      	ldr	r3, [sp, #32]
 80089ba:	d10d      	bne.n	80089d8 <_dtoa_r+0xa80>
 80089bc:	2b39      	cmp	r3, #57	; 0x39
 80089be:	d029      	beq.n	8008a14 <_dtoa_r+0xabc>
 80089c0:	f1b9 0f00 	cmp.w	r9, #0
 80089c4:	dd01      	ble.n	80089ca <_dtoa_r+0xa72>
 80089c6:	9b04      	ldr	r3, [sp, #16]
 80089c8:	3331      	adds	r3, #49	; 0x31
 80089ca:	9a02      	ldr	r2, [sp, #8]
 80089cc:	7013      	strb	r3, [r2, #0]
 80089ce:	e774      	b.n	80088ba <_dtoa_r+0x962>
 80089d0:	4638      	mov	r0, r7
 80089d2:	e7b9      	b.n	8008948 <_dtoa_r+0x9f0>
 80089d4:	2201      	movs	r2, #1
 80089d6:	e7e2      	b.n	800899e <_dtoa_r+0xa46>
 80089d8:	f1b9 0f00 	cmp.w	r9, #0
 80089dc:	db06      	blt.n	80089ec <_dtoa_r+0xa94>
 80089de:	9905      	ldr	r1, [sp, #20]
 80089e0:	ea41 0909 	orr.w	r9, r1, r9
 80089e4:	9906      	ldr	r1, [sp, #24]
 80089e6:	ea59 0101 	orrs.w	r1, r9, r1
 80089ea:	d120      	bne.n	8008a2e <_dtoa_r+0xad6>
 80089ec:	2a00      	cmp	r2, #0
 80089ee:	ddec      	ble.n	80089ca <_dtoa_r+0xa72>
 80089f0:	4659      	mov	r1, fp
 80089f2:	2201      	movs	r2, #1
 80089f4:	4620      	mov	r0, r4
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	f000 fe92 	bl	8009720 <__lshift>
 80089fc:	4631      	mov	r1, r6
 80089fe:	4683      	mov	fp, r0
 8008a00:	f000 fefa 	bl	80097f8 <__mcmp>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	dc02      	bgt.n	8008a10 <_dtoa_r+0xab8>
 8008a0a:	d1de      	bne.n	80089ca <_dtoa_r+0xa72>
 8008a0c:	07da      	lsls	r2, r3, #31
 8008a0e:	d5dc      	bpl.n	80089ca <_dtoa_r+0xa72>
 8008a10:	2b39      	cmp	r3, #57	; 0x39
 8008a12:	d1d8      	bne.n	80089c6 <_dtoa_r+0xa6e>
 8008a14:	9a02      	ldr	r2, [sp, #8]
 8008a16:	2339      	movs	r3, #57	; 0x39
 8008a18:	7013      	strb	r3, [r2, #0]
 8008a1a:	462b      	mov	r3, r5
 8008a1c:	461d      	mov	r5, r3
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a24:	2a39      	cmp	r2, #57	; 0x39
 8008a26:	d050      	beq.n	8008aca <_dtoa_r+0xb72>
 8008a28:	3201      	adds	r2, #1
 8008a2a:	701a      	strb	r2, [r3, #0]
 8008a2c:	e745      	b.n	80088ba <_dtoa_r+0x962>
 8008a2e:	2a00      	cmp	r2, #0
 8008a30:	dd03      	ble.n	8008a3a <_dtoa_r+0xae2>
 8008a32:	2b39      	cmp	r3, #57	; 0x39
 8008a34:	d0ee      	beq.n	8008a14 <_dtoa_r+0xabc>
 8008a36:	3301      	adds	r3, #1
 8008a38:	e7c7      	b.n	80089ca <_dtoa_r+0xa72>
 8008a3a:	9a01      	ldr	r2, [sp, #4]
 8008a3c:	9907      	ldr	r1, [sp, #28]
 8008a3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a42:	428a      	cmp	r2, r1
 8008a44:	d02a      	beq.n	8008a9c <_dtoa_r+0xb44>
 8008a46:	4659      	mov	r1, fp
 8008a48:	2300      	movs	r3, #0
 8008a4a:	220a      	movs	r2, #10
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f000 fc6d 	bl	800932c <__multadd>
 8008a52:	45b8      	cmp	r8, r7
 8008a54:	4683      	mov	fp, r0
 8008a56:	f04f 0300 	mov.w	r3, #0
 8008a5a:	f04f 020a 	mov.w	r2, #10
 8008a5e:	4641      	mov	r1, r8
 8008a60:	4620      	mov	r0, r4
 8008a62:	d107      	bne.n	8008a74 <_dtoa_r+0xb1c>
 8008a64:	f000 fc62 	bl	800932c <__multadd>
 8008a68:	4680      	mov	r8, r0
 8008a6a:	4607      	mov	r7, r0
 8008a6c:	9b01      	ldr	r3, [sp, #4]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	9301      	str	r3, [sp, #4]
 8008a72:	e775      	b.n	8008960 <_dtoa_r+0xa08>
 8008a74:	f000 fc5a 	bl	800932c <__multadd>
 8008a78:	4639      	mov	r1, r7
 8008a7a:	4680      	mov	r8, r0
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	220a      	movs	r2, #10
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fc53 	bl	800932c <__multadd>
 8008a86:	4607      	mov	r7, r0
 8008a88:	e7f0      	b.n	8008a6c <_dtoa_r+0xb14>
 8008a8a:	f1b9 0f00 	cmp.w	r9, #0
 8008a8e:	9a00      	ldr	r2, [sp, #0]
 8008a90:	bfcc      	ite	gt
 8008a92:	464d      	movgt	r5, r9
 8008a94:	2501      	movle	r5, #1
 8008a96:	4415      	add	r5, r2
 8008a98:	f04f 0800 	mov.w	r8, #0
 8008a9c:	4659      	mov	r1, fp
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	f000 fe3c 	bl	8009720 <__lshift>
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4683      	mov	fp, r0
 8008aac:	f000 fea4 	bl	80097f8 <__mcmp>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	dcb2      	bgt.n	8008a1a <_dtoa_r+0xac2>
 8008ab4:	d102      	bne.n	8008abc <_dtoa_r+0xb64>
 8008ab6:	9b01      	ldr	r3, [sp, #4]
 8008ab8:	07db      	lsls	r3, r3, #31
 8008aba:	d4ae      	bmi.n	8008a1a <_dtoa_r+0xac2>
 8008abc:	462b      	mov	r3, r5
 8008abe:	461d      	mov	r5, r3
 8008ac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ac4:	2a30      	cmp	r2, #48	; 0x30
 8008ac6:	d0fa      	beq.n	8008abe <_dtoa_r+0xb66>
 8008ac8:	e6f7      	b.n	80088ba <_dtoa_r+0x962>
 8008aca:	9a00      	ldr	r2, [sp, #0]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d1a5      	bne.n	8008a1c <_dtoa_r+0xac4>
 8008ad0:	f10a 0a01 	add.w	sl, sl, #1
 8008ad4:	2331      	movs	r3, #49	; 0x31
 8008ad6:	e779      	b.n	80089cc <_dtoa_r+0xa74>
 8008ad8:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <_dtoa_r+0xbd0>)
 8008ada:	f7ff baaf 	b.w	800803c <_dtoa_r+0xe4>
 8008ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f47f aa86 	bne.w	8007ff2 <_dtoa_r+0x9a>
 8008ae6:	4b11      	ldr	r3, [pc, #68]	; (8008b2c <_dtoa_r+0xbd4>)
 8008ae8:	f7ff baa8 	b.w	800803c <_dtoa_r+0xe4>
 8008aec:	f1b9 0f00 	cmp.w	r9, #0
 8008af0:	dc03      	bgt.n	8008afa <_dtoa_r+0xba2>
 8008af2:	9b05      	ldr	r3, [sp, #20]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	f73f aec9 	bgt.w	800888c <_dtoa_r+0x934>
 8008afa:	9d00      	ldr	r5, [sp, #0]
 8008afc:	4631      	mov	r1, r6
 8008afe:	4658      	mov	r0, fp
 8008b00:	f7ff f99e 	bl	8007e40 <quorem>
 8008b04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008b08:	f805 3b01 	strb.w	r3, [r5], #1
 8008b0c:	9a00      	ldr	r2, [sp, #0]
 8008b0e:	1aaa      	subs	r2, r5, r2
 8008b10:	4591      	cmp	r9, r2
 8008b12:	ddba      	ble.n	8008a8a <_dtoa_r+0xb32>
 8008b14:	4659      	mov	r1, fp
 8008b16:	2300      	movs	r3, #0
 8008b18:	220a      	movs	r2, #10
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 fc06 	bl	800932c <__multadd>
 8008b20:	4683      	mov	fp, r0
 8008b22:	e7eb      	b.n	8008afc <_dtoa_r+0xba4>
 8008b24:	0800adb3 	.word	0x0800adb3
 8008b28:	0800acb8 	.word	0x0800acb8
 8008b2c:	0800ad30 	.word	0x0800ad30

08008b30 <rshift>:
 8008b30:	6903      	ldr	r3, [r0, #16]
 8008b32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b3e:	f100 0414 	add.w	r4, r0, #20
 8008b42:	dd45      	ble.n	8008bd0 <rshift+0xa0>
 8008b44:	f011 011f 	ands.w	r1, r1, #31
 8008b48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b50:	d10c      	bne.n	8008b6c <rshift+0x3c>
 8008b52:	f100 0710 	add.w	r7, r0, #16
 8008b56:	4629      	mov	r1, r5
 8008b58:	42b1      	cmp	r1, r6
 8008b5a:	d334      	bcc.n	8008bc6 <rshift+0x96>
 8008b5c:	1a9b      	subs	r3, r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	1eea      	subs	r2, r5, #3
 8008b62:	4296      	cmp	r6, r2
 8008b64:	bf38      	it	cc
 8008b66:	2300      	movcc	r3, #0
 8008b68:	4423      	add	r3, r4
 8008b6a:	e015      	b.n	8008b98 <rshift+0x68>
 8008b6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b70:	f1c1 0820 	rsb	r8, r1, #32
 8008b74:	40cf      	lsrs	r7, r1
 8008b76:	f105 0e04 	add.w	lr, r5, #4
 8008b7a:	46a1      	mov	r9, r4
 8008b7c:	4576      	cmp	r6, lr
 8008b7e:	46f4      	mov	ip, lr
 8008b80:	d815      	bhi.n	8008bae <rshift+0x7e>
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	009a      	lsls	r2, r3, #2
 8008b86:	3a04      	subs	r2, #4
 8008b88:	3501      	adds	r5, #1
 8008b8a:	42ae      	cmp	r6, r5
 8008b8c:	bf38      	it	cc
 8008b8e:	2200      	movcc	r2, #0
 8008b90:	18a3      	adds	r3, r4, r2
 8008b92:	50a7      	str	r7, [r4, r2]
 8008b94:	b107      	cbz	r7, 8008b98 <rshift+0x68>
 8008b96:	3304      	adds	r3, #4
 8008b98:	1b1a      	subs	r2, r3, r4
 8008b9a:	42a3      	cmp	r3, r4
 8008b9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ba0:	bf08      	it	eq
 8008ba2:	2300      	moveq	r3, #0
 8008ba4:	6102      	str	r2, [r0, #16]
 8008ba6:	bf08      	it	eq
 8008ba8:	6143      	streq	r3, [r0, #20]
 8008baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bae:	f8dc c000 	ldr.w	ip, [ip]
 8008bb2:	fa0c fc08 	lsl.w	ip, ip, r8
 8008bb6:	ea4c 0707 	orr.w	r7, ip, r7
 8008bba:	f849 7b04 	str.w	r7, [r9], #4
 8008bbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bc2:	40cf      	lsrs	r7, r1
 8008bc4:	e7da      	b.n	8008b7c <rshift+0x4c>
 8008bc6:	f851 cb04 	ldr.w	ip, [r1], #4
 8008bca:	f847 cf04 	str.w	ip, [r7, #4]!
 8008bce:	e7c3      	b.n	8008b58 <rshift+0x28>
 8008bd0:	4623      	mov	r3, r4
 8008bd2:	e7e1      	b.n	8008b98 <rshift+0x68>

08008bd4 <__hexdig_fun>:
 8008bd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008bd8:	2b09      	cmp	r3, #9
 8008bda:	d802      	bhi.n	8008be2 <__hexdig_fun+0xe>
 8008bdc:	3820      	subs	r0, #32
 8008bde:	b2c0      	uxtb	r0, r0
 8008be0:	4770      	bx	lr
 8008be2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008be6:	2b05      	cmp	r3, #5
 8008be8:	d801      	bhi.n	8008bee <__hexdig_fun+0x1a>
 8008bea:	3847      	subs	r0, #71	; 0x47
 8008bec:	e7f7      	b.n	8008bde <__hexdig_fun+0xa>
 8008bee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008bf2:	2b05      	cmp	r3, #5
 8008bf4:	d801      	bhi.n	8008bfa <__hexdig_fun+0x26>
 8008bf6:	3827      	subs	r0, #39	; 0x27
 8008bf8:	e7f1      	b.n	8008bde <__hexdig_fun+0xa>
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	4770      	bx	lr
	...

08008c00 <__gethex>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	ed2d 8b02 	vpush	{d8}
 8008c08:	b089      	sub	sp, #36	; 0x24
 8008c0a:	ee08 0a10 	vmov	s16, r0
 8008c0e:	9304      	str	r3, [sp, #16]
 8008c10:	4bbc      	ldr	r3, [pc, #752]	; (8008f04 <__gethex+0x304>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	4618      	mov	r0, r3
 8008c18:	468b      	mov	fp, r1
 8008c1a:	4690      	mov	r8, r2
 8008c1c:	f7f7 fad8 	bl	80001d0 <strlen>
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	f8db 2000 	ldr.w	r2, [fp]
 8008c26:	4403      	add	r3, r0
 8008c28:	4682      	mov	sl, r0
 8008c2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c2e:	9305      	str	r3, [sp, #20]
 8008c30:	1c93      	adds	r3, r2, #2
 8008c32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c3a:	32fe      	adds	r2, #254	; 0xfe
 8008c3c:	18d1      	adds	r1, r2, r3
 8008c3e:	461f      	mov	r7, r3
 8008c40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c44:	9100      	str	r1, [sp, #0]
 8008c46:	2830      	cmp	r0, #48	; 0x30
 8008c48:	d0f8      	beq.n	8008c3c <__gethex+0x3c>
 8008c4a:	f7ff ffc3 	bl	8008bd4 <__hexdig_fun>
 8008c4e:	4604      	mov	r4, r0
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d13a      	bne.n	8008cca <__gethex+0xca>
 8008c54:	9901      	ldr	r1, [sp, #4]
 8008c56:	4652      	mov	r2, sl
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7fe fa30 	bl	80070be <strncmp>
 8008c5e:	4605      	mov	r5, r0
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d168      	bne.n	8008d36 <__gethex+0x136>
 8008c64:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c68:	eb07 060a 	add.w	r6, r7, sl
 8008c6c:	f7ff ffb2 	bl	8008bd4 <__hexdig_fun>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d062      	beq.n	8008d3a <__gethex+0x13a>
 8008c74:	4633      	mov	r3, r6
 8008c76:	7818      	ldrb	r0, [r3, #0]
 8008c78:	2830      	cmp	r0, #48	; 0x30
 8008c7a:	461f      	mov	r7, r3
 8008c7c:	f103 0301 	add.w	r3, r3, #1
 8008c80:	d0f9      	beq.n	8008c76 <__gethex+0x76>
 8008c82:	f7ff ffa7 	bl	8008bd4 <__hexdig_fun>
 8008c86:	2301      	movs	r3, #1
 8008c88:	fab0 f480 	clz	r4, r0
 8008c8c:	0964      	lsrs	r4, r4, #5
 8008c8e:	4635      	mov	r5, r6
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	463a      	mov	r2, r7
 8008c94:	4616      	mov	r6, r2
 8008c96:	3201      	adds	r2, #1
 8008c98:	7830      	ldrb	r0, [r6, #0]
 8008c9a:	f7ff ff9b 	bl	8008bd4 <__hexdig_fun>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d1f8      	bne.n	8008c94 <__gethex+0x94>
 8008ca2:	9901      	ldr	r1, [sp, #4]
 8008ca4:	4652      	mov	r2, sl
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f7fe fa09 	bl	80070be <strncmp>
 8008cac:	b980      	cbnz	r0, 8008cd0 <__gethex+0xd0>
 8008cae:	b94d      	cbnz	r5, 8008cc4 <__gethex+0xc4>
 8008cb0:	eb06 050a 	add.w	r5, r6, sl
 8008cb4:	462a      	mov	r2, r5
 8008cb6:	4616      	mov	r6, r2
 8008cb8:	3201      	adds	r2, #1
 8008cba:	7830      	ldrb	r0, [r6, #0]
 8008cbc:	f7ff ff8a 	bl	8008bd4 <__hexdig_fun>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d1f8      	bne.n	8008cb6 <__gethex+0xb6>
 8008cc4:	1bad      	subs	r5, r5, r6
 8008cc6:	00ad      	lsls	r5, r5, #2
 8008cc8:	e004      	b.n	8008cd4 <__gethex+0xd4>
 8008cca:	2400      	movs	r4, #0
 8008ccc:	4625      	mov	r5, r4
 8008cce:	e7e0      	b.n	8008c92 <__gethex+0x92>
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	d1f7      	bne.n	8008cc4 <__gethex+0xc4>
 8008cd4:	7833      	ldrb	r3, [r6, #0]
 8008cd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008cda:	2b50      	cmp	r3, #80	; 0x50
 8008cdc:	d13b      	bne.n	8008d56 <__gethex+0x156>
 8008cde:	7873      	ldrb	r3, [r6, #1]
 8008ce0:	2b2b      	cmp	r3, #43	; 0x2b
 8008ce2:	d02c      	beq.n	8008d3e <__gethex+0x13e>
 8008ce4:	2b2d      	cmp	r3, #45	; 0x2d
 8008ce6:	d02e      	beq.n	8008d46 <__gethex+0x146>
 8008ce8:	1c71      	adds	r1, r6, #1
 8008cea:	f04f 0900 	mov.w	r9, #0
 8008cee:	7808      	ldrb	r0, [r1, #0]
 8008cf0:	f7ff ff70 	bl	8008bd4 <__hexdig_fun>
 8008cf4:	1e43      	subs	r3, r0, #1
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b18      	cmp	r3, #24
 8008cfa:	d82c      	bhi.n	8008d56 <__gethex+0x156>
 8008cfc:	f1a0 0210 	sub.w	r2, r0, #16
 8008d00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d04:	f7ff ff66 	bl	8008bd4 <__hexdig_fun>
 8008d08:	1e43      	subs	r3, r0, #1
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b18      	cmp	r3, #24
 8008d0e:	d91d      	bls.n	8008d4c <__gethex+0x14c>
 8008d10:	f1b9 0f00 	cmp.w	r9, #0
 8008d14:	d000      	beq.n	8008d18 <__gethex+0x118>
 8008d16:	4252      	negs	r2, r2
 8008d18:	4415      	add	r5, r2
 8008d1a:	f8cb 1000 	str.w	r1, [fp]
 8008d1e:	b1e4      	cbz	r4, 8008d5a <__gethex+0x15a>
 8008d20:	9b00      	ldr	r3, [sp, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	bf14      	ite	ne
 8008d26:	2700      	movne	r7, #0
 8008d28:	2706      	moveq	r7, #6
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	b009      	add	sp, #36	; 0x24
 8008d2e:	ecbd 8b02 	vpop	{d8}
 8008d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d36:	463e      	mov	r6, r7
 8008d38:	4625      	mov	r5, r4
 8008d3a:	2401      	movs	r4, #1
 8008d3c:	e7ca      	b.n	8008cd4 <__gethex+0xd4>
 8008d3e:	f04f 0900 	mov.w	r9, #0
 8008d42:	1cb1      	adds	r1, r6, #2
 8008d44:	e7d3      	b.n	8008cee <__gethex+0xee>
 8008d46:	f04f 0901 	mov.w	r9, #1
 8008d4a:	e7fa      	b.n	8008d42 <__gethex+0x142>
 8008d4c:	230a      	movs	r3, #10
 8008d4e:	fb03 0202 	mla	r2, r3, r2, r0
 8008d52:	3a10      	subs	r2, #16
 8008d54:	e7d4      	b.n	8008d00 <__gethex+0x100>
 8008d56:	4631      	mov	r1, r6
 8008d58:	e7df      	b.n	8008d1a <__gethex+0x11a>
 8008d5a:	1bf3      	subs	r3, r6, r7
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	4621      	mov	r1, r4
 8008d60:	2b07      	cmp	r3, #7
 8008d62:	dc0b      	bgt.n	8008d7c <__gethex+0x17c>
 8008d64:	ee18 0a10 	vmov	r0, s16
 8008d68:	f000 fa7e 	bl	8009268 <_Balloc>
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	b940      	cbnz	r0, 8008d82 <__gethex+0x182>
 8008d70:	4b65      	ldr	r3, [pc, #404]	; (8008f08 <__gethex+0x308>)
 8008d72:	4602      	mov	r2, r0
 8008d74:	21de      	movs	r1, #222	; 0xde
 8008d76:	4865      	ldr	r0, [pc, #404]	; (8008f0c <__gethex+0x30c>)
 8008d78:	f001 f972 	bl	800a060 <__assert_func>
 8008d7c:	3101      	adds	r1, #1
 8008d7e:	105b      	asrs	r3, r3, #1
 8008d80:	e7ee      	b.n	8008d60 <__gethex+0x160>
 8008d82:	f100 0914 	add.w	r9, r0, #20
 8008d86:	f04f 0b00 	mov.w	fp, #0
 8008d8a:	f1ca 0301 	rsb	r3, sl, #1
 8008d8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d92:	f8cd b000 	str.w	fp, [sp]
 8008d96:	9306      	str	r3, [sp, #24]
 8008d98:	42b7      	cmp	r7, r6
 8008d9a:	d340      	bcc.n	8008e1e <__gethex+0x21e>
 8008d9c:	9802      	ldr	r0, [sp, #8]
 8008d9e:	9b00      	ldr	r3, [sp, #0]
 8008da0:	f840 3b04 	str.w	r3, [r0], #4
 8008da4:	eba0 0009 	sub.w	r0, r0, r9
 8008da8:	1080      	asrs	r0, r0, #2
 8008daa:	0146      	lsls	r6, r0, #5
 8008dac:	6120      	str	r0, [r4, #16]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fb50 	bl	8009454 <__hi0bits>
 8008db4:	1a30      	subs	r0, r6, r0
 8008db6:	f8d8 6000 	ldr.w	r6, [r8]
 8008dba:	42b0      	cmp	r0, r6
 8008dbc:	dd63      	ble.n	8008e86 <__gethex+0x286>
 8008dbe:	1b87      	subs	r7, r0, r6
 8008dc0:	4639      	mov	r1, r7
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 feea 	bl	8009b9c <__any_on>
 8008dc8:	4682      	mov	sl, r0
 8008dca:	b1a8      	cbz	r0, 8008df8 <__gethex+0x1f8>
 8008dcc:	1e7b      	subs	r3, r7, #1
 8008dce:	1159      	asrs	r1, r3, #5
 8008dd0:	f003 021f 	and.w	r2, r3, #31
 8008dd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008dd8:	f04f 0a01 	mov.w	sl, #1
 8008ddc:	fa0a f202 	lsl.w	r2, sl, r2
 8008de0:	420a      	tst	r2, r1
 8008de2:	d009      	beq.n	8008df8 <__gethex+0x1f8>
 8008de4:	4553      	cmp	r3, sl
 8008de6:	dd05      	ble.n	8008df4 <__gethex+0x1f4>
 8008de8:	1eb9      	subs	r1, r7, #2
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 fed6 	bl	8009b9c <__any_on>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d145      	bne.n	8008e80 <__gethex+0x280>
 8008df4:	f04f 0a02 	mov.w	sl, #2
 8008df8:	4639      	mov	r1, r7
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f7ff fe98 	bl	8008b30 <rshift>
 8008e00:	443d      	add	r5, r7
 8008e02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e06:	42ab      	cmp	r3, r5
 8008e08:	da4c      	bge.n	8008ea4 <__gethex+0x2a4>
 8008e0a:	ee18 0a10 	vmov	r0, s16
 8008e0e:	4621      	mov	r1, r4
 8008e10:	f000 fa6a 	bl	80092e8 <_Bfree>
 8008e14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e16:	2300      	movs	r3, #0
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	27a3      	movs	r7, #163	; 0xa3
 8008e1c:	e785      	b.n	8008d2a <__gethex+0x12a>
 8008e1e:	1e73      	subs	r3, r6, #1
 8008e20:	9a05      	ldr	r2, [sp, #20]
 8008e22:	9303      	str	r3, [sp, #12]
 8008e24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d019      	beq.n	8008e60 <__gethex+0x260>
 8008e2c:	f1bb 0f20 	cmp.w	fp, #32
 8008e30:	d107      	bne.n	8008e42 <__gethex+0x242>
 8008e32:	9b02      	ldr	r3, [sp, #8]
 8008e34:	9a00      	ldr	r2, [sp, #0]
 8008e36:	f843 2b04 	str.w	r2, [r3], #4
 8008e3a:	9302      	str	r3, [sp, #8]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	469b      	mov	fp, r3
 8008e42:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e46:	f7ff fec5 	bl	8008bd4 <__hexdig_fun>
 8008e4a:	9b00      	ldr	r3, [sp, #0]
 8008e4c:	f000 000f 	and.w	r0, r0, #15
 8008e50:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e54:	4303      	orrs	r3, r0
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	f10b 0b04 	add.w	fp, fp, #4
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	e00d      	b.n	8008e7c <__gethex+0x27c>
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	9a06      	ldr	r2, [sp, #24]
 8008e64:	4413      	add	r3, r2
 8008e66:	42bb      	cmp	r3, r7
 8008e68:	d3e0      	bcc.n	8008e2c <__gethex+0x22c>
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	9901      	ldr	r1, [sp, #4]
 8008e6e:	9307      	str	r3, [sp, #28]
 8008e70:	4652      	mov	r2, sl
 8008e72:	f7fe f924 	bl	80070be <strncmp>
 8008e76:	9b07      	ldr	r3, [sp, #28]
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d1d7      	bne.n	8008e2c <__gethex+0x22c>
 8008e7c:	461e      	mov	r6, r3
 8008e7e:	e78b      	b.n	8008d98 <__gethex+0x198>
 8008e80:	f04f 0a03 	mov.w	sl, #3
 8008e84:	e7b8      	b.n	8008df8 <__gethex+0x1f8>
 8008e86:	da0a      	bge.n	8008e9e <__gethex+0x29e>
 8008e88:	1a37      	subs	r7, r6, r0
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	ee18 0a10 	vmov	r0, s16
 8008e90:	463a      	mov	r2, r7
 8008e92:	f000 fc45 	bl	8009720 <__lshift>
 8008e96:	1bed      	subs	r5, r5, r7
 8008e98:	4604      	mov	r4, r0
 8008e9a:	f100 0914 	add.w	r9, r0, #20
 8008e9e:	f04f 0a00 	mov.w	sl, #0
 8008ea2:	e7ae      	b.n	8008e02 <__gethex+0x202>
 8008ea4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008ea8:	42a8      	cmp	r0, r5
 8008eaa:	dd72      	ble.n	8008f92 <__gethex+0x392>
 8008eac:	1b45      	subs	r5, r0, r5
 8008eae:	42ae      	cmp	r6, r5
 8008eb0:	dc36      	bgt.n	8008f20 <__gethex+0x320>
 8008eb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d02a      	beq.n	8008f10 <__gethex+0x310>
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d02c      	beq.n	8008f18 <__gethex+0x318>
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d115      	bne.n	8008eee <__gethex+0x2ee>
 8008ec2:	42ae      	cmp	r6, r5
 8008ec4:	d113      	bne.n	8008eee <__gethex+0x2ee>
 8008ec6:	2e01      	cmp	r6, #1
 8008ec8:	d10b      	bne.n	8008ee2 <__gethex+0x2e2>
 8008eca:	9a04      	ldr	r2, [sp, #16]
 8008ecc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	6123      	str	r3, [r4, #16]
 8008ed6:	f8c9 3000 	str.w	r3, [r9]
 8008eda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008edc:	2762      	movs	r7, #98	; 0x62
 8008ede:	601c      	str	r4, [r3, #0]
 8008ee0:	e723      	b.n	8008d2a <__gethex+0x12a>
 8008ee2:	1e71      	subs	r1, r6, #1
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f000 fe59 	bl	8009b9c <__any_on>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d1ed      	bne.n	8008eca <__gethex+0x2ca>
 8008eee:	ee18 0a10 	vmov	r0, s16
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	f000 f9f8 	bl	80092e8 <_Bfree>
 8008ef8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008efa:	2300      	movs	r3, #0
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	2750      	movs	r7, #80	; 0x50
 8008f00:	e713      	b.n	8008d2a <__gethex+0x12a>
 8008f02:	bf00      	nop
 8008f04:	0800ae30 	.word	0x0800ae30
 8008f08:	0800adb3 	.word	0x0800adb3
 8008f0c:	0800adc4 	.word	0x0800adc4
 8008f10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1eb      	bne.n	8008eee <__gethex+0x2ee>
 8008f16:	e7d8      	b.n	8008eca <__gethex+0x2ca>
 8008f18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1d5      	bne.n	8008eca <__gethex+0x2ca>
 8008f1e:	e7e6      	b.n	8008eee <__gethex+0x2ee>
 8008f20:	1e6f      	subs	r7, r5, #1
 8008f22:	f1ba 0f00 	cmp.w	sl, #0
 8008f26:	d131      	bne.n	8008f8c <__gethex+0x38c>
 8008f28:	b127      	cbz	r7, 8008f34 <__gethex+0x334>
 8008f2a:	4639      	mov	r1, r7
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 fe35 	bl	8009b9c <__any_on>
 8008f32:	4682      	mov	sl, r0
 8008f34:	117b      	asrs	r3, r7, #5
 8008f36:	2101      	movs	r1, #1
 8008f38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f3c:	f007 071f 	and.w	r7, r7, #31
 8008f40:	fa01 f707 	lsl.w	r7, r1, r7
 8008f44:	421f      	tst	r7, r3
 8008f46:	4629      	mov	r1, r5
 8008f48:	4620      	mov	r0, r4
 8008f4a:	bf18      	it	ne
 8008f4c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f50:	1b76      	subs	r6, r6, r5
 8008f52:	f7ff fded 	bl	8008b30 <rshift>
 8008f56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f5a:	2702      	movs	r7, #2
 8008f5c:	f1ba 0f00 	cmp.w	sl, #0
 8008f60:	d048      	beq.n	8008ff4 <__gethex+0x3f4>
 8008f62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d015      	beq.n	8008f96 <__gethex+0x396>
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d017      	beq.n	8008f9e <__gethex+0x39e>
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d109      	bne.n	8008f86 <__gethex+0x386>
 8008f72:	f01a 0f02 	tst.w	sl, #2
 8008f76:	d006      	beq.n	8008f86 <__gethex+0x386>
 8008f78:	f8d9 0000 	ldr.w	r0, [r9]
 8008f7c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008f80:	f01a 0f01 	tst.w	sl, #1
 8008f84:	d10e      	bne.n	8008fa4 <__gethex+0x3a4>
 8008f86:	f047 0710 	orr.w	r7, r7, #16
 8008f8a:	e033      	b.n	8008ff4 <__gethex+0x3f4>
 8008f8c:	f04f 0a01 	mov.w	sl, #1
 8008f90:	e7d0      	b.n	8008f34 <__gethex+0x334>
 8008f92:	2701      	movs	r7, #1
 8008f94:	e7e2      	b.n	8008f5c <__gethex+0x35c>
 8008f96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f98:	f1c3 0301 	rsb	r3, r3, #1
 8008f9c:	9315      	str	r3, [sp, #84]	; 0x54
 8008f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d0f0      	beq.n	8008f86 <__gethex+0x386>
 8008fa4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008fa8:	f104 0314 	add.w	r3, r4, #20
 8008fac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008fb0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008fb4:	f04f 0c00 	mov.w	ip, #0
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fbe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008fc2:	d01c      	beq.n	8008ffe <__gethex+0x3fe>
 8008fc4:	3201      	adds	r2, #1
 8008fc6:	6002      	str	r2, [r0, #0]
 8008fc8:	2f02      	cmp	r7, #2
 8008fca:	f104 0314 	add.w	r3, r4, #20
 8008fce:	d13f      	bne.n	8009050 <__gethex+0x450>
 8008fd0:	f8d8 2000 	ldr.w	r2, [r8]
 8008fd4:	3a01      	subs	r2, #1
 8008fd6:	42b2      	cmp	r2, r6
 8008fd8:	d10a      	bne.n	8008ff0 <__gethex+0x3f0>
 8008fda:	1171      	asrs	r1, r6, #5
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fe2:	f006 061f 	and.w	r6, r6, #31
 8008fe6:	fa02 f606 	lsl.w	r6, r2, r6
 8008fea:	421e      	tst	r6, r3
 8008fec:	bf18      	it	ne
 8008fee:	4617      	movne	r7, r2
 8008ff0:	f047 0720 	orr.w	r7, r7, #32
 8008ff4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ff6:	601c      	str	r4, [r3, #0]
 8008ff8:	9b04      	ldr	r3, [sp, #16]
 8008ffa:	601d      	str	r5, [r3, #0]
 8008ffc:	e695      	b.n	8008d2a <__gethex+0x12a>
 8008ffe:	4299      	cmp	r1, r3
 8009000:	f843 cc04 	str.w	ip, [r3, #-4]
 8009004:	d8d8      	bhi.n	8008fb8 <__gethex+0x3b8>
 8009006:	68a3      	ldr	r3, [r4, #8]
 8009008:	459b      	cmp	fp, r3
 800900a:	db19      	blt.n	8009040 <__gethex+0x440>
 800900c:	6861      	ldr	r1, [r4, #4]
 800900e:	ee18 0a10 	vmov	r0, s16
 8009012:	3101      	adds	r1, #1
 8009014:	f000 f928 	bl	8009268 <_Balloc>
 8009018:	4681      	mov	r9, r0
 800901a:	b918      	cbnz	r0, 8009024 <__gethex+0x424>
 800901c:	4b1a      	ldr	r3, [pc, #104]	; (8009088 <__gethex+0x488>)
 800901e:	4602      	mov	r2, r0
 8009020:	2184      	movs	r1, #132	; 0x84
 8009022:	e6a8      	b.n	8008d76 <__gethex+0x176>
 8009024:	6922      	ldr	r2, [r4, #16]
 8009026:	3202      	adds	r2, #2
 8009028:	f104 010c 	add.w	r1, r4, #12
 800902c:	0092      	lsls	r2, r2, #2
 800902e:	300c      	adds	r0, #12
 8009030:	f000 f90c 	bl	800924c <memcpy>
 8009034:	4621      	mov	r1, r4
 8009036:	ee18 0a10 	vmov	r0, s16
 800903a:	f000 f955 	bl	80092e8 <_Bfree>
 800903e:	464c      	mov	r4, r9
 8009040:	6923      	ldr	r3, [r4, #16]
 8009042:	1c5a      	adds	r2, r3, #1
 8009044:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009048:	6122      	str	r2, [r4, #16]
 800904a:	2201      	movs	r2, #1
 800904c:	615a      	str	r2, [r3, #20]
 800904e:	e7bb      	b.n	8008fc8 <__gethex+0x3c8>
 8009050:	6922      	ldr	r2, [r4, #16]
 8009052:	455a      	cmp	r2, fp
 8009054:	dd0b      	ble.n	800906e <__gethex+0x46e>
 8009056:	2101      	movs	r1, #1
 8009058:	4620      	mov	r0, r4
 800905a:	f7ff fd69 	bl	8008b30 <rshift>
 800905e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009062:	3501      	adds	r5, #1
 8009064:	42ab      	cmp	r3, r5
 8009066:	f6ff aed0 	blt.w	8008e0a <__gethex+0x20a>
 800906a:	2701      	movs	r7, #1
 800906c:	e7c0      	b.n	8008ff0 <__gethex+0x3f0>
 800906e:	f016 061f 	ands.w	r6, r6, #31
 8009072:	d0fa      	beq.n	800906a <__gethex+0x46a>
 8009074:	449a      	add	sl, r3
 8009076:	f1c6 0620 	rsb	r6, r6, #32
 800907a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800907e:	f000 f9e9 	bl	8009454 <__hi0bits>
 8009082:	42b0      	cmp	r0, r6
 8009084:	dbe7      	blt.n	8009056 <__gethex+0x456>
 8009086:	e7f0      	b.n	800906a <__gethex+0x46a>
 8009088:	0800adb3 	.word	0x0800adb3

0800908c <L_shift>:
 800908c:	f1c2 0208 	rsb	r2, r2, #8
 8009090:	0092      	lsls	r2, r2, #2
 8009092:	b570      	push	{r4, r5, r6, lr}
 8009094:	f1c2 0620 	rsb	r6, r2, #32
 8009098:	6843      	ldr	r3, [r0, #4]
 800909a:	6804      	ldr	r4, [r0, #0]
 800909c:	fa03 f506 	lsl.w	r5, r3, r6
 80090a0:	432c      	orrs	r4, r5
 80090a2:	40d3      	lsrs	r3, r2
 80090a4:	6004      	str	r4, [r0, #0]
 80090a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80090aa:	4288      	cmp	r0, r1
 80090ac:	d3f4      	bcc.n	8009098 <L_shift+0xc>
 80090ae:	bd70      	pop	{r4, r5, r6, pc}

080090b0 <__match>:
 80090b0:	b530      	push	{r4, r5, lr}
 80090b2:	6803      	ldr	r3, [r0, #0]
 80090b4:	3301      	adds	r3, #1
 80090b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ba:	b914      	cbnz	r4, 80090c2 <__match+0x12>
 80090bc:	6003      	str	r3, [r0, #0]
 80090be:	2001      	movs	r0, #1
 80090c0:	bd30      	pop	{r4, r5, pc}
 80090c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090ca:	2d19      	cmp	r5, #25
 80090cc:	bf98      	it	ls
 80090ce:	3220      	addls	r2, #32
 80090d0:	42a2      	cmp	r2, r4
 80090d2:	d0f0      	beq.n	80090b6 <__match+0x6>
 80090d4:	2000      	movs	r0, #0
 80090d6:	e7f3      	b.n	80090c0 <__match+0x10>

080090d8 <__hexnan>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	680b      	ldr	r3, [r1, #0]
 80090de:	6801      	ldr	r1, [r0, #0]
 80090e0:	115e      	asrs	r6, r3, #5
 80090e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80090e6:	f013 031f 	ands.w	r3, r3, #31
 80090ea:	b087      	sub	sp, #28
 80090ec:	bf18      	it	ne
 80090ee:	3604      	addne	r6, #4
 80090f0:	2500      	movs	r5, #0
 80090f2:	1f37      	subs	r7, r6, #4
 80090f4:	4682      	mov	sl, r0
 80090f6:	4690      	mov	r8, r2
 80090f8:	9301      	str	r3, [sp, #4]
 80090fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80090fe:	46b9      	mov	r9, r7
 8009100:	463c      	mov	r4, r7
 8009102:	9502      	str	r5, [sp, #8]
 8009104:	46ab      	mov	fp, r5
 8009106:	784a      	ldrb	r2, [r1, #1]
 8009108:	1c4b      	adds	r3, r1, #1
 800910a:	9303      	str	r3, [sp, #12]
 800910c:	b342      	cbz	r2, 8009160 <__hexnan+0x88>
 800910e:	4610      	mov	r0, r2
 8009110:	9105      	str	r1, [sp, #20]
 8009112:	9204      	str	r2, [sp, #16]
 8009114:	f7ff fd5e 	bl	8008bd4 <__hexdig_fun>
 8009118:	2800      	cmp	r0, #0
 800911a:	d14f      	bne.n	80091bc <__hexnan+0xe4>
 800911c:	9a04      	ldr	r2, [sp, #16]
 800911e:	9905      	ldr	r1, [sp, #20]
 8009120:	2a20      	cmp	r2, #32
 8009122:	d818      	bhi.n	8009156 <__hexnan+0x7e>
 8009124:	9b02      	ldr	r3, [sp, #8]
 8009126:	459b      	cmp	fp, r3
 8009128:	dd13      	ble.n	8009152 <__hexnan+0x7a>
 800912a:	454c      	cmp	r4, r9
 800912c:	d206      	bcs.n	800913c <__hexnan+0x64>
 800912e:	2d07      	cmp	r5, #7
 8009130:	dc04      	bgt.n	800913c <__hexnan+0x64>
 8009132:	462a      	mov	r2, r5
 8009134:	4649      	mov	r1, r9
 8009136:	4620      	mov	r0, r4
 8009138:	f7ff ffa8 	bl	800908c <L_shift>
 800913c:	4544      	cmp	r4, r8
 800913e:	d950      	bls.n	80091e2 <__hexnan+0x10a>
 8009140:	2300      	movs	r3, #0
 8009142:	f1a4 0904 	sub.w	r9, r4, #4
 8009146:	f844 3c04 	str.w	r3, [r4, #-4]
 800914a:	f8cd b008 	str.w	fp, [sp, #8]
 800914e:	464c      	mov	r4, r9
 8009150:	461d      	mov	r5, r3
 8009152:	9903      	ldr	r1, [sp, #12]
 8009154:	e7d7      	b.n	8009106 <__hexnan+0x2e>
 8009156:	2a29      	cmp	r2, #41	; 0x29
 8009158:	d156      	bne.n	8009208 <__hexnan+0x130>
 800915a:	3102      	adds	r1, #2
 800915c:	f8ca 1000 	str.w	r1, [sl]
 8009160:	f1bb 0f00 	cmp.w	fp, #0
 8009164:	d050      	beq.n	8009208 <__hexnan+0x130>
 8009166:	454c      	cmp	r4, r9
 8009168:	d206      	bcs.n	8009178 <__hexnan+0xa0>
 800916a:	2d07      	cmp	r5, #7
 800916c:	dc04      	bgt.n	8009178 <__hexnan+0xa0>
 800916e:	462a      	mov	r2, r5
 8009170:	4649      	mov	r1, r9
 8009172:	4620      	mov	r0, r4
 8009174:	f7ff ff8a 	bl	800908c <L_shift>
 8009178:	4544      	cmp	r4, r8
 800917a:	d934      	bls.n	80091e6 <__hexnan+0x10e>
 800917c:	f1a8 0204 	sub.w	r2, r8, #4
 8009180:	4623      	mov	r3, r4
 8009182:	f853 1b04 	ldr.w	r1, [r3], #4
 8009186:	f842 1f04 	str.w	r1, [r2, #4]!
 800918a:	429f      	cmp	r7, r3
 800918c:	d2f9      	bcs.n	8009182 <__hexnan+0xaa>
 800918e:	1b3b      	subs	r3, r7, r4
 8009190:	f023 0303 	bic.w	r3, r3, #3
 8009194:	3304      	adds	r3, #4
 8009196:	3401      	adds	r4, #1
 8009198:	3e03      	subs	r6, #3
 800919a:	42b4      	cmp	r4, r6
 800919c:	bf88      	it	hi
 800919e:	2304      	movhi	r3, #4
 80091a0:	4443      	add	r3, r8
 80091a2:	2200      	movs	r2, #0
 80091a4:	f843 2b04 	str.w	r2, [r3], #4
 80091a8:	429f      	cmp	r7, r3
 80091aa:	d2fb      	bcs.n	80091a4 <__hexnan+0xcc>
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	b91b      	cbnz	r3, 80091b8 <__hexnan+0xe0>
 80091b0:	4547      	cmp	r7, r8
 80091b2:	d127      	bne.n	8009204 <__hexnan+0x12c>
 80091b4:	2301      	movs	r3, #1
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	2005      	movs	r0, #5
 80091ba:	e026      	b.n	800920a <__hexnan+0x132>
 80091bc:	3501      	adds	r5, #1
 80091be:	2d08      	cmp	r5, #8
 80091c0:	f10b 0b01 	add.w	fp, fp, #1
 80091c4:	dd06      	ble.n	80091d4 <__hexnan+0xfc>
 80091c6:	4544      	cmp	r4, r8
 80091c8:	d9c3      	bls.n	8009152 <__hexnan+0x7a>
 80091ca:	2300      	movs	r3, #0
 80091cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80091d0:	2501      	movs	r5, #1
 80091d2:	3c04      	subs	r4, #4
 80091d4:	6822      	ldr	r2, [r4, #0]
 80091d6:	f000 000f 	and.w	r0, r0, #15
 80091da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80091de:	6022      	str	r2, [r4, #0]
 80091e0:	e7b7      	b.n	8009152 <__hexnan+0x7a>
 80091e2:	2508      	movs	r5, #8
 80091e4:	e7b5      	b.n	8009152 <__hexnan+0x7a>
 80091e6:	9b01      	ldr	r3, [sp, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0df      	beq.n	80091ac <__hexnan+0xd4>
 80091ec:	f04f 32ff 	mov.w	r2, #4294967295
 80091f0:	f1c3 0320 	rsb	r3, r3, #32
 80091f4:	fa22 f303 	lsr.w	r3, r2, r3
 80091f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80091fc:	401a      	ands	r2, r3
 80091fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8009202:	e7d3      	b.n	80091ac <__hexnan+0xd4>
 8009204:	3f04      	subs	r7, #4
 8009206:	e7d1      	b.n	80091ac <__hexnan+0xd4>
 8009208:	2004      	movs	r0, #4
 800920a:	b007      	add	sp, #28
 800920c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009210 <_localeconv_r>:
 8009210:	4800      	ldr	r0, [pc, #0]	; (8009214 <_localeconv_r+0x4>)
 8009212:	4770      	bx	lr
 8009214:	200001b8 	.word	0x200001b8

08009218 <malloc>:
 8009218:	4b02      	ldr	r3, [pc, #8]	; (8009224 <malloc+0xc>)
 800921a:	4601      	mov	r1, r0
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	f000 bd3d 	b.w	8009c9c <_malloc_r>
 8009222:	bf00      	nop
 8009224:	20000060 	.word	0x20000060

08009228 <__ascii_mbtowc>:
 8009228:	b082      	sub	sp, #8
 800922a:	b901      	cbnz	r1, 800922e <__ascii_mbtowc+0x6>
 800922c:	a901      	add	r1, sp, #4
 800922e:	b142      	cbz	r2, 8009242 <__ascii_mbtowc+0x1a>
 8009230:	b14b      	cbz	r3, 8009246 <__ascii_mbtowc+0x1e>
 8009232:	7813      	ldrb	r3, [r2, #0]
 8009234:	600b      	str	r3, [r1, #0]
 8009236:	7812      	ldrb	r2, [r2, #0]
 8009238:	1e10      	subs	r0, r2, #0
 800923a:	bf18      	it	ne
 800923c:	2001      	movne	r0, #1
 800923e:	b002      	add	sp, #8
 8009240:	4770      	bx	lr
 8009242:	4610      	mov	r0, r2
 8009244:	e7fb      	b.n	800923e <__ascii_mbtowc+0x16>
 8009246:	f06f 0001 	mvn.w	r0, #1
 800924a:	e7f8      	b.n	800923e <__ascii_mbtowc+0x16>

0800924c <memcpy>:
 800924c:	440a      	add	r2, r1
 800924e:	4291      	cmp	r1, r2
 8009250:	f100 33ff 	add.w	r3, r0, #4294967295
 8009254:	d100      	bne.n	8009258 <memcpy+0xc>
 8009256:	4770      	bx	lr
 8009258:	b510      	push	{r4, lr}
 800925a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800925e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009262:	4291      	cmp	r1, r2
 8009264:	d1f9      	bne.n	800925a <memcpy+0xe>
 8009266:	bd10      	pop	{r4, pc}

08009268 <_Balloc>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800926c:	4604      	mov	r4, r0
 800926e:	460d      	mov	r5, r1
 8009270:	b976      	cbnz	r6, 8009290 <_Balloc+0x28>
 8009272:	2010      	movs	r0, #16
 8009274:	f7ff ffd0 	bl	8009218 <malloc>
 8009278:	4602      	mov	r2, r0
 800927a:	6260      	str	r0, [r4, #36]	; 0x24
 800927c:	b920      	cbnz	r0, 8009288 <_Balloc+0x20>
 800927e:	4b18      	ldr	r3, [pc, #96]	; (80092e0 <_Balloc+0x78>)
 8009280:	4818      	ldr	r0, [pc, #96]	; (80092e4 <_Balloc+0x7c>)
 8009282:	2166      	movs	r1, #102	; 0x66
 8009284:	f000 feec 	bl	800a060 <__assert_func>
 8009288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800928c:	6006      	str	r6, [r0, #0]
 800928e:	60c6      	str	r6, [r0, #12]
 8009290:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009292:	68f3      	ldr	r3, [r6, #12]
 8009294:	b183      	cbz	r3, 80092b8 <_Balloc+0x50>
 8009296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800929e:	b9b8      	cbnz	r0, 80092d0 <_Balloc+0x68>
 80092a0:	2101      	movs	r1, #1
 80092a2:	fa01 f605 	lsl.w	r6, r1, r5
 80092a6:	1d72      	adds	r2, r6, #5
 80092a8:	0092      	lsls	r2, r2, #2
 80092aa:	4620      	mov	r0, r4
 80092ac:	f000 fc97 	bl	8009bde <_calloc_r>
 80092b0:	b160      	cbz	r0, 80092cc <_Balloc+0x64>
 80092b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092b6:	e00e      	b.n	80092d6 <_Balloc+0x6e>
 80092b8:	2221      	movs	r2, #33	; 0x21
 80092ba:	2104      	movs	r1, #4
 80092bc:	4620      	mov	r0, r4
 80092be:	f000 fc8e 	bl	8009bde <_calloc_r>
 80092c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092c4:	60f0      	str	r0, [r6, #12]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e4      	bne.n	8009296 <_Balloc+0x2e>
 80092cc:	2000      	movs	r0, #0
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	6802      	ldr	r2, [r0, #0]
 80092d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092d6:	2300      	movs	r3, #0
 80092d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092dc:	e7f7      	b.n	80092ce <_Balloc+0x66>
 80092de:	bf00      	nop
 80092e0:	0800ad3d 	.word	0x0800ad3d
 80092e4:	0800ae44 	.word	0x0800ae44

080092e8 <_Bfree>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092ec:	4605      	mov	r5, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	b976      	cbnz	r6, 8009310 <_Bfree+0x28>
 80092f2:	2010      	movs	r0, #16
 80092f4:	f7ff ff90 	bl	8009218 <malloc>
 80092f8:	4602      	mov	r2, r0
 80092fa:	6268      	str	r0, [r5, #36]	; 0x24
 80092fc:	b920      	cbnz	r0, 8009308 <_Bfree+0x20>
 80092fe:	4b09      	ldr	r3, [pc, #36]	; (8009324 <_Bfree+0x3c>)
 8009300:	4809      	ldr	r0, [pc, #36]	; (8009328 <_Bfree+0x40>)
 8009302:	218a      	movs	r1, #138	; 0x8a
 8009304:	f000 feac 	bl	800a060 <__assert_func>
 8009308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800930c:	6006      	str	r6, [r0, #0]
 800930e:	60c6      	str	r6, [r0, #12]
 8009310:	b13c      	cbz	r4, 8009322 <_Bfree+0x3a>
 8009312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009314:	6862      	ldr	r2, [r4, #4]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800931c:	6021      	str	r1, [r4, #0]
 800931e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009322:	bd70      	pop	{r4, r5, r6, pc}
 8009324:	0800ad3d 	.word	0x0800ad3d
 8009328:	0800ae44 	.word	0x0800ae44

0800932c <__multadd>:
 800932c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009330:	690e      	ldr	r6, [r1, #16]
 8009332:	4607      	mov	r7, r0
 8009334:	4698      	mov	r8, r3
 8009336:	460c      	mov	r4, r1
 8009338:	f101 0014 	add.w	r0, r1, #20
 800933c:	2300      	movs	r3, #0
 800933e:	6805      	ldr	r5, [r0, #0]
 8009340:	b2a9      	uxth	r1, r5
 8009342:	fb02 8101 	mla	r1, r2, r1, r8
 8009346:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800934a:	0c2d      	lsrs	r5, r5, #16
 800934c:	fb02 c505 	mla	r5, r2, r5, ip
 8009350:	b289      	uxth	r1, r1
 8009352:	3301      	adds	r3, #1
 8009354:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009358:	429e      	cmp	r6, r3
 800935a:	f840 1b04 	str.w	r1, [r0], #4
 800935e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009362:	dcec      	bgt.n	800933e <__multadd+0x12>
 8009364:	f1b8 0f00 	cmp.w	r8, #0
 8009368:	d022      	beq.n	80093b0 <__multadd+0x84>
 800936a:	68a3      	ldr	r3, [r4, #8]
 800936c:	42b3      	cmp	r3, r6
 800936e:	dc19      	bgt.n	80093a4 <__multadd+0x78>
 8009370:	6861      	ldr	r1, [r4, #4]
 8009372:	4638      	mov	r0, r7
 8009374:	3101      	adds	r1, #1
 8009376:	f7ff ff77 	bl	8009268 <_Balloc>
 800937a:	4605      	mov	r5, r0
 800937c:	b928      	cbnz	r0, 800938a <__multadd+0x5e>
 800937e:	4602      	mov	r2, r0
 8009380:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <__multadd+0x8c>)
 8009382:	480e      	ldr	r0, [pc, #56]	; (80093bc <__multadd+0x90>)
 8009384:	21b5      	movs	r1, #181	; 0xb5
 8009386:	f000 fe6b 	bl	800a060 <__assert_func>
 800938a:	6922      	ldr	r2, [r4, #16]
 800938c:	3202      	adds	r2, #2
 800938e:	f104 010c 	add.w	r1, r4, #12
 8009392:	0092      	lsls	r2, r2, #2
 8009394:	300c      	adds	r0, #12
 8009396:	f7ff ff59 	bl	800924c <memcpy>
 800939a:	4621      	mov	r1, r4
 800939c:	4638      	mov	r0, r7
 800939e:	f7ff ffa3 	bl	80092e8 <_Bfree>
 80093a2:	462c      	mov	r4, r5
 80093a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80093a8:	3601      	adds	r6, #1
 80093aa:	f8c3 8014 	str.w	r8, [r3, #20]
 80093ae:	6126      	str	r6, [r4, #16]
 80093b0:	4620      	mov	r0, r4
 80093b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b6:	bf00      	nop
 80093b8:	0800adb3 	.word	0x0800adb3
 80093bc:	0800ae44 	.word	0x0800ae44

080093c0 <__s2b>:
 80093c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093c4:	460c      	mov	r4, r1
 80093c6:	4615      	mov	r5, r2
 80093c8:	461f      	mov	r7, r3
 80093ca:	2209      	movs	r2, #9
 80093cc:	3308      	adds	r3, #8
 80093ce:	4606      	mov	r6, r0
 80093d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80093d4:	2100      	movs	r1, #0
 80093d6:	2201      	movs	r2, #1
 80093d8:	429a      	cmp	r2, r3
 80093da:	db09      	blt.n	80093f0 <__s2b+0x30>
 80093dc:	4630      	mov	r0, r6
 80093de:	f7ff ff43 	bl	8009268 <_Balloc>
 80093e2:	b940      	cbnz	r0, 80093f6 <__s2b+0x36>
 80093e4:	4602      	mov	r2, r0
 80093e6:	4b19      	ldr	r3, [pc, #100]	; (800944c <__s2b+0x8c>)
 80093e8:	4819      	ldr	r0, [pc, #100]	; (8009450 <__s2b+0x90>)
 80093ea:	21ce      	movs	r1, #206	; 0xce
 80093ec:	f000 fe38 	bl	800a060 <__assert_func>
 80093f0:	0052      	lsls	r2, r2, #1
 80093f2:	3101      	adds	r1, #1
 80093f4:	e7f0      	b.n	80093d8 <__s2b+0x18>
 80093f6:	9b08      	ldr	r3, [sp, #32]
 80093f8:	6143      	str	r3, [r0, #20]
 80093fa:	2d09      	cmp	r5, #9
 80093fc:	f04f 0301 	mov.w	r3, #1
 8009400:	6103      	str	r3, [r0, #16]
 8009402:	dd16      	ble.n	8009432 <__s2b+0x72>
 8009404:	f104 0909 	add.w	r9, r4, #9
 8009408:	46c8      	mov	r8, r9
 800940a:	442c      	add	r4, r5
 800940c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009410:	4601      	mov	r1, r0
 8009412:	3b30      	subs	r3, #48	; 0x30
 8009414:	220a      	movs	r2, #10
 8009416:	4630      	mov	r0, r6
 8009418:	f7ff ff88 	bl	800932c <__multadd>
 800941c:	45a0      	cmp	r8, r4
 800941e:	d1f5      	bne.n	800940c <__s2b+0x4c>
 8009420:	f1a5 0408 	sub.w	r4, r5, #8
 8009424:	444c      	add	r4, r9
 8009426:	1b2d      	subs	r5, r5, r4
 8009428:	1963      	adds	r3, r4, r5
 800942a:	42bb      	cmp	r3, r7
 800942c:	db04      	blt.n	8009438 <__s2b+0x78>
 800942e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009432:	340a      	adds	r4, #10
 8009434:	2509      	movs	r5, #9
 8009436:	e7f6      	b.n	8009426 <__s2b+0x66>
 8009438:	f814 3b01 	ldrb.w	r3, [r4], #1
 800943c:	4601      	mov	r1, r0
 800943e:	3b30      	subs	r3, #48	; 0x30
 8009440:	220a      	movs	r2, #10
 8009442:	4630      	mov	r0, r6
 8009444:	f7ff ff72 	bl	800932c <__multadd>
 8009448:	e7ee      	b.n	8009428 <__s2b+0x68>
 800944a:	bf00      	nop
 800944c:	0800adb3 	.word	0x0800adb3
 8009450:	0800ae44 	.word	0x0800ae44

08009454 <__hi0bits>:
 8009454:	0c03      	lsrs	r3, r0, #16
 8009456:	041b      	lsls	r3, r3, #16
 8009458:	b9d3      	cbnz	r3, 8009490 <__hi0bits+0x3c>
 800945a:	0400      	lsls	r0, r0, #16
 800945c:	2310      	movs	r3, #16
 800945e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009462:	bf04      	itt	eq
 8009464:	0200      	lsleq	r0, r0, #8
 8009466:	3308      	addeq	r3, #8
 8009468:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800946c:	bf04      	itt	eq
 800946e:	0100      	lsleq	r0, r0, #4
 8009470:	3304      	addeq	r3, #4
 8009472:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009476:	bf04      	itt	eq
 8009478:	0080      	lsleq	r0, r0, #2
 800947a:	3302      	addeq	r3, #2
 800947c:	2800      	cmp	r0, #0
 800947e:	db05      	blt.n	800948c <__hi0bits+0x38>
 8009480:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009484:	f103 0301 	add.w	r3, r3, #1
 8009488:	bf08      	it	eq
 800948a:	2320      	moveq	r3, #32
 800948c:	4618      	mov	r0, r3
 800948e:	4770      	bx	lr
 8009490:	2300      	movs	r3, #0
 8009492:	e7e4      	b.n	800945e <__hi0bits+0xa>

08009494 <__lo0bits>:
 8009494:	6803      	ldr	r3, [r0, #0]
 8009496:	f013 0207 	ands.w	r2, r3, #7
 800949a:	4601      	mov	r1, r0
 800949c:	d00b      	beq.n	80094b6 <__lo0bits+0x22>
 800949e:	07da      	lsls	r2, r3, #31
 80094a0:	d424      	bmi.n	80094ec <__lo0bits+0x58>
 80094a2:	0798      	lsls	r0, r3, #30
 80094a4:	bf49      	itett	mi
 80094a6:	085b      	lsrmi	r3, r3, #1
 80094a8:	089b      	lsrpl	r3, r3, #2
 80094aa:	2001      	movmi	r0, #1
 80094ac:	600b      	strmi	r3, [r1, #0]
 80094ae:	bf5c      	itt	pl
 80094b0:	600b      	strpl	r3, [r1, #0]
 80094b2:	2002      	movpl	r0, #2
 80094b4:	4770      	bx	lr
 80094b6:	b298      	uxth	r0, r3
 80094b8:	b9b0      	cbnz	r0, 80094e8 <__lo0bits+0x54>
 80094ba:	0c1b      	lsrs	r3, r3, #16
 80094bc:	2010      	movs	r0, #16
 80094be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094c2:	bf04      	itt	eq
 80094c4:	0a1b      	lsreq	r3, r3, #8
 80094c6:	3008      	addeq	r0, #8
 80094c8:	071a      	lsls	r2, r3, #28
 80094ca:	bf04      	itt	eq
 80094cc:	091b      	lsreq	r3, r3, #4
 80094ce:	3004      	addeq	r0, #4
 80094d0:	079a      	lsls	r2, r3, #30
 80094d2:	bf04      	itt	eq
 80094d4:	089b      	lsreq	r3, r3, #2
 80094d6:	3002      	addeq	r0, #2
 80094d8:	07da      	lsls	r2, r3, #31
 80094da:	d403      	bmi.n	80094e4 <__lo0bits+0x50>
 80094dc:	085b      	lsrs	r3, r3, #1
 80094de:	f100 0001 	add.w	r0, r0, #1
 80094e2:	d005      	beq.n	80094f0 <__lo0bits+0x5c>
 80094e4:	600b      	str	r3, [r1, #0]
 80094e6:	4770      	bx	lr
 80094e8:	4610      	mov	r0, r2
 80094ea:	e7e8      	b.n	80094be <__lo0bits+0x2a>
 80094ec:	2000      	movs	r0, #0
 80094ee:	4770      	bx	lr
 80094f0:	2020      	movs	r0, #32
 80094f2:	4770      	bx	lr

080094f4 <__i2b>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	460c      	mov	r4, r1
 80094f8:	2101      	movs	r1, #1
 80094fa:	f7ff feb5 	bl	8009268 <_Balloc>
 80094fe:	4602      	mov	r2, r0
 8009500:	b928      	cbnz	r0, 800950e <__i2b+0x1a>
 8009502:	4b05      	ldr	r3, [pc, #20]	; (8009518 <__i2b+0x24>)
 8009504:	4805      	ldr	r0, [pc, #20]	; (800951c <__i2b+0x28>)
 8009506:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800950a:	f000 fda9 	bl	800a060 <__assert_func>
 800950e:	2301      	movs	r3, #1
 8009510:	6144      	str	r4, [r0, #20]
 8009512:	6103      	str	r3, [r0, #16]
 8009514:	bd10      	pop	{r4, pc}
 8009516:	bf00      	nop
 8009518:	0800adb3 	.word	0x0800adb3
 800951c:	0800ae44 	.word	0x0800ae44

08009520 <__multiply>:
 8009520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	4614      	mov	r4, r2
 8009526:	690a      	ldr	r2, [r1, #16]
 8009528:	6923      	ldr	r3, [r4, #16]
 800952a:	429a      	cmp	r2, r3
 800952c:	bfb8      	it	lt
 800952e:	460b      	movlt	r3, r1
 8009530:	460d      	mov	r5, r1
 8009532:	bfbc      	itt	lt
 8009534:	4625      	movlt	r5, r4
 8009536:	461c      	movlt	r4, r3
 8009538:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800953c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009540:	68ab      	ldr	r3, [r5, #8]
 8009542:	6869      	ldr	r1, [r5, #4]
 8009544:	eb0a 0709 	add.w	r7, sl, r9
 8009548:	42bb      	cmp	r3, r7
 800954a:	b085      	sub	sp, #20
 800954c:	bfb8      	it	lt
 800954e:	3101      	addlt	r1, #1
 8009550:	f7ff fe8a 	bl	8009268 <_Balloc>
 8009554:	b930      	cbnz	r0, 8009564 <__multiply+0x44>
 8009556:	4602      	mov	r2, r0
 8009558:	4b42      	ldr	r3, [pc, #264]	; (8009664 <__multiply+0x144>)
 800955a:	4843      	ldr	r0, [pc, #268]	; (8009668 <__multiply+0x148>)
 800955c:	f240 115d 	movw	r1, #349	; 0x15d
 8009560:	f000 fd7e 	bl	800a060 <__assert_func>
 8009564:	f100 0614 	add.w	r6, r0, #20
 8009568:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800956c:	4633      	mov	r3, r6
 800956e:	2200      	movs	r2, #0
 8009570:	4543      	cmp	r3, r8
 8009572:	d31e      	bcc.n	80095b2 <__multiply+0x92>
 8009574:	f105 0c14 	add.w	ip, r5, #20
 8009578:	f104 0314 	add.w	r3, r4, #20
 800957c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009580:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009584:	9202      	str	r2, [sp, #8]
 8009586:	ebac 0205 	sub.w	r2, ip, r5
 800958a:	3a15      	subs	r2, #21
 800958c:	f022 0203 	bic.w	r2, r2, #3
 8009590:	3204      	adds	r2, #4
 8009592:	f105 0115 	add.w	r1, r5, #21
 8009596:	458c      	cmp	ip, r1
 8009598:	bf38      	it	cc
 800959a:	2204      	movcc	r2, #4
 800959c:	9201      	str	r2, [sp, #4]
 800959e:	9a02      	ldr	r2, [sp, #8]
 80095a0:	9303      	str	r3, [sp, #12]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d808      	bhi.n	80095b8 <__multiply+0x98>
 80095a6:	2f00      	cmp	r7, #0
 80095a8:	dc55      	bgt.n	8009656 <__multiply+0x136>
 80095aa:	6107      	str	r7, [r0, #16]
 80095ac:	b005      	add	sp, #20
 80095ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b2:	f843 2b04 	str.w	r2, [r3], #4
 80095b6:	e7db      	b.n	8009570 <__multiply+0x50>
 80095b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80095bc:	f1ba 0f00 	cmp.w	sl, #0
 80095c0:	d020      	beq.n	8009604 <__multiply+0xe4>
 80095c2:	f105 0e14 	add.w	lr, r5, #20
 80095c6:	46b1      	mov	r9, r6
 80095c8:	2200      	movs	r2, #0
 80095ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 80095ce:	f8d9 b000 	ldr.w	fp, [r9]
 80095d2:	b2a1      	uxth	r1, r4
 80095d4:	fa1f fb8b 	uxth.w	fp, fp
 80095d8:	fb0a b101 	mla	r1, sl, r1, fp
 80095dc:	4411      	add	r1, r2
 80095de:	f8d9 2000 	ldr.w	r2, [r9]
 80095e2:	0c24      	lsrs	r4, r4, #16
 80095e4:	0c12      	lsrs	r2, r2, #16
 80095e6:	fb0a 2404 	mla	r4, sl, r4, r2
 80095ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80095ee:	b289      	uxth	r1, r1
 80095f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80095f4:	45f4      	cmp	ip, lr
 80095f6:	f849 1b04 	str.w	r1, [r9], #4
 80095fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80095fe:	d8e4      	bhi.n	80095ca <__multiply+0xaa>
 8009600:	9901      	ldr	r1, [sp, #4]
 8009602:	5072      	str	r2, [r6, r1]
 8009604:	9a03      	ldr	r2, [sp, #12]
 8009606:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800960a:	3304      	adds	r3, #4
 800960c:	f1b9 0f00 	cmp.w	r9, #0
 8009610:	d01f      	beq.n	8009652 <__multiply+0x132>
 8009612:	6834      	ldr	r4, [r6, #0]
 8009614:	f105 0114 	add.w	r1, r5, #20
 8009618:	46b6      	mov	lr, r6
 800961a:	f04f 0a00 	mov.w	sl, #0
 800961e:	880a      	ldrh	r2, [r1, #0]
 8009620:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009624:	fb09 b202 	mla	r2, r9, r2, fp
 8009628:	4492      	add	sl, r2
 800962a:	b2a4      	uxth	r4, r4
 800962c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009630:	f84e 4b04 	str.w	r4, [lr], #4
 8009634:	f851 4b04 	ldr.w	r4, [r1], #4
 8009638:	f8be 2000 	ldrh.w	r2, [lr]
 800963c:	0c24      	lsrs	r4, r4, #16
 800963e:	fb09 2404 	mla	r4, r9, r4, r2
 8009642:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009646:	458c      	cmp	ip, r1
 8009648:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800964c:	d8e7      	bhi.n	800961e <__multiply+0xfe>
 800964e:	9a01      	ldr	r2, [sp, #4]
 8009650:	50b4      	str	r4, [r6, r2]
 8009652:	3604      	adds	r6, #4
 8009654:	e7a3      	b.n	800959e <__multiply+0x7e>
 8009656:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1a5      	bne.n	80095aa <__multiply+0x8a>
 800965e:	3f01      	subs	r7, #1
 8009660:	e7a1      	b.n	80095a6 <__multiply+0x86>
 8009662:	bf00      	nop
 8009664:	0800adb3 	.word	0x0800adb3
 8009668:	0800ae44 	.word	0x0800ae44

0800966c <__pow5mult>:
 800966c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009670:	4615      	mov	r5, r2
 8009672:	f012 0203 	ands.w	r2, r2, #3
 8009676:	4606      	mov	r6, r0
 8009678:	460f      	mov	r7, r1
 800967a:	d007      	beq.n	800968c <__pow5mult+0x20>
 800967c:	4c25      	ldr	r4, [pc, #148]	; (8009714 <__pow5mult+0xa8>)
 800967e:	3a01      	subs	r2, #1
 8009680:	2300      	movs	r3, #0
 8009682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009686:	f7ff fe51 	bl	800932c <__multadd>
 800968a:	4607      	mov	r7, r0
 800968c:	10ad      	asrs	r5, r5, #2
 800968e:	d03d      	beq.n	800970c <__pow5mult+0xa0>
 8009690:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009692:	b97c      	cbnz	r4, 80096b4 <__pow5mult+0x48>
 8009694:	2010      	movs	r0, #16
 8009696:	f7ff fdbf 	bl	8009218 <malloc>
 800969a:	4602      	mov	r2, r0
 800969c:	6270      	str	r0, [r6, #36]	; 0x24
 800969e:	b928      	cbnz	r0, 80096ac <__pow5mult+0x40>
 80096a0:	4b1d      	ldr	r3, [pc, #116]	; (8009718 <__pow5mult+0xac>)
 80096a2:	481e      	ldr	r0, [pc, #120]	; (800971c <__pow5mult+0xb0>)
 80096a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096a8:	f000 fcda 	bl	800a060 <__assert_func>
 80096ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096b0:	6004      	str	r4, [r0, #0]
 80096b2:	60c4      	str	r4, [r0, #12]
 80096b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096bc:	b94c      	cbnz	r4, 80096d2 <__pow5mult+0x66>
 80096be:	f240 2171 	movw	r1, #625	; 0x271
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff ff16 	bl	80094f4 <__i2b>
 80096c8:	2300      	movs	r3, #0
 80096ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80096ce:	4604      	mov	r4, r0
 80096d0:	6003      	str	r3, [r0, #0]
 80096d2:	f04f 0900 	mov.w	r9, #0
 80096d6:	07eb      	lsls	r3, r5, #31
 80096d8:	d50a      	bpl.n	80096f0 <__pow5mult+0x84>
 80096da:	4639      	mov	r1, r7
 80096dc:	4622      	mov	r2, r4
 80096de:	4630      	mov	r0, r6
 80096e0:	f7ff ff1e 	bl	8009520 <__multiply>
 80096e4:	4639      	mov	r1, r7
 80096e6:	4680      	mov	r8, r0
 80096e8:	4630      	mov	r0, r6
 80096ea:	f7ff fdfd 	bl	80092e8 <_Bfree>
 80096ee:	4647      	mov	r7, r8
 80096f0:	106d      	asrs	r5, r5, #1
 80096f2:	d00b      	beq.n	800970c <__pow5mult+0xa0>
 80096f4:	6820      	ldr	r0, [r4, #0]
 80096f6:	b938      	cbnz	r0, 8009708 <__pow5mult+0x9c>
 80096f8:	4622      	mov	r2, r4
 80096fa:	4621      	mov	r1, r4
 80096fc:	4630      	mov	r0, r6
 80096fe:	f7ff ff0f 	bl	8009520 <__multiply>
 8009702:	6020      	str	r0, [r4, #0]
 8009704:	f8c0 9000 	str.w	r9, [r0]
 8009708:	4604      	mov	r4, r0
 800970a:	e7e4      	b.n	80096d6 <__pow5mult+0x6a>
 800970c:	4638      	mov	r0, r7
 800970e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009712:	bf00      	nop
 8009714:	0800af98 	.word	0x0800af98
 8009718:	0800ad3d 	.word	0x0800ad3d
 800971c:	0800ae44 	.word	0x0800ae44

08009720 <__lshift>:
 8009720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009724:	460c      	mov	r4, r1
 8009726:	6849      	ldr	r1, [r1, #4]
 8009728:	6923      	ldr	r3, [r4, #16]
 800972a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800972e:	68a3      	ldr	r3, [r4, #8]
 8009730:	4607      	mov	r7, r0
 8009732:	4691      	mov	r9, r2
 8009734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009738:	f108 0601 	add.w	r6, r8, #1
 800973c:	42b3      	cmp	r3, r6
 800973e:	db0b      	blt.n	8009758 <__lshift+0x38>
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff fd91 	bl	8009268 <_Balloc>
 8009746:	4605      	mov	r5, r0
 8009748:	b948      	cbnz	r0, 800975e <__lshift+0x3e>
 800974a:	4602      	mov	r2, r0
 800974c:	4b28      	ldr	r3, [pc, #160]	; (80097f0 <__lshift+0xd0>)
 800974e:	4829      	ldr	r0, [pc, #164]	; (80097f4 <__lshift+0xd4>)
 8009750:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009754:	f000 fc84 	bl	800a060 <__assert_func>
 8009758:	3101      	adds	r1, #1
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	e7ee      	b.n	800973c <__lshift+0x1c>
 800975e:	2300      	movs	r3, #0
 8009760:	f100 0114 	add.w	r1, r0, #20
 8009764:	f100 0210 	add.w	r2, r0, #16
 8009768:	4618      	mov	r0, r3
 800976a:	4553      	cmp	r3, sl
 800976c:	db33      	blt.n	80097d6 <__lshift+0xb6>
 800976e:	6920      	ldr	r0, [r4, #16]
 8009770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009774:	f104 0314 	add.w	r3, r4, #20
 8009778:	f019 091f 	ands.w	r9, r9, #31
 800977c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009780:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009784:	d02b      	beq.n	80097de <__lshift+0xbe>
 8009786:	f1c9 0e20 	rsb	lr, r9, #32
 800978a:	468a      	mov	sl, r1
 800978c:	2200      	movs	r2, #0
 800978e:	6818      	ldr	r0, [r3, #0]
 8009790:	fa00 f009 	lsl.w	r0, r0, r9
 8009794:	4302      	orrs	r2, r0
 8009796:	f84a 2b04 	str.w	r2, [sl], #4
 800979a:	f853 2b04 	ldr.w	r2, [r3], #4
 800979e:	459c      	cmp	ip, r3
 80097a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80097a4:	d8f3      	bhi.n	800978e <__lshift+0x6e>
 80097a6:	ebac 0304 	sub.w	r3, ip, r4
 80097aa:	3b15      	subs	r3, #21
 80097ac:	f023 0303 	bic.w	r3, r3, #3
 80097b0:	3304      	adds	r3, #4
 80097b2:	f104 0015 	add.w	r0, r4, #21
 80097b6:	4584      	cmp	ip, r0
 80097b8:	bf38      	it	cc
 80097ba:	2304      	movcc	r3, #4
 80097bc:	50ca      	str	r2, [r1, r3]
 80097be:	b10a      	cbz	r2, 80097c4 <__lshift+0xa4>
 80097c0:	f108 0602 	add.w	r6, r8, #2
 80097c4:	3e01      	subs	r6, #1
 80097c6:	4638      	mov	r0, r7
 80097c8:	612e      	str	r6, [r5, #16]
 80097ca:	4621      	mov	r1, r4
 80097cc:	f7ff fd8c 	bl	80092e8 <_Bfree>
 80097d0:	4628      	mov	r0, r5
 80097d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80097da:	3301      	adds	r3, #1
 80097dc:	e7c5      	b.n	800976a <__lshift+0x4a>
 80097de:	3904      	subs	r1, #4
 80097e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80097e8:	459c      	cmp	ip, r3
 80097ea:	d8f9      	bhi.n	80097e0 <__lshift+0xc0>
 80097ec:	e7ea      	b.n	80097c4 <__lshift+0xa4>
 80097ee:	bf00      	nop
 80097f0:	0800adb3 	.word	0x0800adb3
 80097f4:	0800ae44 	.word	0x0800ae44

080097f8 <__mcmp>:
 80097f8:	b530      	push	{r4, r5, lr}
 80097fa:	6902      	ldr	r2, [r0, #16]
 80097fc:	690c      	ldr	r4, [r1, #16]
 80097fe:	1b12      	subs	r2, r2, r4
 8009800:	d10e      	bne.n	8009820 <__mcmp+0x28>
 8009802:	f100 0314 	add.w	r3, r0, #20
 8009806:	3114      	adds	r1, #20
 8009808:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800980c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009810:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009814:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009818:	42a5      	cmp	r5, r4
 800981a:	d003      	beq.n	8009824 <__mcmp+0x2c>
 800981c:	d305      	bcc.n	800982a <__mcmp+0x32>
 800981e:	2201      	movs	r2, #1
 8009820:	4610      	mov	r0, r2
 8009822:	bd30      	pop	{r4, r5, pc}
 8009824:	4283      	cmp	r3, r0
 8009826:	d3f3      	bcc.n	8009810 <__mcmp+0x18>
 8009828:	e7fa      	b.n	8009820 <__mcmp+0x28>
 800982a:	f04f 32ff 	mov.w	r2, #4294967295
 800982e:	e7f7      	b.n	8009820 <__mcmp+0x28>

08009830 <__mdiff>:
 8009830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	460c      	mov	r4, r1
 8009836:	4606      	mov	r6, r0
 8009838:	4611      	mov	r1, r2
 800983a:	4620      	mov	r0, r4
 800983c:	4617      	mov	r7, r2
 800983e:	f7ff ffdb 	bl	80097f8 <__mcmp>
 8009842:	1e05      	subs	r5, r0, #0
 8009844:	d110      	bne.n	8009868 <__mdiff+0x38>
 8009846:	4629      	mov	r1, r5
 8009848:	4630      	mov	r0, r6
 800984a:	f7ff fd0d 	bl	8009268 <_Balloc>
 800984e:	b930      	cbnz	r0, 800985e <__mdiff+0x2e>
 8009850:	4b39      	ldr	r3, [pc, #228]	; (8009938 <__mdiff+0x108>)
 8009852:	4602      	mov	r2, r0
 8009854:	f240 2132 	movw	r1, #562	; 0x232
 8009858:	4838      	ldr	r0, [pc, #224]	; (800993c <__mdiff+0x10c>)
 800985a:	f000 fc01 	bl	800a060 <__assert_func>
 800985e:	2301      	movs	r3, #1
 8009860:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009868:	bfa4      	itt	ge
 800986a:	463b      	movge	r3, r7
 800986c:	4627      	movge	r7, r4
 800986e:	4630      	mov	r0, r6
 8009870:	6879      	ldr	r1, [r7, #4]
 8009872:	bfa6      	itte	ge
 8009874:	461c      	movge	r4, r3
 8009876:	2500      	movge	r5, #0
 8009878:	2501      	movlt	r5, #1
 800987a:	f7ff fcf5 	bl	8009268 <_Balloc>
 800987e:	b920      	cbnz	r0, 800988a <__mdiff+0x5a>
 8009880:	4b2d      	ldr	r3, [pc, #180]	; (8009938 <__mdiff+0x108>)
 8009882:	4602      	mov	r2, r0
 8009884:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009888:	e7e6      	b.n	8009858 <__mdiff+0x28>
 800988a:	693e      	ldr	r6, [r7, #16]
 800988c:	60c5      	str	r5, [r0, #12]
 800988e:	6925      	ldr	r5, [r4, #16]
 8009890:	f107 0114 	add.w	r1, r7, #20
 8009894:	f104 0914 	add.w	r9, r4, #20
 8009898:	f100 0e14 	add.w	lr, r0, #20
 800989c:	f107 0210 	add.w	r2, r7, #16
 80098a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80098a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80098a8:	46f2      	mov	sl, lr
 80098aa:	2700      	movs	r7, #0
 80098ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80098b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098b4:	fa1f f883 	uxth.w	r8, r3
 80098b8:	fa17 f78b 	uxtah	r7, r7, fp
 80098bc:	0c1b      	lsrs	r3, r3, #16
 80098be:	eba7 0808 	sub.w	r8, r7, r8
 80098c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098ca:	fa1f f888 	uxth.w	r8, r8
 80098ce:	141f      	asrs	r7, r3, #16
 80098d0:	454d      	cmp	r5, r9
 80098d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098d6:	f84a 3b04 	str.w	r3, [sl], #4
 80098da:	d8e7      	bhi.n	80098ac <__mdiff+0x7c>
 80098dc:	1b2b      	subs	r3, r5, r4
 80098de:	3b15      	subs	r3, #21
 80098e0:	f023 0303 	bic.w	r3, r3, #3
 80098e4:	3304      	adds	r3, #4
 80098e6:	3415      	adds	r4, #21
 80098e8:	42a5      	cmp	r5, r4
 80098ea:	bf38      	it	cc
 80098ec:	2304      	movcc	r3, #4
 80098ee:	4419      	add	r1, r3
 80098f0:	4473      	add	r3, lr
 80098f2:	469e      	mov	lr, r3
 80098f4:	460d      	mov	r5, r1
 80098f6:	4565      	cmp	r5, ip
 80098f8:	d30e      	bcc.n	8009918 <__mdiff+0xe8>
 80098fa:	f10c 0203 	add.w	r2, ip, #3
 80098fe:	1a52      	subs	r2, r2, r1
 8009900:	f022 0203 	bic.w	r2, r2, #3
 8009904:	3903      	subs	r1, #3
 8009906:	458c      	cmp	ip, r1
 8009908:	bf38      	it	cc
 800990a:	2200      	movcc	r2, #0
 800990c:	441a      	add	r2, r3
 800990e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009912:	b17b      	cbz	r3, 8009934 <__mdiff+0x104>
 8009914:	6106      	str	r6, [r0, #16]
 8009916:	e7a5      	b.n	8009864 <__mdiff+0x34>
 8009918:	f855 8b04 	ldr.w	r8, [r5], #4
 800991c:	fa17 f488 	uxtah	r4, r7, r8
 8009920:	1422      	asrs	r2, r4, #16
 8009922:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009926:	b2a4      	uxth	r4, r4
 8009928:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800992c:	f84e 4b04 	str.w	r4, [lr], #4
 8009930:	1417      	asrs	r7, r2, #16
 8009932:	e7e0      	b.n	80098f6 <__mdiff+0xc6>
 8009934:	3e01      	subs	r6, #1
 8009936:	e7ea      	b.n	800990e <__mdiff+0xde>
 8009938:	0800adb3 	.word	0x0800adb3
 800993c:	0800ae44 	.word	0x0800ae44

08009940 <__ulp>:
 8009940:	b082      	sub	sp, #8
 8009942:	ed8d 0b00 	vstr	d0, [sp]
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	4912      	ldr	r1, [pc, #72]	; (8009994 <__ulp+0x54>)
 800994a:	4019      	ands	r1, r3
 800994c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009950:	2900      	cmp	r1, #0
 8009952:	dd05      	ble.n	8009960 <__ulp+0x20>
 8009954:	2200      	movs	r2, #0
 8009956:	460b      	mov	r3, r1
 8009958:	ec43 2b10 	vmov	d0, r2, r3
 800995c:	b002      	add	sp, #8
 800995e:	4770      	bx	lr
 8009960:	4249      	negs	r1, r1
 8009962:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009966:	ea4f 5021 	mov.w	r0, r1, asr #20
 800996a:	f04f 0200 	mov.w	r2, #0
 800996e:	f04f 0300 	mov.w	r3, #0
 8009972:	da04      	bge.n	800997e <__ulp+0x3e>
 8009974:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009978:	fa41 f300 	asr.w	r3, r1, r0
 800997c:	e7ec      	b.n	8009958 <__ulp+0x18>
 800997e:	f1a0 0114 	sub.w	r1, r0, #20
 8009982:	291e      	cmp	r1, #30
 8009984:	bfda      	itte	le
 8009986:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800998a:	fa20 f101 	lsrle.w	r1, r0, r1
 800998e:	2101      	movgt	r1, #1
 8009990:	460a      	mov	r2, r1
 8009992:	e7e1      	b.n	8009958 <__ulp+0x18>
 8009994:	7ff00000 	.word	0x7ff00000

08009998 <__b2d>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	6905      	ldr	r5, [r0, #16]
 800999c:	f100 0714 	add.w	r7, r0, #20
 80099a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80099a4:	1f2e      	subs	r6, r5, #4
 80099a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80099aa:	4620      	mov	r0, r4
 80099ac:	f7ff fd52 	bl	8009454 <__hi0bits>
 80099b0:	f1c0 0320 	rsb	r3, r0, #32
 80099b4:	280a      	cmp	r0, #10
 80099b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a34 <__b2d+0x9c>
 80099ba:	600b      	str	r3, [r1, #0]
 80099bc:	dc14      	bgt.n	80099e8 <__b2d+0x50>
 80099be:	f1c0 0e0b 	rsb	lr, r0, #11
 80099c2:	fa24 f10e 	lsr.w	r1, r4, lr
 80099c6:	42b7      	cmp	r7, r6
 80099c8:	ea41 030c 	orr.w	r3, r1, ip
 80099cc:	bf34      	ite	cc
 80099ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099d2:	2100      	movcs	r1, #0
 80099d4:	3015      	adds	r0, #21
 80099d6:	fa04 f000 	lsl.w	r0, r4, r0
 80099da:	fa21 f10e 	lsr.w	r1, r1, lr
 80099de:	ea40 0201 	orr.w	r2, r0, r1
 80099e2:	ec43 2b10 	vmov	d0, r2, r3
 80099e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099e8:	42b7      	cmp	r7, r6
 80099ea:	bf3a      	itte	cc
 80099ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80099f4:	2100      	movcs	r1, #0
 80099f6:	380b      	subs	r0, #11
 80099f8:	d017      	beq.n	8009a2a <__b2d+0x92>
 80099fa:	f1c0 0c20 	rsb	ip, r0, #32
 80099fe:	fa04 f500 	lsl.w	r5, r4, r0
 8009a02:	42be      	cmp	r6, r7
 8009a04:	fa21 f40c 	lsr.w	r4, r1, ip
 8009a08:	ea45 0504 	orr.w	r5, r5, r4
 8009a0c:	bf8c      	ite	hi
 8009a0e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a12:	2400      	movls	r4, #0
 8009a14:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009a18:	fa01 f000 	lsl.w	r0, r1, r0
 8009a1c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a24:	ea40 0204 	orr.w	r2, r0, r4
 8009a28:	e7db      	b.n	80099e2 <__b2d+0x4a>
 8009a2a:	ea44 030c 	orr.w	r3, r4, ip
 8009a2e:	460a      	mov	r2, r1
 8009a30:	e7d7      	b.n	80099e2 <__b2d+0x4a>
 8009a32:	bf00      	nop
 8009a34:	3ff00000 	.word	0x3ff00000

08009a38 <__d2b>:
 8009a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a3c:	4689      	mov	r9, r1
 8009a3e:	2101      	movs	r1, #1
 8009a40:	ec57 6b10 	vmov	r6, r7, d0
 8009a44:	4690      	mov	r8, r2
 8009a46:	f7ff fc0f 	bl	8009268 <_Balloc>
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	b930      	cbnz	r0, 8009a5c <__d2b+0x24>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	4b25      	ldr	r3, [pc, #148]	; (8009ae8 <__d2b+0xb0>)
 8009a52:	4826      	ldr	r0, [pc, #152]	; (8009aec <__d2b+0xb4>)
 8009a54:	f240 310a 	movw	r1, #778	; 0x30a
 8009a58:	f000 fb02 	bl	800a060 <__assert_func>
 8009a5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a64:	bb35      	cbnz	r5, 8009ab4 <__d2b+0x7c>
 8009a66:	2e00      	cmp	r6, #0
 8009a68:	9301      	str	r3, [sp, #4]
 8009a6a:	d028      	beq.n	8009abe <__d2b+0x86>
 8009a6c:	4668      	mov	r0, sp
 8009a6e:	9600      	str	r6, [sp, #0]
 8009a70:	f7ff fd10 	bl	8009494 <__lo0bits>
 8009a74:	9900      	ldr	r1, [sp, #0]
 8009a76:	b300      	cbz	r0, 8009aba <__d2b+0x82>
 8009a78:	9a01      	ldr	r2, [sp, #4]
 8009a7a:	f1c0 0320 	rsb	r3, r0, #32
 8009a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a82:	430b      	orrs	r3, r1
 8009a84:	40c2      	lsrs	r2, r0
 8009a86:	6163      	str	r3, [r4, #20]
 8009a88:	9201      	str	r2, [sp, #4]
 8009a8a:	9b01      	ldr	r3, [sp, #4]
 8009a8c:	61a3      	str	r3, [r4, #24]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	bf14      	ite	ne
 8009a92:	2202      	movne	r2, #2
 8009a94:	2201      	moveq	r2, #1
 8009a96:	6122      	str	r2, [r4, #16]
 8009a98:	b1d5      	cbz	r5, 8009ad0 <__d2b+0x98>
 8009a9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a9e:	4405      	add	r5, r0
 8009aa0:	f8c9 5000 	str.w	r5, [r9]
 8009aa4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009aa8:	f8c8 0000 	str.w	r0, [r8]
 8009aac:	4620      	mov	r0, r4
 8009aae:	b003      	add	sp, #12
 8009ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ab8:	e7d5      	b.n	8009a66 <__d2b+0x2e>
 8009aba:	6161      	str	r1, [r4, #20]
 8009abc:	e7e5      	b.n	8009a8a <__d2b+0x52>
 8009abe:	a801      	add	r0, sp, #4
 8009ac0:	f7ff fce8 	bl	8009494 <__lo0bits>
 8009ac4:	9b01      	ldr	r3, [sp, #4]
 8009ac6:	6163      	str	r3, [r4, #20]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	6122      	str	r2, [r4, #16]
 8009acc:	3020      	adds	r0, #32
 8009ace:	e7e3      	b.n	8009a98 <__d2b+0x60>
 8009ad0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ad4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ad8:	f8c9 0000 	str.w	r0, [r9]
 8009adc:	6918      	ldr	r0, [r3, #16]
 8009ade:	f7ff fcb9 	bl	8009454 <__hi0bits>
 8009ae2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ae6:	e7df      	b.n	8009aa8 <__d2b+0x70>
 8009ae8:	0800adb3 	.word	0x0800adb3
 8009aec:	0800ae44 	.word	0x0800ae44

08009af0 <__ratio>:
 8009af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af4:	4688      	mov	r8, r1
 8009af6:	4669      	mov	r1, sp
 8009af8:	4681      	mov	r9, r0
 8009afa:	f7ff ff4d 	bl	8009998 <__b2d>
 8009afe:	a901      	add	r1, sp, #4
 8009b00:	4640      	mov	r0, r8
 8009b02:	ec55 4b10 	vmov	r4, r5, d0
 8009b06:	f7ff ff47 	bl	8009998 <__b2d>
 8009b0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b12:	eba3 0c02 	sub.w	ip, r3, r2
 8009b16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b1a:	1a9b      	subs	r3, r3, r2
 8009b1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b20:	ec51 0b10 	vmov	r0, r1, d0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bfd6      	itet	le
 8009b28:	460a      	movle	r2, r1
 8009b2a:	462a      	movgt	r2, r5
 8009b2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b30:	468b      	mov	fp, r1
 8009b32:	462f      	mov	r7, r5
 8009b34:	bfd4      	ite	le
 8009b36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b3e:	4620      	mov	r0, r4
 8009b40:	ee10 2a10 	vmov	r2, s0
 8009b44:	465b      	mov	r3, fp
 8009b46:	4639      	mov	r1, r7
 8009b48:	f7f6 fe80 	bl	800084c <__aeabi_ddiv>
 8009b4c:	ec41 0b10 	vmov	d0, r0, r1
 8009b50:	b003      	add	sp, #12
 8009b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b56 <__copybits>:
 8009b56:	3901      	subs	r1, #1
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	1149      	asrs	r1, r1, #5
 8009b5c:	6914      	ldr	r4, [r2, #16]
 8009b5e:	3101      	adds	r1, #1
 8009b60:	f102 0314 	add.w	r3, r2, #20
 8009b64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b6c:	1f05      	subs	r5, r0, #4
 8009b6e:	42a3      	cmp	r3, r4
 8009b70:	d30c      	bcc.n	8009b8c <__copybits+0x36>
 8009b72:	1aa3      	subs	r3, r4, r2
 8009b74:	3b11      	subs	r3, #17
 8009b76:	f023 0303 	bic.w	r3, r3, #3
 8009b7a:	3211      	adds	r2, #17
 8009b7c:	42a2      	cmp	r2, r4
 8009b7e:	bf88      	it	hi
 8009b80:	2300      	movhi	r3, #0
 8009b82:	4418      	add	r0, r3
 8009b84:	2300      	movs	r3, #0
 8009b86:	4288      	cmp	r0, r1
 8009b88:	d305      	bcc.n	8009b96 <__copybits+0x40>
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}
 8009b8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b90:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b94:	e7eb      	b.n	8009b6e <__copybits+0x18>
 8009b96:	f840 3b04 	str.w	r3, [r0], #4
 8009b9a:	e7f4      	b.n	8009b86 <__copybits+0x30>

08009b9c <__any_on>:
 8009b9c:	f100 0214 	add.w	r2, r0, #20
 8009ba0:	6900      	ldr	r0, [r0, #16]
 8009ba2:	114b      	asrs	r3, r1, #5
 8009ba4:	4298      	cmp	r0, r3
 8009ba6:	b510      	push	{r4, lr}
 8009ba8:	db11      	blt.n	8009bce <__any_on+0x32>
 8009baa:	dd0a      	ble.n	8009bc2 <__any_on+0x26>
 8009bac:	f011 011f 	ands.w	r1, r1, #31
 8009bb0:	d007      	beq.n	8009bc2 <__any_on+0x26>
 8009bb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009bb6:	fa24 f001 	lsr.w	r0, r4, r1
 8009bba:	fa00 f101 	lsl.w	r1, r0, r1
 8009bbe:	428c      	cmp	r4, r1
 8009bc0:	d10b      	bne.n	8009bda <__any_on+0x3e>
 8009bc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d803      	bhi.n	8009bd2 <__any_on+0x36>
 8009bca:	2000      	movs	r0, #0
 8009bcc:	bd10      	pop	{r4, pc}
 8009bce:	4603      	mov	r3, r0
 8009bd0:	e7f7      	b.n	8009bc2 <__any_on+0x26>
 8009bd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bd6:	2900      	cmp	r1, #0
 8009bd8:	d0f5      	beq.n	8009bc6 <__any_on+0x2a>
 8009bda:	2001      	movs	r0, #1
 8009bdc:	e7f6      	b.n	8009bcc <__any_on+0x30>

08009bde <_calloc_r>:
 8009bde:	b513      	push	{r0, r1, r4, lr}
 8009be0:	434a      	muls	r2, r1
 8009be2:	4611      	mov	r1, r2
 8009be4:	9201      	str	r2, [sp, #4]
 8009be6:	f000 f859 	bl	8009c9c <_malloc_r>
 8009bea:	4604      	mov	r4, r0
 8009bec:	b118      	cbz	r0, 8009bf6 <_calloc_r+0x18>
 8009bee:	9a01      	ldr	r2, [sp, #4]
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	f7fc fdb1 	bl	8006758 <memset>
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	b002      	add	sp, #8
 8009bfa:	bd10      	pop	{r4, pc}

08009bfc <_free_r>:
 8009bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bfe:	2900      	cmp	r1, #0
 8009c00:	d048      	beq.n	8009c94 <_free_r+0x98>
 8009c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c06:	9001      	str	r0, [sp, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8009c0e:	bfb8      	it	lt
 8009c10:	18e4      	addlt	r4, r4, r3
 8009c12:	f000 fa6f 	bl	800a0f4 <__malloc_lock>
 8009c16:	4a20      	ldr	r2, [pc, #128]	; (8009c98 <_free_r+0x9c>)
 8009c18:	9801      	ldr	r0, [sp, #4]
 8009c1a:	6813      	ldr	r3, [r2, #0]
 8009c1c:	4615      	mov	r5, r2
 8009c1e:	b933      	cbnz	r3, 8009c2e <_free_r+0x32>
 8009c20:	6063      	str	r3, [r4, #4]
 8009c22:	6014      	str	r4, [r2, #0]
 8009c24:	b003      	add	sp, #12
 8009c26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c2a:	f000 ba69 	b.w	800a100 <__malloc_unlock>
 8009c2e:	42a3      	cmp	r3, r4
 8009c30:	d90b      	bls.n	8009c4a <_free_r+0x4e>
 8009c32:	6821      	ldr	r1, [r4, #0]
 8009c34:	1862      	adds	r2, r4, r1
 8009c36:	4293      	cmp	r3, r2
 8009c38:	bf04      	itt	eq
 8009c3a:	681a      	ldreq	r2, [r3, #0]
 8009c3c:	685b      	ldreq	r3, [r3, #4]
 8009c3e:	6063      	str	r3, [r4, #4]
 8009c40:	bf04      	itt	eq
 8009c42:	1852      	addeq	r2, r2, r1
 8009c44:	6022      	streq	r2, [r4, #0]
 8009c46:	602c      	str	r4, [r5, #0]
 8009c48:	e7ec      	b.n	8009c24 <_free_r+0x28>
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	b10b      	cbz	r3, 8009c54 <_free_r+0x58>
 8009c50:	42a3      	cmp	r3, r4
 8009c52:	d9fa      	bls.n	8009c4a <_free_r+0x4e>
 8009c54:	6811      	ldr	r1, [r2, #0]
 8009c56:	1855      	adds	r5, r2, r1
 8009c58:	42a5      	cmp	r5, r4
 8009c5a:	d10b      	bne.n	8009c74 <_free_r+0x78>
 8009c5c:	6824      	ldr	r4, [r4, #0]
 8009c5e:	4421      	add	r1, r4
 8009c60:	1854      	adds	r4, r2, r1
 8009c62:	42a3      	cmp	r3, r4
 8009c64:	6011      	str	r1, [r2, #0]
 8009c66:	d1dd      	bne.n	8009c24 <_free_r+0x28>
 8009c68:	681c      	ldr	r4, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	6053      	str	r3, [r2, #4]
 8009c6e:	4421      	add	r1, r4
 8009c70:	6011      	str	r1, [r2, #0]
 8009c72:	e7d7      	b.n	8009c24 <_free_r+0x28>
 8009c74:	d902      	bls.n	8009c7c <_free_r+0x80>
 8009c76:	230c      	movs	r3, #12
 8009c78:	6003      	str	r3, [r0, #0]
 8009c7a:	e7d3      	b.n	8009c24 <_free_r+0x28>
 8009c7c:	6825      	ldr	r5, [r4, #0]
 8009c7e:	1961      	adds	r1, r4, r5
 8009c80:	428b      	cmp	r3, r1
 8009c82:	bf04      	itt	eq
 8009c84:	6819      	ldreq	r1, [r3, #0]
 8009c86:	685b      	ldreq	r3, [r3, #4]
 8009c88:	6063      	str	r3, [r4, #4]
 8009c8a:	bf04      	itt	eq
 8009c8c:	1949      	addeq	r1, r1, r5
 8009c8e:	6021      	streq	r1, [r4, #0]
 8009c90:	6054      	str	r4, [r2, #4]
 8009c92:	e7c7      	b.n	8009c24 <_free_r+0x28>
 8009c94:	b003      	add	sp, #12
 8009c96:	bd30      	pop	{r4, r5, pc}
 8009c98:	20000274 	.word	0x20000274

08009c9c <_malloc_r>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	1ccd      	adds	r5, r1, #3
 8009ca0:	f025 0503 	bic.w	r5, r5, #3
 8009ca4:	3508      	adds	r5, #8
 8009ca6:	2d0c      	cmp	r5, #12
 8009ca8:	bf38      	it	cc
 8009caa:	250c      	movcc	r5, #12
 8009cac:	2d00      	cmp	r5, #0
 8009cae:	4606      	mov	r6, r0
 8009cb0:	db01      	blt.n	8009cb6 <_malloc_r+0x1a>
 8009cb2:	42a9      	cmp	r1, r5
 8009cb4:	d903      	bls.n	8009cbe <_malloc_r+0x22>
 8009cb6:	230c      	movs	r3, #12
 8009cb8:	6033      	str	r3, [r6, #0]
 8009cba:	2000      	movs	r0, #0
 8009cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cbe:	f000 fa19 	bl	800a0f4 <__malloc_lock>
 8009cc2:	4921      	ldr	r1, [pc, #132]	; (8009d48 <_malloc_r+0xac>)
 8009cc4:	680a      	ldr	r2, [r1, #0]
 8009cc6:	4614      	mov	r4, r2
 8009cc8:	b99c      	cbnz	r4, 8009cf2 <_malloc_r+0x56>
 8009cca:	4f20      	ldr	r7, [pc, #128]	; (8009d4c <_malloc_r+0xb0>)
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	b923      	cbnz	r3, 8009cda <_malloc_r+0x3e>
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f000 f9a0 	bl	800a018 <_sbrk_r>
 8009cd8:	6038      	str	r0, [r7, #0]
 8009cda:	4629      	mov	r1, r5
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f000 f99b 	bl	800a018 <_sbrk_r>
 8009ce2:	1c43      	adds	r3, r0, #1
 8009ce4:	d123      	bne.n	8009d2e <_malloc_r+0x92>
 8009ce6:	230c      	movs	r3, #12
 8009ce8:	6033      	str	r3, [r6, #0]
 8009cea:	4630      	mov	r0, r6
 8009cec:	f000 fa08 	bl	800a100 <__malloc_unlock>
 8009cf0:	e7e3      	b.n	8009cba <_malloc_r+0x1e>
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	1b5b      	subs	r3, r3, r5
 8009cf6:	d417      	bmi.n	8009d28 <_malloc_r+0x8c>
 8009cf8:	2b0b      	cmp	r3, #11
 8009cfa:	d903      	bls.n	8009d04 <_malloc_r+0x68>
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	441c      	add	r4, r3
 8009d00:	6025      	str	r5, [r4, #0]
 8009d02:	e004      	b.n	8009d0e <_malloc_r+0x72>
 8009d04:	6863      	ldr	r3, [r4, #4]
 8009d06:	42a2      	cmp	r2, r4
 8009d08:	bf0c      	ite	eq
 8009d0a:	600b      	streq	r3, [r1, #0]
 8009d0c:	6053      	strne	r3, [r2, #4]
 8009d0e:	4630      	mov	r0, r6
 8009d10:	f000 f9f6 	bl	800a100 <__malloc_unlock>
 8009d14:	f104 000b 	add.w	r0, r4, #11
 8009d18:	1d23      	adds	r3, r4, #4
 8009d1a:	f020 0007 	bic.w	r0, r0, #7
 8009d1e:	1ac2      	subs	r2, r0, r3
 8009d20:	d0cc      	beq.n	8009cbc <_malloc_r+0x20>
 8009d22:	1a1b      	subs	r3, r3, r0
 8009d24:	50a3      	str	r3, [r4, r2]
 8009d26:	e7c9      	b.n	8009cbc <_malloc_r+0x20>
 8009d28:	4622      	mov	r2, r4
 8009d2a:	6864      	ldr	r4, [r4, #4]
 8009d2c:	e7cc      	b.n	8009cc8 <_malloc_r+0x2c>
 8009d2e:	1cc4      	adds	r4, r0, #3
 8009d30:	f024 0403 	bic.w	r4, r4, #3
 8009d34:	42a0      	cmp	r0, r4
 8009d36:	d0e3      	beq.n	8009d00 <_malloc_r+0x64>
 8009d38:	1a21      	subs	r1, r4, r0
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f000 f96c 	bl	800a018 <_sbrk_r>
 8009d40:	3001      	adds	r0, #1
 8009d42:	d1dd      	bne.n	8009d00 <_malloc_r+0x64>
 8009d44:	e7cf      	b.n	8009ce6 <_malloc_r+0x4a>
 8009d46:	bf00      	nop
 8009d48:	20000274 	.word	0x20000274
 8009d4c:	20000278 	.word	0x20000278

08009d50 <__ssputs_r>:
 8009d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d54:	688e      	ldr	r6, [r1, #8]
 8009d56:	429e      	cmp	r6, r3
 8009d58:	4682      	mov	sl, r0
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	4690      	mov	r8, r2
 8009d5e:	461f      	mov	r7, r3
 8009d60:	d838      	bhi.n	8009dd4 <__ssputs_r+0x84>
 8009d62:	898a      	ldrh	r2, [r1, #12]
 8009d64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d68:	d032      	beq.n	8009dd0 <__ssputs_r+0x80>
 8009d6a:	6825      	ldr	r5, [r4, #0]
 8009d6c:	6909      	ldr	r1, [r1, #16]
 8009d6e:	eba5 0901 	sub.w	r9, r5, r1
 8009d72:	6965      	ldr	r5, [r4, #20]
 8009d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	444b      	add	r3, r9
 8009d80:	106d      	asrs	r5, r5, #1
 8009d82:	429d      	cmp	r5, r3
 8009d84:	bf38      	it	cc
 8009d86:	461d      	movcc	r5, r3
 8009d88:	0553      	lsls	r3, r2, #21
 8009d8a:	d531      	bpl.n	8009df0 <__ssputs_r+0xa0>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7ff ff85 	bl	8009c9c <_malloc_r>
 8009d92:	4606      	mov	r6, r0
 8009d94:	b950      	cbnz	r0, 8009dac <__ssputs_r+0x5c>
 8009d96:	230c      	movs	r3, #12
 8009d98:	f8ca 3000 	str.w	r3, [sl]
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dac:	6921      	ldr	r1, [r4, #16]
 8009dae:	464a      	mov	r2, r9
 8009db0:	f7ff fa4c 	bl	800924c <memcpy>
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dbe:	81a3      	strh	r3, [r4, #12]
 8009dc0:	6126      	str	r6, [r4, #16]
 8009dc2:	6165      	str	r5, [r4, #20]
 8009dc4:	444e      	add	r6, r9
 8009dc6:	eba5 0509 	sub.w	r5, r5, r9
 8009dca:	6026      	str	r6, [r4, #0]
 8009dcc:	60a5      	str	r5, [r4, #8]
 8009dce:	463e      	mov	r6, r7
 8009dd0:	42be      	cmp	r6, r7
 8009dd2:	d900      	bls.n	8009dd6 <__ssputs_r+0x86>
 8009dd4:	463e      	mov	r6, r7
 8009dd6:	4632      	mov	r2, r6
 8009dd8:	6820      	ldr	r0, [r4, #0]
 8009dda:	4641      	mov	r1, r8
 8009ddc:	f000 f970 	bl	800a0c0 <memmove>
 8009de0:	68a3      	ldr	r3, [r4, #8]
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	1b9b      	subs	r3, r3, r6
 8009de6:	4432      	add	r2, r6
 8009de8:	60a3      	str	r3, [r4, #8]
 8009dea:	6022      	str	r2, [r4, #0]
 8009dec:	2000      	movs	r0, #0
 8009dee:	e7db      	b.n	8009da8 <__ssputs_r+0x58>
 8009df0:	462a      	mov	r2, r5
 8009df2:	f000 f98b 	bl	800a10c <_realloc_r>
 8009df6:	4606      	mov	r6, r0
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d1e1      	bne.n	8009dc0 <__ssputs_r+0x70>
 8009dfc:	6921      	ldr	r1, [r4, #16]
 8009dfe:	4650      	mov	r0, sl
 8009e00:	f7ff fefc 	bl	8009bfc <_free_r>
 8009e04:	e7c7      	b.n	8009d96 <__ssputs_r+0x46>
	...

08009e08 <_svfiprintf_r>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	4698      	mov	r8, r3
 8009e0e:	898b      	ldrh	r3, [r1, #12]
 8009e10:	061b      	lsls	r3, r3, #24
 8009e12:	b09d      	sub	sp, #116	; 0x74
 8009e14:	4607      	mov	r7, r0
 8009e16:	460d      	mov	r5, r1
 8009e18:	4614      	mov	r4, r2
 8009e1a:	d50e      	bpl.n	8009e3a <_svfiprintf_r+0x32>
 8009e1c:	690b      	ldr	r3, [r1, #16]
 8009e1e:	b963      	cbnz	r3, 8009e3a <_svfiprintf_r+0x32>
 8009e20:	2140      	movs	r1, #64	; 0x40
 8009e22:	f7ff ff3b 	bl	8009c9c <_malloc_r>
 8009e26:	6028      	str	r0, [r5, #0]
 8009e28:	6128      	str	r0, [r5, #16]
 8009e2a:	b920      	cbnz	r0, 8009e36 <_svfiprintf_r+0x2e>
 8009e2c:	230c      	movs	r3, #12
 8009e2e:	603b      	str	r3, [r7, #0]
 8009e30:	f04f 30ff 	mov.w	r0, #4294967295
 8009e34:	e0d1      	b.n	8009fda <_svfiprintf_r+0x1d2>
 8009e36:	2340      	movs	r3, #64	; 0x40
 8009e38:	616b      	str	r3, [r5, #20]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e3e:	2320      	movs	r3, #32
 8009e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e48:	2330      	movs	r3, #48	; 0x30
 8009e4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ff4 <_svfiprintf_r+0x1ec>
 8009e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e52:	f04f 0901 	mov.w	r9, #1
 8009e56:	4623      	mov	r3, r4
 8009e58:	469a      	mov	sl, r3
 8009e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e5e:	b10a      	cbz	r2, 8009e64 <_svfiprintf_r+0x5c>
 8009e60:	2a25      	cmp	r2, #37	; 0x25
 8009e62:	d1f9      	bne.n	8009e58 <_svfiprintf_r+0x50>
 8009e64:	ebba 0b04 	subs.w	fp, sl, r4
 8009e68:	d00b      	beq.n	8009e82 <_svfiprintf_r+0x7a>
 8009e6a:	465b      	mov	r3, fp
 8009e6c:	4622      	mov	r2, r4
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7ff ff6d 	bl	8009d50 <__ssputs_r>
 8009e76:	3001      	adds	r0, #1
 8009e78:	f000 80aa 	beq.w	8009fd0 <_svfiprintf_r+0x1c8>
 8009e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e7e:	445a      	add	r2, fp
 8009e80:	9209      	str	r2, [sp, #36]	; 0x24
 8009e82:	f89a 3000 	ldrb.w	r3, [sl]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 80a2 	beq.w	8009fd0 <_svfiprintf_r+0x1c8>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e96:	f10a 0a01 	add.w	sl, sl, #1
 8009e9a:	9304      	str	r3, [sp, #16]
 8009e9c:	9307      	str	r3, [sp, #28]
 8009e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ea2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ea4:	4654      	mov	r4, sl
 8009ea6:	2205      	movs	r2, #5
 8009ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eac:	4851      	ldr	r0, [pc, #324]	; (8009ff4 <_svfiprintf_r+0x1ec>)
 8009eae:	f7f6 f997 	bl	80001e0 <memchr>
 8009eb2:	9a04      	ldr	r2, [sp, #16]
 8009eb4:	b9d8      	cbnz	r0, 8009eee <_svfiprintf_r+0xe6>
 8009eb6:	06d0      	lsls	r0, r2, #27
 8009eb8:	bf44      	itt	mi
 8009eba:	2320      	movmi	r3, #32
 8009ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ec0:	0711      	lsls	r1, r2, #28
 8009ec2:	bf44      	itt	mi
 8009ec4:	232b      	movmi	r3, #43	; 0x2b
 8009ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eca:	f89a 3000 	ldrb.w	r3, [sl]
 8009ece:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed0:	d015      	beq.n	8009efe <_svfiprintf_r+0xf6>
 8009ed2:	9a07      	ldr	r2, [sp, #28]
 8009ed4:	4654      	mov	r4, sl
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	f04f 0c0a 	mov.w	ip, #10
 8009edc:	4621      	mov	r1, r4
 8009ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ee2:	3b30      	subs	r3, #48	; 0x30
 8009ee4:	2b09      	cmp	r3, #9
 8009ee6:	d94e      	bls.n	8009f86 <_svfiprintf_r+0x17e>
 8009ee8:	b1b0      	cbz	r0, 8009f18 <_svfiprintf_r+0x110>
 8009eea:	9207      	str	r2, [sp, #28]
 8009eec:	e014      	b.n	8009f18 <_svfiprintf_r+0x110>
 8009eee:	eba0 0308 	sub.w	r3, r0, r8
 8009ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	9304      	str	r3, [sp, #16]
 8009efa:	46a2      	mov	sl, r4
 8009efc:	e7d2      	b.n	8009ea4 <_svfiprintf_r+0x9c>
 8009efe:	9b03      	ldr	r3, [sp, #12]
 8009f00:	1d19      	adds	r1, r3, #4
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	9103      	str	r1, [sp, #12]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	bfbb      	ittet	lt
 8009f0a:	425b      	neglt	r3, r3
 8009f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f10:	9307      	strge	r3, [sp, #28]
 8009f12:	9307      	strlt	r3, [sp, #28]
 8009f14:	bfb8      	it	lt
 8009f16:	9204      	strlt	r2, [sp, #16]
 8009f18:	7823      	ldrb	r3, [r4, #0]
 8009f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f1c:	d10c      	bne.n	8009f38 <_svfiprintf_r+0x130>
 8009f1e:	7863      	ldrb	r3, [r4, #1]
 8009f20:	2b2a      	cmp	r3, #42	; 0x2a
 8009f22:	d135      	bne.n	8009f90 <_svfiprintf_r+0x188>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	1d1a      	adds	r2, r3, #4
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	9203      	str	r2, [sp, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	bfb8      	it	lt
 8009f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f34:	3402      	adds	r4, #2
 8009f36:	9305      	str	r3, [sp, #20]
 8009f38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a004 <_svfiprintf_r+0x1fc>
 8009f3c:	7821      	ldrb	r1, [r4, #0]
 8009f3e:	2203      	movs	r2, #3
 8009f40:	4650      	mov	r0, sl
 8009f42:	f7f6 f94d 	bl	80001e0 <memchr>
 8009f46:	b140      	cbz	r0, 8009f5a <_svfiprintf_r+0x152>
 8009f48:	2340      	movs	r3, #64	; 0x40
 8009f4a:	eba0 000a 	sub.w	r0, r0, sl
 8009f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f52:	9b04      	ldr	r3, [sp, #16]
 8009f54:	4303      	orrs	r3, r0
 8009f56:	3401      	adds	r4, #1
 8009f58:	9304      	str	r3, [sp, #16]
 8009f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f5e:	4826      	ldr	r0, [pc, #152]	; (8009ff8 <_svfiprintf_r+0x1f0>)
 8009f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f64:	2206      	movs	r2, #6
 8009f66:	f7f6 f93b 	bl	80001e0 <memchr>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d038      	beq.n	8009fe0 <_svfiprintf_r+0x1d8>
 8009f6e:	4b23      	ldr	r3, [pc, #140]	; (8009ffc <_svfiprintf_r+0x1f4>)
 8009f70:	bb1b      	cbnz	r3, 8009fba <_svfiprintf_r+0x1b2>
 8009f72:	9b03      	ldr	r3, [sp, #12]
 8009f74:	3307      	adds	r3, #7
 8009f76:	f023 0307 	bic.w	r3, r3, #7
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	9303      	str	r3, [sp, #12]
 8009f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f80:	4433      	add	r3, r6
 8009f82:	9309      	str	r3, [sp, #36]	; 0x24
 8009f84:	e767      	b.n	8009e56 <_svfiprintf_r+0x4e>
 8009f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	2001      	movs	r0, #1
 8009f8e:	e7a5      	b.n	8009edc <_svfiprintf_r+0xd4>
 8009f90:	2300      	movs	r3, #0
 8009f92:	3401      	adds	r4, #1
 8009f94:	9305      	str	r3, [sp, #20]
 8009f96:	4619      	mov	r1, r3
 8009f98:	f04f 0c0a 	mov.w	ip, #10
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fa2:	3a30      	subs	r2, #48	; 0x30
 8009fa4:	2a09      	cmp	r2, #9
 8009fa6:	d903      	bls.n	8009fb0 <_svfiprintf_r+0x1a8>
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d0c5      	beq.n	8009f38 <_svfiprintf_r+0x130>
 8009fac:	9105      	str	r1, [sp, #20]
 8009fae:	e7c3      	b.n	8009f38 <_svfiprintf_r+0x130>
 8009fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e7f0      	b.n	8009f9c <_svfiprintf_r+0x194>
 8009fba:	ab03      	add	r3, sp, #12
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	462a      	mov	r2, r5
 8009fc0:	4b0f      	ldr	r3, [pc, #60]	; (800a000 <_svfiprintf_r+0x1f8>)
 8009fc2:	a904      	add	r1, sp, #16
 8009fc4:	4638      	mov	r0, r7
 8009fc6:	f7fc fc6f 	bl	80068a8 <_printf_float>
 8009fca:	1c42      	adds	r2, r0, #1
 8009fcc:	4606      	mov	r6, r0
 8009fce:	d1d6      	bne.n	8009f7e <_svfiprintf_r+0x176>
 8009fd0:	89ab      	ldrh	r3, [r5, #12]
 8009fd2:	065b      	lsls	r3, r3, #25
 8009fd4:	f53f af2c 	bmi.w	8009e30 <_svfiprintf_r+0x28>
 8009fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fda:	b01d      	add	sp, #116	; 0x74
 8009fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe0:	ab03      	add	r3, sp, #12
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	462a      	mov	r2, r5
 8009fe6:	4b06      	ldr	r3, [pc, #24]	; (800a000 <_svfiprintf_r+0x1f8>)
 8009fe8:	a904      	add	r1, sp, #16
 8009fea:	4638      	mov	r0, r7
 8009fec:	f7fc ff00 	bl	8006df0 <_printf_i>
 8009ff0:	e7eb      	b.n	8009fca <_svfiprintf_r+0x1c2>
 8009ff2:	bf00      	nop
 8009ff4:	0800afa4 	.word	0x0800afa4
 8009ff8:	0800afae 	.word	0x0800afae
 8009ffc:	080068a9 	.word	0x080068a9
 800a000:	08009d51 	.word	0x08009d51
 800a004:	0800afaa 	.word	0x0800afaa

0800a008 <nan>:
 800a008:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a010 <nan+0x8>
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	00000000 	.word	0x00000000
 800a014:	7ff80000 	.word	0x7ff80000

0800a018 <_sbrk_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4d06      	ldr	r5, [pc, #24]	; (800a034 <_sbrk_r+0x1c>)
 800a01c:	2300      	movs	r3, #0
 800a01e:	4604      	mov	r4, r0
 800a020:	4608      	mov	r0, r1
 800a022:	602b      	str	r3, [r5, #0]
 800a024:	f7f8 f8b8 	bl	8002198 <_sbrk>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d102      	bne.n	800a032 <_sbrk_r+0x1a>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	b103      	cbz	r3, 800a032 <_sbrk_r+0x1a>
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	20001618 	.word	0x20001618

0800a038 <nanf>:
 800a038:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a040 <nanf+0x8>
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	7fc00000 	.word	0x7fc00000

0800a044 <__ascii_wctomb>:
 800a044:	b149      	cbz	r1, 800a05a <__ascii_wctomb+0x16>
 800a046:	2aff      	cmp	r2, #255	; 0xff
 800a048:	bf85      	ittet	hi
 800a04a:	238a      	movhi	r3, #138	; 0x8a
 800a04c:	6003      	strhi	r3, [r0, #0]
 800a04e:	700a      	strbls	r2, [r1, #0]
 800a050:	f04f 30ff 	movhi.w	r0, #4294967295
 800a054:	bf98      	it	ls
 800a056:	2001      	movls	r0, #1
 800a058:	4770      	bx	lr
 800a05a:	4608      	mov	r0, r1
 800a05c:	4770      	bx	lr
	...

0800a060 <__assert_func>:
 800a060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a062:	4614      	mov	r4, r2
 800a064:	461a      	mov	r2, r3
 800a066:	4b09      	ldr	r3, [pc, #36]	; (800a08c <__assert_func+0x2c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4605      	mov	r5, r0
 800a06c:	68d8      	ldr	r0, [r3, #12]
 800a06e:	b14c      	cbz	r4, 800a084 <__assert_func+0x24>
 800a070:	4b07      	ldr	r3, [pc, #28]	; (800a090 <__assert_func+0x30>)
 800a072:	9100      	str	r1, [sp, #0]
 800a074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a078:	4906      	ldr	r1, [pc, #24]	; (800a094 <__assert_func+0x34>)
 800a07a:	462b      	mov	r3, r5
 800a07c:	f000 f80e 	bl	800a09c <fiprintf>
 800a080:	f000 fa84 	bl	800a58c <abort>
 800a084:	4b04      	ldr	r3, [pc, #16]	; (800a098 <__assert_func+0x38>)
 800a086:	461c      	mov	r4, r3
 800a088:	e7f3      	b.n	800a072 <__assert_func+0x12>
 800a08a:	bf00      	nop
 800a08c:	20000060 	.word	0x20000060
 800a090:	0800afb5 	.word	0x0800afb5
 800a094:	0800afc2 	.word	0x0800afc2
 800a098:	0800aff0 	.word	0x0800aff0

0800a09c <fiprintf>:
 800a09c:	b40e      	push	{r1, r2, r3}
 800a09e:	b503      	push	{r0, r1, lr}
 800a0a0:	4601      	mov	r1, r0
 800a0a2:	ab03      	add	r3, sp, #12
 800a0a4:	4805      	ldr	r0, [pc, #20]	; (800a0bc <fiprintf+0x20>)
 800a0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0aa:	6800      	ldr	r0, [r0, #0]
 800a0ac:	9301      	str	r3, [sp, #4]
 800a0ae:	f000 f87d 	bl	800a1ac <_vfiprintf_r>
 800a0b2:	b002      	add	sp, #8
 800a0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0b8:	b003      	add	sp, #12
 800a0ba:	4770      	bx	lr
 800a0bc:	20000060 	.word	0x20000060

0800a0c0 <memmove>:
 800a0c0:	4288      	cmp	r0, r1
 800a0c2:	b510      	push	{r4, lr}
 800a0c4:	eb01 0402 	add.w	r4, r1, r2
 800a0c8:	d902      	bls.n	800a0d0 <memmove+0x10>
 800a0ca:	4284      	cmp	r4, r0
 800a0cc:	4623      	mov	r3, r4
 800a0ce:	d807      	bhi.n	800a0e0 <memmove+0x20>
 800a0d0:	1e43      	subs	r3, r0, #1
 800a0d2:	42a1      	cmp	r1, r4
 800a0d4:	d008      	beq.n	800a0e8 <memmove+0x28>
 800a0d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0de:	e7f8      	b.n	800a0d2 <memmove+0x12>
 800a0e0:	4402      	add	r2, r0
 800a0e2:	4601      	mov	r1, r0
 800a0e4:	428a      	cmp	r2, r1
 800a0e6:	d100      	bne.n	800a0ea <memmove+0x2a>
 800a0e8:	bd10      	pop	{r4, pc}
 800a0ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0f2:	e7f7      	b.n	800a0e4 <memmove+0x24>

0800a0f4 <__malloc_lock>:
 800a0f4:	4801      	ldr	r0, [pc, #4]	; (800a0fc <__malloc_lock+0x8>)
 800a0f6:	f000 bc09 	b.w	800a90c <__retarget_lock_acquire_recursive>
 800a0fa:	bf00      	nop
 800a0fc:	20001620 	.word	0x20001620

0800a100 <__malloc_unlock>:
 800a100:	4801      	ldr	r0, [pc, #4]	; (800a108 <__malloc_unlock+0x8>)
 800a102:	f000 bc04 	b.w	800a90e <__retarget_lock_release_recursive>
 800a106:	bf00      	nop
 800a108:	20001620 	.word	0x20001620

0800a10c <_realloc_r>:
 800a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10e:	4607      	mov	r7, r0
 800a110:	4614      	mov	r4, r2
 800a112:	460e      	mov	r6, r1
 800a114:	b921      	cbnz	r1, 800a120 <_realloc_r+0x14>
 800a116:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a11a:	4611      	mov	r1, r2
 800a11c:	f7ff bdbe 	b.w	8009c9c <_malloc_r>
 800a120:	b922      	cbnz	r2, 800a12c <_realloc_r+0x20>
 800a122:	f7ff fd6b 	bl	8009bfc <_free_r>
 800a126:	4625      	mov	r5, r4
 800a128:	4628      	mov	r0, r5
 800a12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a12c:	f000 fc54 	bl	800a9d8 <_malloc_usable_size_r>
 800a130:	42a0      	cmp	r0, r4
 800a132:	d20f      	bcs.n	800a154 <_realloc_r+0x48>
 800a134:	4621      	mov	r1, r4
 800a136:	4638      	mov	r0, r7
 800a138:	f7ff fdb0 	bl	8009c9c <_malloc_r>
 800a13c:	4605      	mov	r5, r0
 800a13e:	2800      	cmp	r0, #0
 800a140:	d0f2      	beq.n	800a128 <_realloc_r+0x1c>
 800a142:	4631      	mov	r1, r6
 800a144:	4622      	mov	r2, r4
 800a146:	f7ff f881 	bl	800924c <memcpy>
 800a14a:	4631      	mov	r1, r6
 800a14c:	4638      	mov	r0, r7
 800a14e:	f7ff fd55 	bl	8009bfc <_free_r>
 800a152:	e7e9      	b.n	800a128 <_realloc_r+0x1c>
 800a154:	4635      	mov	r5, r6
 800a156:	e7e7      	b.n	800a128 <_realloc_r+0x1c>

0800a158 <__sfputc_r>:
 800a158:	6893      	ldr	r3, [r2, #8]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	b410      	push	{r4}
 800a160:	6093      	str	r3, [r2, #8]
 800a162:	da08      	bge.n	800a176 <__sfputc_r+0x1e>
 800a164:	6994      	ldr	r4, [r2, #24]
 800a166:	42a3      	cmp	r3, r4
 800a168:	db01      	blt.n	800a16e <__sfputc_r+0x16>
 800a16a:	290a      	cmp	r1, #10
 800a16c:	d103      	bne.n	800a176 <__sfputc_r+0x1e>
 800a16e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a172:	f000 b94b 	b.w	800a40c <__swbuf_r>
 800a176:	6813      	ldr	r3, [r2, #0]
 800a178:	1c58      	adds	r0, r3, #1
 800a17a:	6010      	str	r0, [r2, #0]
 800a17c:	7019      	strb	r1, [r3, #0]
 800a17e:	4608      	mov	r0, r1
 800a180:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <__sfputs_r>:
 800a186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a188:	4606      	mov	r6, r0
 800a18a:	460f      	mov	r7, r1
 800a18c:	4614      	mov	r4, r2
 800a18e:	18d5      	adds	r5, r2, r3
 800a190:	42ac      	cmp	r4, r5
 800a192:	d101      	bne.n	800a198 <__sfputs_r+0x12>
 800a194:	2000      	movs	r0, #0
 800a196:	e007      	b.n	800a1a8 <__sfputs_r+0x22>
 800a198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19c:	463a      	mov	r2, r7
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7ff ffda 	bl	800a158 <__sfputc_r>
 800a1a4:	1c43      	adds	r3, r0, #1
 800a1a6:	d1f3      	bne.n	800a190 <__sfputs_r+0xa>
 800a1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1ac <_vfiprintf_r>:
 800a1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b0:	460d      	mov	r5, r1
 800a1b2:	b09d      	sub	sp, #116	; 0x74
 800a1b4:	4614      	mov	r4, r2
 800a1b6:	4698      	mov	r8, r3
 800a1b8:	4606      	mov	r6, r0
 800a1ba:	b118      	cbz	r0, 800a1c4 <_vfiprintf_r+0x18>
 800a1bc:	6983      	ldr	r3, [r0, #24]
 800a1be:	b90b      	cbnz	r3, 800a1c4 <_vfiprintf_r+0x18>
 800a1c0:	f000 fb06 	bl	800a7d0 <__sinit>
 800a1c4:	4b89      	ldr	r3, [pc, #548]	; (800a3ec <_vfiprintf_r+0x240>)
 800a1c6:	429d      	cmp	r5, r3
 800a1c8:	d11b      	bne.n	800a202 <_vfiprintf_r+0x56>
 800a1ca:	6875      	ldr	r5, [r6, #4]
 800a1cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1ce:	07d9      	lsls	r1, r3, #31
 800a1d0:	d405      	bmi.n	800a1de <_vfiprintf_r+0x32>
 800a1d2:	89ab      	ldrh	r3, [r5, #12]
 800a1d4:	059a      	lsls	r2, r3, #22
 800a1d6:	d402      	bmi.n	800a1de <_vfiprintf_r+0x32>
 800a1d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1da:	f000 fb97 	bl	800a90c <__retarget_lock_acquire_recursive>
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	071b      	lsls	r3, r3, #28
 800a1e2:	d501      	bpl.n	800a1e8 <_vfiprintf_r+0x3c>
 800a1e4:	692b      	ldr	r3, [r5, #16]
 800a1e6:	b9eb      	cbnz	r3, 800a224 <_vfiprintf_r+0x78>
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f000 f960 	bl	800a4b0 <__swsetup_r>
 800a1f0:	b1c0      	cbz	r0, 800a224 <_vfiprintf_r+0x78>
 800a1f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1f4:	07dc      	lsls	r4, r3, #31
 800a1f6:	d50e      	bpl.n	800a216 <_vfiprintf_r+0x6a>
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fc:	b01d      	add	sp, #116	; 0x74
 800a1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a202:	4b7b      	ldr	r3, [pc, #492]	; (800a3f0 <_vfiprintf_r+0x244>)
 800a204:	429d      	cmp	r5, r3
 800a206:	d101      	bne.n	800a20c <_vfiprintf_r+0x60>
 800a208:	68b5      	ldr	r5, [r6, #8]
 800a20a:	e7df      	b.n	800a1cc <_vfiprintf_r+0x20>
 800a20c:	4b79      	ldr	r3, [pc, #484]	; (800a3f4 <_vfiprintf_r+0x248>)
 800a20e:	429d      	cmp	r5, r3
 800a210:	bf08      	it	eq
 800a212:	68f5      	ldreq	r5, [r6, #12]
 800a214:	e7da      	b.n	800a1cc <_vfiprintf_r+0x20>
 800a216:	89ab      	ldrh	r3, [r5, #12]
 800a218:	0598      	lsls	r0, r3, #22
 800a21a:	d4ed      	bmi.n	800a1f8 <_vfiprintf_r+0x4c>
 800a21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a21e:	f000 fb76 	bl	800a90e <__retarget_lock_release_recursive>
 800a222:	e7e9      	b.n	800a1f8 <_vfiprintf_r+0x4c>
 800a224:	2300      	movs	r3, #0
 800a226:	9309      	str	r3, [sp, #36]	; 0x24
 800a228:	2320      	movs	r3, #32
 800a22a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a22e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a232:	2330      	movs	r3, #48	; 0x30
 800a234:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a3f8 <_vfiprintf_r+0x24c>
 800a238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a23c:	f04f 0901 	mov.w	r9, #1
 800a240:	4623      	mov	r3, r4
 800a242:	469a      	mov	sl, r3
 800a244:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a248:	b10a      	cbz	r2, 800a24e <_vfiprintf_r+0xa2>
 800a24a:	2a25      	cmp	r2, #37	; 0x25
 800a24c:	d1f9      	bne.n	800a242 <_vfiprintf_r+0x96>
 800a24e:	ebba 0b04 	subs.w	fp, sl, r4
 800a252:	d00b      	beq.n	800a26c <_vfiprintf_r+0xc0>
 800a254:	465b      	mov	r3, fp
 800a256:	4622      	mov	r2, r4
 800a258:	4629      	mov	r1, r5
 800a25a:	4630      	mov	r0, r6
 800a25c:	f7ff ff93 	bl	800a186 <__sfputs_r>
 800a260:	3001      	adds	r0, #1
 800a262:	f000 80aa 	beq.w	800a3ba <_vfiprintf_r+0x20e>
 800a266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a268:	445a      	add	r2, fp
 800a26a:	9209      	str	r2, [sp, #36]	; 0x24
 800a26c:	f89a 3000 	ldrb.w	r3, [sl]
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 80a2 	beq.w	800a3ba <_vfiprintf_r+0x20e>
 800a276:	2300      	movs	r3, #0
 800a278:	f04f 32ff 	mov.w	r2, #4294967295
 800a27c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a280:	f10a 0a01 	add.w	sl, sl, #1
 800a284:	9304      	str	r3, [sp, #16]
 800a286:	9307      	str	r3, [sp, #28]
 800a288:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a28c:	931a      	str	r3, [sp, #104]	; 0x68
 800a28e:	4654      	mov	r4, sl
 800a290:	2205      	movs	r2, #5
 800a292:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a296:	4858      	ldr	r0, [pc, #352]	; (800a3f8 <_vfiprintf_r+0x24c>)
 800a298:	f7f5 ffa2 	bl	80001e0 <memchr>
 800a29c:	9a04      	ldr	r2, [sp, #16]
 800a29e:	b9d8      	cbnz	r0, 800a2d8 <_vfiprintf_r+0x12c>
 800a2a0:	06d1      	lsls	r1, r2, #27
 800a2a2:	bf44      	itt	mi
 800a2a4:	2320      	movmi	r3, #32
 800a2a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2aa:	0713      	lsls	r3, r2, #28
 800a2ac:	bf44      	itt	mi
 800a2ae:	232b      	movmi	r3, #43	; 0x2b
 800a2b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ba:	d015      	beq.n	800a2e8 <_vfiprintf_r+0x13c>
 800a2bc:	9a07      	ldr	r2, [sp, #28]
 800a2be:	4654      	mov	r4, sl
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	f04f 0c0a 	mov.w	ip, #10
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2cc:	3b30      	subs	r3, #48	; 0x30
 800a2ce:	2b09      	cmp	r3, #9
 800a2d0:	d94e      	bls.n	800a370 <_vfiprintf_r+0x1c4>
 800a2d2:	b1b0      	cbz	r0, 800a302 <_vfiprintf_r+0x156>
 800a2d4:	9207      	str	r2, [sp, #28]
 800a2d6:	e014      	b.n	800a302 <_vfiprintf_r+0x156>
 800a2d8:	eba0 0308 	sub.w	r3, r0, r8
 800a2dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	46a2      	mov	sl, r4
 800a2e6:	e7d2      	b.n	800a28e <_vfiprintf_r+0xe2>
 800a2e8:	9b03      	ldr	r3, [sp, #12]
 800a2ea:	1d19      	adds	r1, r3, #4
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	9103      	str	r1, [sp, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	bfbb      	ittet	lt
 800a2f4:	425b      	neglt	r3, r3
 800a2f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a2fa:	9307      	strge	r3, [sp, #28]
 800a2fc:	9307      	strlt	r3, [sp, #28]
 800a2fe:	bfb8      	it	lt
 800a300:	9204      	strlt	r2, [sp, #16]
 800a302:	7823      	ldrb	r3, [r4, #0]
 800a304:	2b2e      	cmp	r3, #46	; 0x2e
 800a306:	d10c      	bne.n	800a322 <_vfiprintf_r+0x176>
 800a308:	7863      	ldrb	r3, [r4, #1]
 800a30a:	2b2a      	cmp	r3, #42	; 0x2a
 800a30c:	d135      	bne.n	800a37a <_vfiprintf_r+0x1ce>
 800a30e:	9b03      	ldr	r3, [sp, #12]
 800a310:	1d1a      	adds	r2, r3, #4
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	9203      	str	r2, [sp, #12]
 800a316:	2b00      	cmp	r3, #0
 800a318:	bfb8      	it	lt
 800a31a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a31e:	3402      	adds	r4, #2
 800a320:	9305      	str	r3, [sp, #20]
 800a322:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a408 <_vfiprintf_r+0x25c>
 800a326:	7821      	ldrb	r1, [r4, #0]
 800a328:	2203      	movs	r2, #3
 800a32a:	4650      	mov	r0, sl
 800a32c:	f7f5 ff58 	bl	80001e0 <memchr>
 800a330:	b140      	cbz	r0, 800a344 <_vfiprintf_r+0x198>
 800a332:	2340      	movs	r3, #64	; 0x40
 800a334:	eba0 000a 	sub.w	r0, r0, sl
 800a338:	fa03 f000 	lsl.w	r0, r3, r0
 800a33c:	9b04      	ldr	r3, [sp, #16]
 800a33e:	4303      	orrs	r3, r0
 800a340:	3401      	adds	r4, #1
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a348:	482c      	ldr	r0, [pc, #176]	; (800a3fc <_vfiprintf_r+0x250>)
 800a34a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a34e:	2206      	movs	r2, #6
 800a350:	f7f5 ff46 	bl	80001e0 <memchr>
 800a354:	2800      	cmp	r0, #0
 800a356:	d03f      	beq.n	800a3d8 <_vfiprintf_r+0x22c>
 800a358:	4b29      	ldr	r3, [pc, #164]	; (800a400 <_vfiprintf_r+0x254>)
 800a35a:	bb1b      	cbnz	r3, 800a3a4 <_vfiprintf_r+0x1f8>
 800a35c:	9b03      	ldr	r3, [sp, #12]
 800a35e:	3307      	adds	r3, #7
 800a360:	f023 0307 	bic.w	r3, r3, #7
 800a364:	3308      	adds	r3, #8
 800a366:	9303      	str	r3, [sp, #12]
 800a368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36a:	443b      	add	r3, r7
 800a36c:	9309      	str	r3, [sp, #36]	; 0x24
 800a36e:	e767      	b.n	800a240 <_vfiprintf_r+0x94>
 800a370:	fb0c 3202 	mla	r2, ip, r2, r3
 800a374:	460c      	mov	r4, r1
 800a376:	2001      	movs	r0, #1
 800a378:	e7a5      	b.n	800a2c6 <_vfiprintf_r+0x11a>
 800a37a:	2300      	movs	r3, #0
 800a37c:	3401      	adds	r4, #1
 800a37e:	9305      	str	r3, [sp, #20]
 800a380:	4619      	mov	r1, r3
 800a382:	f04f 0c0a 	mov.w	ip, #10
 800a386:	4620      	mov	r0, r4
 800a388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a38c:	3a30      	subs	r2, #48	; 0x30
 800a38e:	2a09      	cmp	r2, #9
 800a390:	d903      	bls.n	800a39a <_vfiprintf_r+0x1ee>
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0c5      	beq.n	800a322 <_vfiprintf_r+0x176>
 800a396:	9105      	str	r1, [sp, #20]
 800a398:	e7c3      	b.n	800a322 <_vfiprintf_r+0x176>
 800a39a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a39e:	4604      	mov	r4, r0
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e7f0      	b.n	800a386 <_vfiprintf_r+0x1da>
 800a3a4:	ab03      	add	r3, sp, #12
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	462a      	mov	r2, r5
 800a3aa:	4b16      	ldr	r3, [pc, #88]	; (800a404 <_vfiprintf_r+0x258>)
 800a3ac:	a904      	add	r1, sp, #16
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f7fc fa7a 	bl	80068a8 <_printf_float>
 800a3b4:	4607      	mov	r7, r0
 800a3b6:	1c78      	adds	r0, r7, #1
 800a3b8:	d1d6      	bne.n	800a368 <_vfiprintf_r+0x1bc>
 800a3ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3bc:	07d9      	lsls	r1, r3, #31
 800a3be:	d405      	bmi.n	800a3cc <_vfiprintf_r+0x220>
 800a3c0:	89ab      	ldrh	r3, [r5, #12]
 800a3c2:	059a      	lsls	r2, r3, #22
 800a3c4:	d402      	bmi.n	800a3cc <_vfiprintf_r+0x220>
 800a3c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3c8:	f000 faa1 	bl	800a90e <__retarget_lock_release_recursive>
 800a3cc:	89ab      	ldrh	r3, [r5, #12]
 800a3ce:	065b      	lsls	r3, r3, #25
 800a3d0:	f53f af12 	bmi.w	800a1f8 <_vfiprintf_r+0x4c>
 800a3d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3d6:	e711      	b.n	800a1fc <_vfiprintf_r+0x50>
 800a3d8:	ab03      	add	r3, sp, #12
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	462a      	mov	r2, r5
 800a3de:	4b09      	ldr	r3, [pc, #36]	; (800a404 <_vfiprintf_r+0x258>)
 800a3e0:	a904      	add	r1, sp, #16
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f7fc fd04 	bl	8006df0 <_printf_i>
 800a3e8:	e7e4      	b.n	800a3b4 <_vfiprintf_r+0x208>
 800a3ea:	bf00      	nop
 800a3ec:	0800b114 	.word	0x0800b114
 800a3f0:	0800b134 	.word	0x0800b134
 800a3f4:	0800b0f4 	.word	0x0800b0f4
 800a3f8:	0800afa4 	.word	0x0800afa4
 800a3fc:	0800afae 	.word	0x0800afae
 800a400:	080068a9 	.word	0x080068a9
 800a404:	0800a187 	.word	0x0800a187
 800a408:	0800afaa 	.word	0x0800afaa

0800a40c <__swbuf_r>:
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	460e      	mov	r6, r1
 800a410:	4614      	mov	r4, r2
 800a412:	4605      	mov	r5, r0
 800a414:	b118      	cbz	r0, 800a41e <__swbuf_r+0x12>
 800a416:	6983      	ldr	r3, [r0, #24]
 800a418:	b90b      	cbnz	r3, 800a41e <__swbuf_r+0x12>
 800a41a:	f000 f9d9 	bl	800a7d0 <__sinit>
 800a41e:	4b21      	ldr	r3, [pc, #132]	; (800a4a4 <__swbuf_r+0x98>)
 800a420:	429c      	cmp	r4, r3
 800a422:	d12b      	bne.n	800a47c <__swbuf_r+0x70>
 800a424:	686c      	ldr	r4, [r5, #4]
 800a426:	69a3      	ldr	r3, [r4, #24]
 800a428:	60a3      	str	r3, [r4, #8]
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	071a      	lsls	r2, r3, #28
 800a42e:	d52f      	bpl.n	800a490 <__swbuf_r+0x84>
 800a430:	6923      	ldr	r3, [r4, #16]
 800a432:	b36b      	cbz	r3, 800a490 <__swbuf_r+0x84>
 800a434:	6923      	ldr	r3, [r4, #16]
 800a436:	6820      	ldr	r0, [r4, #0]
 800a438:	1ac0      	subs	r0, r0, r3
 800a43a:	6963      	ldr	r3, [r4, #20]
 800a43c:	b2f6      	uxtb	r6, r6
 800a43e:	4283      	cmp	r3, r0
 800a440:	4637      	mov	r7, r6
 800a442:	dc04      	bgt.n	800a44e <__swbuf_r+0x42>
 800a444:	4621      	mov	r1, r4
 800a446:	4628      	mov	r0, r5
 800a448:	f000 f92e 	bl	800a6a8 <_fflush_r>
 800a44c:	bb30      	cbnz	r0, 800a49c <__swbuf_r+0x90>
 800a44e:	68a3      	ldr	r3, [r4, #8]
 800a450:	3b01      	subs	r3, #1
 800a452:	60a3      	str	r3, [r4, #8]
 800a454:	6823      	ldr	r3, [r4, #0]
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	6022      	str	r2, [r4, #0]
 800a45a:	701e      	strb	r6, [r3, #0]
 800a45c:	6963      	ldr	r3, [r4, #20]
 800a45e:	3001      	adds	r0, #1
 800a460:	4283      	cmp	r3, r0
 800a462:	d004      	beq.n	800a46e <__swbuf_r+0x62>
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	07db      	lsls	r3, r3, #31
 800a468:	d506      	bpl.n	800a478 <__swbuf_r+0x6c>
 800a46a:	2e0a      	cmp	r6, #10
 800a46c:	d104      	bne.n	800a478 <__swbuf_r+0x6c>
 800a46e:	4621      	mov	r1, r4
 800a470:	4628      	mov	r0, r5
 800a472:	f000 f919 	bl	800a6a8 <_fflush_r>
 800a476:	b988      	cbnz	r0, 800a49c <__swbuf_r+0x90>
 800a478:	4638      	mov	r0, r7
 800a47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a47c:	4b0a      	ldr	r3, [pc, #40]	; (800a4a8 <__swbuf_r+0x9c>)
 800a47e:	429c      	cmp	r4, r3
 800a480:	d101      	bne.n	800a486 <__swbuf_r+0x7a>
 800a482:	68ac      	ldr	r4, [r5, #8]
 800a484:	e7cf      	b.n	800a426 <__swbuf_r+0x1a>
 800a486:	4b09      	ldr	r3, [pc, #36]	; (800a4ac <__swbuf_r+0xa0>)
 800a488:	429c      	cmp	r4, r3
 800a48a:	bf08      	it	eq
 800a48c:	68ec      	ldreq	r4, [r5, #12]
 800a48e:	e7ca      	b.n	800a426 <__swbuf_r+0x1a>
 800a490:	4621      	mov	r1, r4
 800a492:	4628      	mov	r0, r5
 800a494:	f000 f80c 	bl	800a4b0 <__swsetup_r>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d0cb      	beq.n	800a434 <__swbuf_r+0x28>
 800a49c:	f04f 37ff 	mov.w	r7, #4294967295
 800a4a0:	e7ea      	b.n	800a478 <__swbuf_r+0x6c>
 800a4a2:	bf00      	nop
 800a4a4:	0800b114 	.word	0x0800b114
 800a4a8:	0800b134 	.word	0x0800b134
 800a4ac:	0800b0f4 	.word	0x0800b0f4

0800a4b0 <__swsetup_r>:
 800a4b0:	4b32      	ldr	r3, [pc, #200]	; (800a57c <__swsetup_r+0xcc>)
 800a4b2:	b570      	push	{r4, r5, r6, lr}
 800a4b4:	681d      	ldr	r5, [r3, #0]
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	b125      	cbz	r5, 800a4c6 <__swsetup_r+0x16>
 800a4bc:	69ab      	ldr	r3, [r5, #24]
 800a4be:	b913      	cbnz	r3, 800a4c6 <__swsetup_r+0x16>
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	f000 f985 	bl	800a7d0 <__sinit>
 800a4c6:	4b2e      	ldr	r3, [pc, #184]	; (800a580 <__swsetup_r+0xd0>)
 800a4c8:	429c      	cmp	r4, r3
 800a4ca:	d10f      	bne.n	800a4ec <__swsetup_r+0x3c>
 800a4cc:	686c      	ldr	r4, [r5, #4]
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4d4:	0719      	lsls	r1, r3, #28
 800a4d6:	d42c      	bmi.n	800a532 <__swsetup_r+0x82>
 800a4d8:	06dd      	lsls	r5, r3, #27
 800a4da:	d411      	bmi.n	800a500 <__swsetup_r+0x50>
 800a4dc:	2309      	movs	r3, #9
 800a4de:	6033      	str	r3, [r6, #0]
 800a4e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4e4:	81a3      	strh	r3, [r4, #12]
 800a4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ea:	e03e      	b.n	800a56a <__swsetup_r+0xba>
 800a4ec:	4b25      	ldr	r3, [pc, #148]	; (800a584 <__swsetup_r+0xd4>)
 800a4ee:	429c      	cmp	r4, r3
 800a4f0:	d101      	bne.n	800a4f6 <__swsetup_r+0x46>
 800a4f2:	68ac      	ldr	r4, [r5, #8]
 800a4f4:	e7eb      	b.n	800a4ce <__swsetup_r+0x1e>
 800a4f6:	4b24      	ldr	r3, [pc, #144]	; (800a588 <__swsetup_r+0xd8>)
 800a4f8:	429c      	cmp	r4, r3
 800a4fa:	bf08      	it	eq
 800a4fc:	68ec      	ldreq	r4, [r5, #12]
 800a4fe:	e7e6      	b.n	800a4ce <__swsetup_r+0x1e>
 800a500:	0758      	lsls	r0, r3, #29
 800a502:	d512      	bpl.n	800a52a <__swsetup_r+0x7a>
 800a504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a506:	b141      	cbz	r1, 800a51a <__swsetup_r+0x6a>
 800a508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a50c:	4299      	cmp	r1, r3
 800a50e:	d002      	beq.n	800a516 <__swsetup_r+0x66>
 800a510:	4630      	mov	r0, r6
 800a512:	f7ff fb73 	bl	8009bfc <_free_r>
 800a516:	2300      	movs	r3, #0
 800a518:	6363      	str	r3, [r4, #52]	; 0x34
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a520:	81a3      	strh	r3, [r4, #12]
 800a522:	2300      	movs	r3, #0
 800a524:	6063      	str	r3, [r4, #4]
 800a526:	6923      	ldr	r3, [r4, #16]
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	f043 0308 	orr.w	r3, r3, #8
 800a530:	81a3      	strh	r3, [r4, #12]
 800a532:	6923      	ldr	r3, [r4, #16]
 800a534:	b94b      	cbnz	r3, 800a54a <__swsetup_r+0x9a>
 800a536:	89a3      	ldrh	r3, [r4, #12]
 800a538:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a53c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a540:	d003      	beq.n	800a54a <__swsetup_r+0x9a>
 800a542:	4621      	mov	r1, r4
 800a544:	4630      	mov	r0, r6
 800a546:	f000 fa07 	bl	800a958 <__smakebuf_r>
 800a54a:	89a0      	ldrh	r0, [r4, #12]
 800a54c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a550:	f010 0301 	ands.w	r3, r0, #1
 800a554:	d00a      	beq.n	800a56c <__swsetup_r+0xbc>
 800a556:	2300      	movs	r3, #0
 800a558:	60a3      	str	r3, [r4, #8]
 800a55a:	6963      	ldr	r3, [r4, #20]
 800a55c:	425b      	negs	r3, r3
 800a55e:	61a3      	str	r3, [r4, #24]
 800a560:	6923      	ldr	r3, [r4, #16]
 800a562:	b943      	cbnz	r3, 800a576 <__swsetup_r+0xc6>
 800a564:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a568:	d1ba      	bne.n	800a4e0 <__swsetup_r+0x30>
 800a56a:	bd70      	pop	{r4, r5, r6, pc}
 800a56c:	0781      	lsls	r1, r0, #30
 800a56e:	bf58      	it	pl
 800a570:	6963      	ldrpl	r3, [r4, #20]
 800a572:	60a3      	str	r3, [r4, #8]
 800a574:	e7f4      	b.n	800a560 <__swsetup_r+0xb0>
 800a576:	2000      	movs	r0, #0
 800a578:	e7f7      	b.n	800a56a <__swsetup_r+0xba>
 800a57a:	bf00      	nop
 800a57c:	20000060 	.word	0x20000060
 800a580:	0800b114 	.word	0x0800b114
 800a584:	0800b134 	.word	0x0800b134
 800a588:	0800b0f4 	.word	0x0800b0f4

0800a58c <abort>:
 800a58c:	b508      	push	{r3, lr}
 800a58e:	2006      	movs	r0, #6
 800a590:	f000 fa52 	bl	800aa38 <raise>
 800a594:	2001      	movs	r0, #1
 800a596:	f7f7 fd87 	bl	80020a8 <_exit>
	...

0800a59c <__sflush_r>:
 800a59c:	898a      	ldrh	r2, [r1, #12]
 800a59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	0710      	lsls	r0, r2, #28
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	d458      	bmi.n	800a65c <__sflush_r+0xc0>
 800a5aa:	684b      	ldr	r3, [r1, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	dc05      	bgt.n	800a5bc <__sflush_r+0x20>
 800a5b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	dc02      	bgt.n	800a5bc <__sflush_r+0x20>
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5be:	2e00      	cmp	r6, #0
 800a5c0:	d0f9      	beq.n	800a5b6 <__sflush_r+0x1a>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5c8:	682f      	ldr	r7, [r5, #0]
 800a5ca:	602b      	str	r3, [r5, #0]
 800a5cc:	d032      	beq.n	800a634 <__sflush_r+0x98>
 800a5ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	075a      	lsls	r2, r3, #29
 800a5d4:	d505      	bpl.n	800a5e2 <__sflush_r+0x46>
 800a5d6:	6863      	ldr	r3, [r4, #4]
 800a5d8:	1ac0      	subs	r0, r0, r3
 800a5da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5dc:	b10b      	cbz	r3, 800a5e2 <__sflush_r+0x46>
 800a5de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5e0:	1ac0      	subs	r0, r0, r3
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5e8:	6a21      	ldr	r1, [r4, #32]
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	47b0      	blx	r6
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	89a3      	ldrh	r3, [r4, #12]
 800a5f2:	d106      	bne.n	800a602 <__sflush_r+0x66>
 800a5f4:	6829      	ldr	r1, [r5, #0]
 800a5f6:	291d      	cmp	r1, #29
 800a5f8:	d82c      	bhi.n	800a654 <__sflush_r+0xb8>
 800a5fa:	4a2a      	ldr	r2, [pc, #168]	; (800a6a4 <__sflush_r+0x108>)
 800a5fc:	40ca      	lsrs	r2, r1
 800a5fe:	07d6      	lsls	r6, r2, #31
 800a600:	d528      	bpl.n	800a654 <__sflush_r+0xb8>
 800a602:	2200      	movs	r2, #0
 800a604:	6062      	str	r2, [r4, #4]
 800a606:	04d9      	lsls	r1, r3, #19
 800a608:	6922      	ldr	r2, [r4, #16]
 800a60a:	6022      	str	r2, [r4, #0]
 800a60c:	d504      	bpl.n	800a618 <__sflush_r+0x7c>
 800a60e:	1c42      	adds	r2, r0, #1
 800a610:	d101      	bne.n	800a616 <__sflush_r+0x7a>
 800a612:	682b      	ldr	r3, [r5, #0]
 800a614:	b903      	cbnz	r3, 800a618 <__sflush_r+0x7c>
 800a616:	6560      	str	r0, [r4, #84]	; 0x54
 800a618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a61a:	602f      	str	r7, [r5, #0]
 800a61c:	2900      	cmp	r1, #0
 800a61e:	d0ca      	beq.n	800a5b6 <__sflush_r+0x1a>
 800a620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a624:	4299      	cmp	r1, r3
 800a626:	d002      	beq.n	800a62e <__sflush_r+0x92>
 800a628:	4628      	mov	r0, r5
 800a62a:	f7ff fae7 	bl	8009bfc <_free_r>
 800a62e:	2000      	movs	r0, #0
 800a630:	6360      	str	r0, [r4, #52]	; 0x34
 800a632:	e7c1      	b.n	800a5b8 <__sflush_r+0x1c>
 800a634:	6a21      	ldr	r1, [r4, #32]
 800a636:	2301      	movs	r3, #1
 800a638:	4628      	mov	r0, r5
 800a63a:	47b0      	blx	r6
 800a63c:	1c41      	adds	r1, r0, #1
 800a63e:	d1c7      	bne.n	800a5d0 <__sflush_r+0x34>
 800a640:	682b      	ldr	r3, [r5, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d0c4      	beq.n	800a5d0 <__sflush_r+0x34>
 800a646:	2b1d      	cmp	r3, #29
 800a648:	d001      	beq.n	800a64e <__sflush_r+0xb2>
 800a64a:	2b16      	cmp	r3, #22
 800a64c:	d101      	bne.n	800a652 <__sflush_r+0xb6>
 800a64e:	602f      	str	r7, [r5, #0]
 800a650:	e7b1      	b.n	800a5b6 <__sflush_r+0x1a>
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a658:	81a3      	strh	r3, [r4, #12]
 800a65a:	e7ad      	b.n	800a5b8 <__sflush_r+0x1c>
 800a65c:	690f      	ldr	r7, [r1, #16]
 800a65e:	2f00      	cmp	r7, #0
 800a660:	d0a9      	beq.n	800a5b6 <__sflush_r+0x1a>
 800a662:	0793      	lsls	r3, r2, #30
 800a664:	680e      	ldr	r6, [r1, #0]
 800a666:	bf08      	it	eq
 800a668:	694b      	ldreq	r3, [r1, #20]
 800a66a:	600f      	str	r7, [r1, #0]
 800a66c:	bf18      	it	ne
 800a66e:	2300      	movne	r3, #0
 800a670:	eba6 0807 	sub.w	r8, r6, r7
 800a674:	608b      	str	r3, [r1, #8]
 800a676:	f1b8 0f00 	cmp.w	r8, #0
 800a67a:	dd9c      	ble.n	800a5b6 <__sflush_r+0x1a>
 800a67c:	6a21      	ldr	r1, [r4, #32]
 800a67e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a680:	4643      	mov	r3, r8
 800a682:	463a      	mov	r2, r7
 800a684:	4628      	mov	r0, r5
 800a686:	47b0      	blx	r6
 800a688:	2800      	cmp	r0, #0
 800a68a:	dc06      	bgt.n	800a69a <__sflush_r+0xfe>
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a692:	81a3      	strh	r3, [r4, #12]
 800a694:	f04f 30ff 	mov.w	r0, #4294967295
 800a698:	e78e      	b.n	800a5b8 <__sflush_r+0x1c>
 800a69a:	4407      	add	r7, r0
 800a69c:	eba8 0800 	sub.w	r8, r8, r0
 800a6a0:	e7e9      	b.n	800a676 <__sflush_r+0xda>
 800a6a2:	bf00      	nop
 800a6a4:	20400001 	.word	0x20400001

0800a6a8 <_fflush_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	690b      	ldr	r3, [r1, #16]
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	b913      	cbnz	r3, 800a6b8 <_fflush_r+0x10>
 800a6b2:	2500      	movs	r5, #0
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
 800a6b8:	b118      	cbz	r0, 800a6c2 <_fflush_r+0x1a>
 800a6ba:	6983      	ldr	r3, [r0, #24]
 800a6bc:	b90b      	cbnz	r3, 800a6c2 <_fflush_r+0x1a>
 800a6be:	f000 f887 	bl	800a7d0 <__sinit>
 800a6c2:	4b14      	ldr	r3, [pc, #80]	; (800a714 <_fflush_r+0x6c>)
 800a6c4:	429c      	cmp	r4, r3
 800a6c6:	d11b      	bne.n	800a700 <_fflush_r+0x58>
 800a6c8:	686c      	ldr	r4, [r5, #4]
 800a6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d0ef      	beq.n	800a6b2 <_fflush_r+0xa>
 800a6d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6d4:	07d0      	lsls	r0, r2, #31
 800a6d6:	d404      	bmi.n	800a6e2 <_fflush_r+0x3a>
 800a6d8:	0599      	lsls	r1, r3, #22
 800a6da:	d402      	bmi.n	800a6e2 <_fflush_r+0x3a>
 800a6dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6de:	f000 f915 	bl	800a90c <__retarget_lock_acquire_recursive>
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	f7ff ff59 	bl	800a59c <__sflush_r>
 800a6ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6ec:	07da      	lsls	r2, r3, #31
 800a6ee:	4605      	mov	r5, r0
 800a6f0:	d4e0      	bmi.n	800a6b4 <_fflush_r+0xc>
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	059b      	lsls	r3, r3, #22
 800a6f6:	d4dd      	bmi.n	800a6b4 <_fflush_r+0xc>
 800a6f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6fa:	f000 f908 	bl	800a90e <__retarget_lock_release_recursive>
 800a6fe:	e7d9      	b.n	800a6b4 <_fflush_r+0xc>
 800a700:	4b05      	ldr	r3, [pc, #20]	; (800a718 <_fflush_r+0x70>)
 800a702:	429c      	cmp	r4, r3
 800a704:	d101      	bne.n	800a70a <_fflush_r+0x62>
 800a706:	68ac      	ldr	r4, [r5, #8]
 800a708:	e7df      	b.n	800a6ca <_fflush_r+0x22>
 800a70a:	4b04      	ldr	r3, [pc, #16]	; (800a71c <_fflush_r+0x74>)
 800a70c:	429c      	cmp	r4, r3
 800a70e:	bf08      	it	eq
 800a710:	68ec      	ldreq	r4, [r5, #12]
 800a712:	e7da      	b.n	800a6ca <_fflush_r+0x22>
 800a714:	0800b114 	.word	0x0800b114
 800a718:	0800b134 	.word	0x0800b134
 800a71c:	0800b0f4 	.word	0x0800b0f4

0800a720 <std>:
 800a720:	2300      	movs	r3, #0
 800a722:	b510      	push	{r4, lr}
 800a724:	4604      	mov	r4, r0
 800a726:	e9c0 3300 	strd	r3, r3, [r0]
 800a72a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a72e:	6083      	str	r3, [r0, #8]
 800a730:	8181      	strh	r1, [r0, #12]
 800a732:	6643      	str	r3, [r0, #100]	; 0x64
 800a734:	81c2      	strh	r2, [r0, #14]
 800a736:	6183      	str	r3, [r0, #24]
 800a738:	4619      	mov	r1, r3
 800a73a:	2208      	movs	r2, #8
 800a73c:	305c      	adds	r0, #92	; 0x5c
 800a73e:	f7fc f80b 	bl	8006758 <memset>
 800a742:	4b05      	ldr	r3, [pc, #20]	; (800a758 <std+0x38>)
 800a744:	6263      	str	r3, [r4, #36]	; 0x24
 800a746:	4b05      	ldr	r3, [pc, #20]	; (800a75c <std+0x3c>)
 800a748:	62a3      	str	r3, [r4, #40]	; 0x28
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <std+0x40>)
 800a74c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a74e:	4b05      	ldr	r3, [pc, #20]	; (800a764 <std+0x44>)
 800a750:	6224      	str	r4, [r4, #32]
 800a752:	6323      	str	r3, [r4, #48]	; 0x30
 800a754:	bd10      	pop	{r4, pc}
 800a756:	bf00      	nop
 800a758:	0800aa71 	.word	0x0800aa71
 800a75c:	0800aa93 	.word	0x0800aa93
 800a760:	0800aacb 	.word	0x0800aacb
 800a764:	0800aaef 	.word	0x0800aaef

0800a768 <_cleanup_r>:
 800a768:	4901      	ldr	r1, [pc, #4]	; (800a770 <_cleanup_r+0x8>)
 800a76a:	f000 b8af 	b.w	800a8cc <_fwalk_reent>
 800a76e:	bf00      	nop
 800a770:	0800a6a9 	.word	0x0800a6a9

0800a774 <__sfmoreglue>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	1e4a      	subs	r2, r1, #1
 800a778:	2568      	movs	r5, #104	; 0x68
 800a77a:	4355      	muls	r5, r2
 800a77c:	460e      	mov	r6, r1
 800a77e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a782:	f7ff fa8b 	bl	8009c9c <_malloc_r>
 800a786:	4604      	mov	r4, r0
 800a788:	b140      	cbz	r0, 800a79c <__sfmoreglue+0x28>
 800a78a:	2100      	movs	r1, #0
 800a78c:	e9c0 1600 	strd	r1, r6, [r0]
 800a790:	300c      	adds	r0, #12
 800a792:	60a0      	str	r0, [r4, #8]
 800a794:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a798:	f7fb ffde 	bl	8006758 <memset>
 800a79c:	4620      	mov	r0, r4
 800a79e:	bd70      	pop	{r4, r5, r6, pc}

0800a7a0 <__sfp_lock_acquire>:
 800a7a0:	4801      	ldr	r0, [pc, #4]	; (800a7a8 <__sfp_lock_acquire+0x8>)
 800a7a2:	f000 b8b3 	b.w	800a90c <__retarget_lock_acquire_recursive>
 800a7a6:	bf00      	nop
 800a7a8:	20001624 	.word	0x20001624

0800a7ac <__sfp_lock_release>:
 800a7ac:	4801      	ldr	r0, [pc, #4]	; (800a7b4 <__sfp_lock_release+0x8>)
 800a7ae:	f000 b8ae 	b.w	800a90e <__retarget_lock_release_recursive>
 800a7b2:	bf00      	nop
 800a7b4:	20001624 	.word	0x20001624

0800a7b8 <__sinit_lock_acquire>:
 800a7b8:	4801      	ldr	r0, [pc, #4]	; (800a7c0 <__sinit_lock_acquire+0x8>)
 800a7ba:	f000 b8a7 	b.w	800a90c <__retarget_lock_acquire_recursive>
 800a7be:	bf00      	nop
 800a7c0:	2000161f 	.word	0x2000161f

0800a7c4 <__sinit_lock_release>:
 800a7c4:	4801      	ldr	r0, [pc, #4]	; (800a7cc <__sinit_lock_release+0x8>)
 800a7c6:	f000 b8a2 	b.w	800a90e <__retarget_lock_release_recursive>
 800a7ca:	bf00      	nop
 800a7cc:	2000161f 	.word	0x2000161f

0800a7d0 <__sinit>:
 800a7d0:	b510      	push	{r4, lr}
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	f7ff fff0 	bl	800a7b8 <__sinit_lock_acquire>
 800a7d8:	69a3      	ldr	r3, [r4, #24]
 800a7da:	b11b      	cbz	r3, 800a7e4 <__sinit+0x14>
 800a7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7e0:	f7ff bff0 	b.w	800a7c4 <__sinit_lock_release>
 800a7e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7e8:	6523      	str	r3, [r4, #80]	; 0x50
 800a7ea:	4b13      	ldr	r3, [pc, #76]	; (800a838 <__sinit+0x68>)
 800a7ec:	4a13      	ldr	r2, [pc, #76]	; (800a83c <__sinit+0x6c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7f2:	42a3      	cmp	r3, r4
 800a7f4:	bf04      	itt	eq
 800a7f6:	2301      	moveq	r3, #1
 800a7f8:	61a3      	streq	r3, [r4, #24]
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f000 f820 	bl	800a840 <__sfp>
 800a800:	6060      	str	r0, [r4, #4]
 800a802:	4620      	mov	r0, r4
 800a804:	f000 f81c 	bl	800a840 <__sfp>
 800a808:	60a0      	str	r0, [r4, #8]
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 f818 	bl	800a840 <__sfp>
 800a810:	2200      	movs	r2, #0
 800a812:	60e0      	str	r0, [r4, #12]
 800a814:	2104      	movs	r1, #4
 800a816:	6860      	ldr	r0, [r4, #4]
 800a818:	f7ff ff82 	bl	800a720 <std>
 800a81c:	68a0      	ldr	r0, [r4, #8]
 800a81e:	2201      	movs	r2, #1
 800a820:	2109      	movs	r1, #9
 800a822:	f7ff ff7d 	bl	800a720 <std>
 800a826:	68e0      	ldr	r0, [r4, #12]
 800a828:	2202      	movs	r2, #2
 800a82a:	2112      	movs	r1, #18
 800a82c:	f7ff ff78 	bl	800a720 <std>
 800a830:	2301      	movs	r3, #1
 800a832:	61a3      	str	r3, [r4, #24]
 800a834:	e7d2      	b.n	800a7dc <__sinit+0xc>
 800a836:	bf00      	nop
 800a838:	0800aca4 	.word	0x0800aca4
 800a83c:	0800a769 	.word	0x0800a769

0800a840 <__sfp>:
 800a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a842:	4607      	mov	r7, r0
 800a844:	f7ff ffac 	bl	800a7a0 <__sfp_lock_acquire>
 800a848:	4b1e      	ldr	r3, [pc, #120]	; (800a8c4 <__sfp+0x84>)
 800a84a:	681e      	ldr	r6, [r3, #0]
 800a84c:	69b3      	ldr	r3, [r6, #24]
 800a84e:	b913      	cbnz	r3, 800a856 <__sfp+0x16>
 800a850:	4630      	mov	r0, r6
 800a852:	f7ff ffbd 	bl	800a7d0 <__sinit>
 800a856:	3648      	adds	r6, #72	; 0x48
 800a858:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	d503      	bpl.n	800a868 <__sfp+0x28>
 800a860:	6833      	ldr	r3, [r6, #0]
 800a862:	b30b      	cbz	r3, 800a8a8 <__sfp+0x68>
 800a864:	6836      	ldr	r6, [r6, #0]
 800a866:	e7f7      	b.n	800a858 <__sfp+0x18>
 800a868:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a86c:	b9d5      	cbnz	r5, 800a8a4 <__sfp+0x64>
 800a86e:	4b16      	ldr	r3, [pc, #88]	; (800a8c8 <__sfp+0x88>)
 800a870:	60e3      	str	r3, [r4, #12]
 800a872:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a876:	6665      	str	r5, [r4, #100]	; 0x64
 800a878:	f000 f847 	bl	800a90a <__retarget_lock_init_recursive>
 800a87c:	f7ff ff96 	bl	800a7ac <__sfp_lock_release>
 800a880:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a884:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a888:	6025      	str	r5, [r4, #0]
 800a88a:	61a5      	str	r5, [r4, #24]
 800a88c:	2208      	movs	r2, #8
 800a88e:	4629      	mov	r1, r5
 800a890:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a894:	f7fb ff60 	bl	8006758 <memset>
 800a898:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a89c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8a4:	3468      	adds	r4, #104	; 0x68
 800a8a6:	e7d9      	b.n	800a85c <__sfp+0x1c>
 800a8a8:	2104      	movs	r1, #4
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	f7ff ff62 	bl	800a774 <__sfmoreglue>
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	6030      	str	r0, [r6, #0]
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d1d5      	bne.n	800a864 <__sfp+0x24>
 800a8b8:	f7ff ff78 	bl	800a7ac <__sfp_lock_release>
 800a8bc:	230c      	movs	r3, #12
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	e7ee      	b.n	800a8a0 <__sfp+0x60>
 800a8c2:	bf00      	nop
 800a8c4:	0800aca4 	.word	0x0800aca4
 800a8c8:	ffff0001 	.word	0xffff0001

0800a8cc <_fwalk_reent>:
 800a8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	4688      	mov	r8, r1
 800a8d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8d8:	2700      	movs	r7, #0
 800a8da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8de:	f1b9 0901 	subs.w	r9, r9, #1
 800a8e2:	d505      	bpl.n	800a8f0 <_fwalk_reent+0x24>
 800a8e4:	6824      	ldr	r4, [r4, #0]
 800a8e6:	2c00      	cmp	r4, #0
 800a8e8:	d1f7      	bne.n	800a8da <_fwalk_reent+0xe>
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8f0:	89ab      	ldrh	r3, [r5, #12]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d907      	bls.n	800a906 <_fwalk_reent+0x3a>
 800a8f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	d003      	beq.n	800a906 <_fwalk_reent+0x3a>
 800a8fe:	4629      	mov	r1, r5
 800a900:	4630      	mov	r0, r6
 800a902:	47c0      	blx	r8
 800a904:	4307      	orrs	r7, r0
 800a906:	3568      	adds	r5, #104	; 0x68
 800a908:	e7e9      	b.n	800a8de <_fwalk_reent+0x12>

0800a90a <__retarget_lock_init_recursive>:
 800a90a:	4770      	bx	lr

0800a90c <__retarget_lock_acquire_recursive>:
 800a90c:	4770      	bx	lr

0800a90e <__retarget_lock_release_recursive>:
 800a90e:	4770      	bx	lr

0800a910 <__swhatbuf_r>:
 800a910:	b570      	push	{r4, r5, r6, lr}
 800a912:	460e      	mov	r6, r1
 800a914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a918:	2900      	cmp	r1, #0
 800a91a:	b096      	sub	sp, #88	; 0x58
 800a91c:	4614      	mov	r4, r2
 800a91e:	461d      	mov	r5, r3
 800a920:	da07      	bge.n	800a932 <__swhatbuf_r+0x22>
 800a922:	2300      	movs	r3, #0
 800a924:	602b      	str	r3, [r5, #0]
 800a926:	89b3      	ldrh	r3, [r6, #12]
 800a928:	061a      	lsls	r2, r3, #24
 800a92a:	d410      	bmi.n	800a94e <__swhatbuf_r+0x3e>
 800a92c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a930:	e00e      	b.n	800a950 <__swhatbuf_r+0x40>
 800a932:	466a      	mov	r2, sp
 800a934:	f000 f902 	bl	800ab3c <_fstat_r>
 800a938:	2800      	cmp	r0, #0
 800a93a:	dbf2      	blt.n	800a922 <__swhatbuf_r+0x12>
 800a93c:	9a01      	ldr	r2, [sp, #4]
 800a93e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a942:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a946:	425a      	negs	r2, r3
 800a948:	415a      	adcs	r2, r3
 800a94a:	602a      	str	r2, [r5, #0]
 800a94c:	e7ee      	b.n	800a92c <__swhatbuf_r+0x1c>
 800a94e:	2340      	movs	r3, #64	; 0x40
 800a950:	2000      	movs	r0, #0
 800a952:	6023      	str	r3, [r4, #0]
 800a954:	b016      	add	sp, #88	; 0x58
 800a956:	bd70      	pop	{r4, r5, r6, pc}

0800a958 <__smakebuf_r>:
 800a958:	898b      	ldrh	r3, [r1, #12]
 800a95a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a95c:	079d      	lsls	r5, r3, #30
 800a95e:	4606      	mov	r6, r0
 800a960:	460c      	mov	r4, r1
 800a962:	d507      	bpl.n	800a974 <__smakebuf_r+0x1c>
 800a964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	6123      	str	r3, [r4, #16]
 800a96c:	2301      	movs	r3, #1
 800a96e:	6163      	str	r3, [r4, #20]
 800a970:	b002      	add	sp, #8
 800a972:	bd70      	pop	{r4, r5, r6, pc}
 800a974:	ab01      	add	r3, sp, #4
 800a976:	466a      	mov	r2, sp
 800a978:	f7ff ffca 	bl	800a910 <__swhatbuf_r>
 800a97c:	9900      	ldr	r1, [sp, #0]
 800a97e:	4605      	mov	r5, r0
 800a980:	4630      	mov	r0, r6
 800a982:	f7ff f98b 	bl	8009c9c <_malloc_r>
 800a986:	b948      	cbnz	r0, 800a99c <__smakebuf_r+0x44>
 800a988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a98c:	059a      	lsls	r2, r3, #22
 800a98e:	d4ef      	bmi.n	800a970 <__smakebuf_r+0x18>
 800a990:	f023 0303 	bic.w	r3, r3, #3
 800a994:	f043 0302 	orr.w	r3, r3, #2
 800a998:	81a3      	strh	r3, [r4, #12]
 800a99a:	e7e3      	b.n	800a964 <__smakebuf_r+0xc>
 800a99c:	4b0d      	ldr	r3, [pc, #52]	; (800a9d4 <__smakebuf_r+0x7c>)
 800a99e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	6020      	str	r0, [r4, #0]
 800a9a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a8:	81a3      	strh	r3, [r4, #12]
 800a9aa:	9b00      	ldr	r3, [sp, #0]
 800a9ac:	6163      	str	r3, [r4, #20]
 800a9ae:	9b01      	ldr	r3, [sp, #4]
 800a9b0:	6120      	str	r0, [r4, #16]
 800a9b2:	b15b      	cbz	r3, 800a9cc <__smakebuf_r+0x74>
 800a9b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f000 f8d1 	bl	800ab60 <_isatty_r>
 800a9be:	b128      	cbz	r0, 800a9cc <__smakebuf_r+0x74>
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	f023 0303 	bic.w	r3, r3, #3
 800a9c6:	f043 0301 	orr.w	r3, r3, #1
 800a9ca:	81a3      	strh	r3, [r4, #12]
 800a9cc:	89a0      	ldrh	r0, [r4, #12]
 800a9ce:	4305      	orrs	r5, r0
 800a9d0:	81a5      	strh	r5, [r4, #12]
 800a9d2:	e7cd      	b.n	800a970 <__smakebuf_r+0x18>
 800a9d4:	0800a769 	.word	0x0800a769

0800a9d8 <_malloc_usable_size_r>:
 800a9d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9dc:	1f18      	subs	r0, r3, #4
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	bfbc      	itt	lt
 800a9e2:	580b      	ldrlt	r3, [r1, r0]
 800a9e4:	18c0      	addlt	r0, r0, r3
 800a9e6:	4770      	bx	lr

0800a9e8 <_raise_r>:
 800a9e8:	291f      	cmp	r1, #31
 800a9ea:	b538      	push	{r3, r4, r5, lr}
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	460d      	mov	r5, r1
 800a9f0:	d904      	bls.n	800a9fc <_raise_r+0x14>
 800a9f2:	2316      	movs	r3, #22
 800a9f4:	6003      	str	r3, [r0, #0]
 800a9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9fa:	bd38      	pop	{r3, r4, r5, pc}
 800a9fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9fe:	b112      	cbz	r2, 800aa06 <_raise_r+0x1e>
 800aa00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa04:	b94b      	cbnz	r3, 800aa1a <_raise_r+0x32>
 800aa06:	4620      	mov	r0, r4
 800aa08:	f000 f830 	bl	800aa6c <_getpid_r>
 800aa0c:	462a      	mov	r2, r5
 800aa0e:	4601      	mov	r1, r0
 800aa10:	4620      	mov	r0, r4
 800aa12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa16:	f000 b817 	b.w	800aa48 <_kill_r>
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d00a      	beq.n	800aa34 <_raise_r+0x4c>
 800aa1e:	1c59      	adds	r1, r3, #1
 800aa20:	d103      	bne.n	800aa2a <_raise_r+0x42>
 800aa22:	2316      	movs	r3, #22
 800aa24:	6003      	str	r3, [r0, #0]
 800aa26:	2001      	movs	r0, #1
 800aa28:	e7e7      	b.n	800a9fa <_raise_r+0x12>
 800aa2a:	2400      	movs	r4, #0
 800aa2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa30:	4628      	mov	r0, r5
 800aa32:	4798      	blx	r3
 800aa34:	2000      	movs	r0, #0
 800aa36:	e7e0      	b.n	800a9fa <_raise_r+0x12>

0800aa38 <raise>:
 800aa38:	4b02      	ldr	r3, [pc, #8]	; (800aa44 <raise+0xc>)
 800aa3a:	4601      	mov	r1, r0
 800aa3c:	6818      	ldr	r0, [r3, #0]
 800aa3e:	f7ff bfd3 	b.w	800a9e8 <_raise_r>
 800aa42:	bf00      	nop
 800aa44:	20000060 	.word	0x20000060

0800aa48 <_kill_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	4d07      	ldr	r5, [pc, #28]	; (800aa68 <_kill_r+0x20>)
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4608      	mov	r0, r1
 800aa52:	4611      	mov	r1, r2
 800aa54:	602b      	str	r3, [r5, #0]
 800aa56:	f7f7 fb17 	bl	8002088 <_kill>
 800aa5a:	1c43      	adds	r3, r0, #1
 800aa5c:	d102      	bne.n	800aa64 <_kill_r+0x1c>
 800aa5e:	682b      	ldr	r3, [r5, #0]
 800aa60:	b103      	cbz	r3, 800aa64 <_kill_r+0x1c>
 800aa62:	6023      	str	r3, [r4, #0]
 800aa64:	bd38      	pop	{r3, r4, r5, pc}
 800aa66:	bf00      	nop
 800aa68:	20001618 	.word	0x20001618

0800aa6c <_getpid_r>:
 800aa6c:	f7f7 bb04 	b.w	8002078 <_getpid>

0800aa70 <__sread>:
 800aa70:	b510      	push	{r4, lr}
 800aa72:	460c      	mov	r4, r1
 800aa74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa78:	f000 f894 	bl	800aba4 <_read_r>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	bfab      	itete	ge
 800aa80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa82:	89a3      	ldrhlt	r3, [r4, #12]
 800aa84:	181b      	addge	r3, r3, r0
 800aa86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa8a:	bfac      	ite	ge
 800aa8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa8e:	81a3      	strhlt	r3, [r4, #12]
 800aa90:	bd10      	pop	{r4, pc}

0800aa92 <__swrite>:
 800aa92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa96:	461f      	mov	r7, r3
 800aa98:	898b      	ldrh	r3, [r1, #12]
 800aa9a:	05db      	lsls	r3, r3, #23
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	4616      	mov	r6, r2
 800aaa2:	d505      	bpl.n	800aab0 <__swrite+0x1e>
 800aaa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f000 f868 	bl	800ab80 <_lseek_r>
 800aab0:	89a3      	ldrh	r3, [r4, #12]
 800aab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aaba:	81a3      	strh	r3, [r4, #12]
 800aabc:	4632      	mov	r2, r6
 800aabe:	463b      	mov	r3, r7
 800aac0:	4628      	mov	r0, r5
 800aac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aac6:	f000 b817 	b.w	800aaf8 <_write_r>

0800aaca <__sseek>:
 800aaca:	b510      	push	{r4, lr}
 800aacc:	460c      	mov	r4, r1
 800aace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad2:	f000 f855 	bl	800ab80 <_lseek_r>
 800aad6:	1c43      	adds	r3, r0, #1
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	bf15      	itete	ne
 800aadc:	6560      	strne	r0, [r4, #84]	; 0x54
 800aade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aae6:	81a3      	strheq	r3, [r4, #12]
 800aae8:	bf18      	it	ne
 800aaea:	81a3      	strhne	r3, [r4, #12]
 800aaec:	bd10      	pop	{r4, pc}

0800aaee <__sclose>:
 800aaee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf2:	f000 b813 	b.w	800ab1c <_close_r>
	...

0800aaf8 <_write_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4d07      	ldr	r5, [pc, #28]	; (800ab18 <_write_r+0x20>)
 800aafc:	4604      	mov	r4, r0
 800aafe:	4608      	mov	r0, r1
 800ab00:	4611      	mov	r1, r2
 800ab02:	2200      	movs	r2, #0
 800ab04:	602a      	str	r2, [r5, #0]
 800ab06:	461a      	mov	r2, r3
 800ab08:	f7f7 faf5 	bl	80020f6 <_write>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d102      	bne.n	800ab16 <_write_r+0x1e>
 800ab10:	682b      	ldr	r3, [r5, #0]
 800ab12:	b103      	cbz	r3, 800ab16 <_write_r+0x1e>
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	20001618 	.word	0x20001618

0800ab1c <_close_r>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	4d06      	ldr	r5, [pc, #24]	; (800ab38 <_close_r+0x1c>)
 800ab20:	2300      	movs	r3, #0
 800ab22:	4604      	mov	r4, r0
 800ab24:	4608      	mov	r0, r1
 800ab26:	602b      	str	r3, [r5, #0]
 800ab28:	f7f7 fb01 	bl	800212e <_close>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d102      	bne.n	800ab36 <_close_r+0x1a>
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	b103      	cbz	r3, 800ab36 <_close_r+0x1a>
 800ab34:	6023      	str	r3, [r4, #0]
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
 800ab38:	20001618 	.word	0x20001618

0800ab3c <_fstat_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4d07      	ldr	r5, [pc, #28]	; (800ab5c <_fstat_r+0x20>)
 800ab40:	2300      	movs	r3, #0
 800ab42:	4604      	mov	r4, r0
 800ab44:	4608      	mov	r0, r1
 800ab46:	4611      	mov	r1, r2
 800ab48:	602b      	str	r3, [r5, #0]
 800ab4a:	f7f7 fafc 	bl	8002146 <_fstat>
 800ab4e:	1c43      	adds	r3, r0, #1
 800ab50:	d102      	bne.n	800ab58 <_fstat_r+0x1c>
 800ab52:	682b      	ldr	r3, [r5, #0]
 800ab54:	b103      	cbz	r3, 800ab58 <_fstat_r+0x1c>
 800ab56:	6023      	str	r3, [r4, #0]
 800ab58:	bd38      	pop	{r3, r4, r5, pc}
 800ab5a:	bf00      	nop
 800ab5c:	20001618 	.word	0x20001618

0800ab60 <_isatty_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4d06      	ldr	r5, [pc, #24]	; (800ab7c <_isatty_r+0x1c>)
 800ab64:	2300      	movs	r3, #0
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	602b      	str	r3, [r5, #0]
 800ab6c:	f7f7 fafb 	bl	8002166 <_isatty>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d102      	bne.n	800ab7a <_isatty_r+0x1a>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	b103      	cbz	r3, 800ab7a <_isatty_r+0x1a>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	20001618 	.word	0x20001618

0800ab80 <_lseek_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4d07      	ldr	r5, [pc, #28]	; (800aba0 <_lseek_r+0x20>)
 800ab84:	4604      	mov	r4, r0
 800ab86:	4608      	mov	r0, r1
 800ab88:	4611      	mov	r1, r2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	602a      	str	r2, [r5, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f7f7 faf4 	bl	800217c <_lseek>
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	d102      	bne.n	800ab9e <_lseek_r+0x1e>
 800ab98:	682b      	ldr	r3, [r5, #0]
 800ab9a:	b103      	cbz	r3, 800ab9e <_lseek_r+0x1e>
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	20001618 	.word	0x20001618

0800aba4 <_read_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d07      	ldr	r5, [pc, #28]	; (800abc4 <_read_r+0x20>)
 800aba8:	4604      	mov	r4, r0
 800abaa:	4608      	mov	r0, r1
 800abac:	4611      	mov	r1, r2
 800abae:	2200      	movs	r2, #0
 800abb0:	602a      	str	r2, [r5, #0]
 800abb2:	461a      	mov	r2, r3
 800abb4:	f7f7 fa82 	bl	80020bc <_read>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d102      	bne.n	800abc2 <_read_r+0x1e>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	b103      	cbz	r3, 800abc2 <_read_r+0x1e>
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	20001618 	.word	0x20001618

0800abc8 <_init>:
 800abc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abca:	bf00      	nop
 800abcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abce:	bc08      	pop	{r3}
 800abd0:	469e      	mov	lr, r3
 800abd2:	4770      	bx	lr

0800abd4 <_fini>:
 800abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd6:	bf00      	nop
 800abd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abda:	bc08      	pop	{r3}
 800abdc:	469e      	mov	lr, r3
 800abde:	4770      	bx	lr
